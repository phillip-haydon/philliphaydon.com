<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://www.philliphaydon.com/feed.xml</link><description /><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/06/taking-snapshots-of-a-video-and-displaying-it/</guid><link>http://www.philliphaydon.com/2014/06/taking-snapshots-of-a-video-and-displaying-it/</link><title>Taking snap shots of a Video &amp; displaying it</title><description>&lt;p&gt;Now we've loaded an image/video, we've captured the drop event, we've displayed it...&lt;/p&gt;

&lt;p&gt;But what about taking screen grabs of a video?&lt;/p&gt;

&lt;p&gt;To start with I'll go back to the code we used in Part 1, so we have an input, a load button, and a video control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Racing ahead we load that up:&lt;/p&gt;

</description><pubDate>Sun, 08 Jun 2014 16:00:00 Z</pubDate><a10:updated>2014-06-08T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Now we've loaded an image/video, we've captured the drop event, we've displayed it...&lt;/p&gt;

&lt;p&gt;But what about taking screen grabs of a video?&lt;/p&gt;

&lt;p&gt;To start with I'll go back to the code we used in Part 1, so we have an input, a load button, and a video control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Racing ahead we load that up:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;    
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');

        document.getElementById('load-video').addEventListener('click', function(){
            var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

            video.src = fileUrl;            
        });

    })();   
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have loaded our video, how do we capture screen grabs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/strong&gt; All sizes are halved becaused the test video is too large :)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The hidden canvas&lt;/h2&gt;

&lt;p&gt;The first thing we have to do is get the current data of the current frame being displayed. To do that we need to create a hidden canvas, and then draw onto it. &lt;/p&gt;

&lt;p&gt;So we're gonna add a canvas element to the UI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;canvas id="temp-canvas" style="display:none"&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The canvas doesn't need to display, it's simply there to capture data. Now we need to put the video into it, so lets add a button, lets also add somewhere to display the image once we have it. :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="button" value="Copy current frame to image below" id="load-image" /&amp;gt;

&amp;lt;br /&amp;gt;Image......&amp;lt;br /&amp;gt;
&amp;lt;img id="image-container" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The fluff in between...&lt;/h2&gt;

&lt;p&gt;Now we need to add some fluff when the button to copy the current frame is clicked.&lt;/p&gt;

&lt;p&gt;Let's find the controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var image = document.getElementById('image-container');
var canvas = document.getElementById('temp-canvas');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a click event to the new button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.getElementById('load-image').addEventListener('click', function(){

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Load that image!&lt;/h2&gt;

&lt;p&gt;What we need to do now is take the dom video control, as is. &lt;em&gt;(this means if you're using jQuery to find the element, you need to get the real dom element, not the jQuery wrapped element)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;This is currently our &lt;code&gt;video&lt;/code&gt; variable. &lt;/p&gt;

&lt;p&gt;First up we will size our canvas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;canvas.height = video.videoHeight / 2;
canvas.width = video.videoWidth / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to create a context on our canvas. We will create a 2d context like do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var context = canvas.getContext("2d");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a 2d rendering context whih we can use to draw on. We will draw the current video frame. Assuming we have pause the video in the middle somewhere, we can hit the button to capture the current frame by padding the video in like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, canvas.width, canvas.height);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;// NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this I used the 9 property &lt;code&gt;drawImage&lt;/code&gt; function, this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;drawImage(source, sourceStartX, sourceStartY, width, height, destinationStartX, destinationStartY, width, height) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means, the sourceStart is where you want the first pixel to be captured from, the width/height of the source from the start pixels. &lt;/p&gt;

&lt;p&gt;The destinationStart is where you want to place the image on the canvas and how you want it to stretch.&lt;/p&gt;

&lt;p&gt;My sample takes the actual height/width of the source and places it in the smaller canvas.&lt;/p&gt;

&lt;p&gt;You can also use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will assume the same height/width for source/canvas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;// END NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now all that's left is to display it, to do this we call the &lt;code&gt;toDataURL()&lt;/code&gt; function defined on the canvas. This takes what's currently drawn and shows it in a image element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image.src = canvas.toDataURL();     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why do we do this rather than display the canvas itself? Well this allows you to right click the image and download it. :)&lt;/p&gt;

&lt;p&gt;Now we can load a video:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/screen-capture-video-html5-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And then press the button to capture it!!!!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/screen-capture-video-html5-02.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The final codez&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="video-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;br /&amp;gt;Video...&amp;lt;br /&amp;gt;
    &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;

    &amp;lt;br /&amp;gt;
    &amp;lt;input type="button" value="Copy current frame to image below" id="load-image" /&amp;gt;

    &amp;lt;br /&amp;gt;Image......&amp;lt;br /&amp;gt;
    &amp;lt;img id="image-container" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;canvas id="temp-canvas" style="display:none"&amp;gt;&amp;lt;/canvas&amp;gt;

&amp;lt;script&amp;gt;
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');
        var image = document.getElementById('image-container');
        var canvas = document.getElementById('temp-canvas');

        document.getElementById('load-video').addEventListener('click', function(){
            var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

            video.src = fileUrl;            
        });
        document.getElementById('load-image').addEventListener('click', function(){

            canvas.height = video.videoHeight;
            canvas.width = video.videoWidth;

            var context = canvas.getContext("2d");

            drawImage(source, sourceStartX, sourceStartY, width, height, destinationStartX, destinationStartY, width, height) 

            image.src = canvas.toDataURL();         
        });

    })();

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What do we have...&lt;/h2&gt;

&lt;p&gt;So we've got an file &lt;code&gt;input&lt;/code&gt; control, it loads a video file into a &lt;code&gt;video&lt;/code&gt; element, then we scrub the video &amp;amp; hit that button, and bam, we capture what ever the current frame is.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/05/managing-your-azure-storage-account-with-zudio/</guid><link>http://www.philliphaydon.com/2014/05/managing-your-azure-storage-account-with-zudio/</link><title>Managing your Azure Storage account with Zudio</title><description>&lt;p&gt;Messing around with Azure Queues, using the C# library to create a queue, add messages, read them, delete them... all is well and good...&lt;/p&gt;

&lt;p&gt;But at some point I wanted to view what I was putting into the queue...&lt;/p&gt;

&lt;p&gt;The Azure blog has a recent post listing a few &lt;a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2014/03/11/windows-azure-storage-explorers-2014.aspx"&gt;Azure Storage explorers&lt;/a&gt;. I tried a couple of them, but they were so buggy!&lt;/p&gt;

&lt;p&gt;Infact, I'm sorry to say... Azure Storage Explorer was the worst. When I attempted to refresh a queue, nothing happened. I had to add a second queue, then swap between each queue in order to review the list. Most of the buttons don't seem to do anything at all.&lt;/p&gt;

&lt;p&gt;Then I remember &lt;a href="http://twitter.com/markrendle"&gt;Mark Rendle&lt;/a&gt; tweeted me about his &lt;a href="http://zud.io/"&gt;Zudio&lt;/a&gt; site. Funnily enough he got a mention on the blog post. I decided to login and check it out again.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io/"&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-02.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

</description><pubDate>Fri, 02 May 2014 16:00:00 Z</pubDate><a10:updated>2014-05-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Messing around with Azure Queues, using the C# library to create a queue, add messages, read them, delete them... all is well and good...&lt;/p&gt;

&lt;p&gt;But at some point I wanted to view what I was putting into the queue...&lt;/p&gt;

&lt;p&gt;The Azure blog has a recent post listing a few &lt;a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2014/03/11/windows-azure-storage-explorers-2014.aspx"&gt;Azure Storage explorers&lt;/a&gt;. I tried a couple of them, but they were so buggy!&lt;/p&gt;

&lt;p&gt;Infact, I'm sorry to say... Azure Storage Explorer was the worst. When I attempted to refresh a queue, nothing happened. I had to add a second queue, then swap between each queue in order to review the list. Most of the buttons don't seem to do anything at all.&lt;/p&gt;

&lt;p&gt;Then I remember &lt;a href="http://twitter.com/markrendle"&gt;Mark Rendle&lt;/a&gt; tweeted me about his &lt;a href="http://zud.io/"&gt;Zudio&lt;/a&gt; site. Funnily enough he got a mention on the blog post. I decided to login and check it out again.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io/"&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-02.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Using zudio&lt;/h2&gt;

&lt;p&gt;Assuming you've already setup a Storage Account on Azure, we can login to zudio, where you will be presented with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the Add a Storage Account button prompts us to add an account: &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can get the Account Name and Location looking at the Storage List in Azure&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Then the Shared Key can be found by clicking the Manage Access Keys link in the same page as the Store Accounts list:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Selecting one of the Access Keys and pasting it into the Shared Key in Zudio.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once we have added the account we should have the account name appear in the list on Zudio&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click the account name and we should get a list of options, we can choose what we want to manage, Blobs, Queues, or Tables. Lets pick Queues.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We should get a list of queues, my list is empty since I haven't added any yet...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-09.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We could manage the queues from this screen using the available options:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But lets add some code :)&lt;/p&gt;

&lt;h2&gt;Codez - because we need some :)&lt;/h2&gt;

&lt;p&gt;In a basic console app, I've added the &lt;a href="http://www.nuget.org/packages/WindowsAzure.Storage/"&gt;WindowsAzure.Storage&lt;/a&gt; nuget, and written some simple code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var storageConnection = @"DefaultEndpointsProtocol=https;AccountName=phzudio;AccountKey=*REMOVED*";
var storageAccount = CloudStorageAccount.Parse(storageConnection);

var queueClient = storageAccount.CreateCloudQueueClient();
var queue = queueClient.GetQueueReference("my-first-queue");

queue.CreateIfNotExists();

queue.AddMessage(new CloudQueueMessage("Hello, World"));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it... simple simple code. The account key removed in the &lt;code&gt;storageConnection&lt;/code&gt; is the same key we used to connect to Zudio.&lt;/p&gt;

&lt;p&gt;Now when we run the code, and jump back to Zudio, hit refresh...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We get our newly created queue from code.&lt;/p&gt;

&lt;p&gt;Clicking on the queue shows us our message&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;From here we can manage messages &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Adding new messages, refreshing, dequeuing, etc.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Zudio is super simple to use and pretty damn powerful for managing Azure Storage, Mark has done an awesome job and I look forward to using Zudio in the future. &lt;/p&gt;

&lt;p&gt;So far I'm only used it for queues, and clicked around on the tables/blobs, but its so easy to use and intuitive! &lt;/p&gt;

&lt;p&gt;I would highly recommend checking out Zudio!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io"&gt;http://zud.io&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/05/creating-a-drop-area-top-drop-a-file-in-html5/</guid><link>http://www.philliphaydon.com/2014/05/creating-a-drop-area-top-drop-a-file-in-html5/</link><title>Creating a drop area to drop a file in HTML 5</title><description>&lt;p&gt;In the first post we uploaded a file and viewed it in the browser without sending it to a server, now we are going to create a drop area so that you can drag a file from a folder, into the website.&lt;/p&gt;

&lt;p&gt;Using the same HTML as before, lets add a drop area:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id="drop-area"&amp;gt;
    Drop File Here...
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" width="360" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a bit of CSS to make it a little more visible:&lt;/p&gt;

</description><pubDate>Wed, 30 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In the first post we uploaded a file and viewed it in the browser without sending it to a server, now we are going to create a drop area so that you can drag a file from a folder, into the website.&lt;/p&gt;

&lt;p&gt;Using the same HTML as before, lets add a drop area:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id="drop-area"&amp;gt;
    Drop File Here...
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" width="360" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a bit of CSS to make it a little more visible:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style type="text/css"&amp;gt;
#drop-area{
    border: 1px dotted #666;
    background: #f2f2f2;
    width: 360px;
    height: 50px;
    vertical-align: middle;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

#drop-area.drop {
    background: red;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we view it now it should look like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-01.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Drag Enter&lt;/h2&gt;

&lt;p&gt;Now we have our UI set, we need to add an indication when the user drags a file...&lt;/p&gt;

&lt;p&gt;If we don't, it would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Which isn't very helpful, so first we need to attach some events for &lt;code&gt;dragenter&lt;/code&gt; and &lt;code&gt;dragleave&lt;/code&gt; so we can add/remove the class.&lt;/p&gt;

&lt;p&gt;We use this instead of &lt;code&gt;:hover&lt;/code&gt; because we only want the visual effect when the user is dragging something into the droppable area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dropArea = document.getElementById('drop-area');

dropArea.addEventListener('dragenter', function(e){
    e.currentTarget.classList.add('drop');
});

dropArea.addEventListener('dragleave', function(e){
    e.currentTarget.classList.remove('drop');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we drag the a file over the drop area, we end with...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-03.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The hidden 'Copy'...&lt;/h2&gt;

&lt;p&gt;It took me a while to figure out why my code didn't work and it happens to be the bit people put in the sample code and never explain...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dropArea.addEventListener('dragover', function(e){
    e.preventDefault();
    e.stopPropagation();
    e.dataTransfer.dropEffect = 'copy';
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order for the drag to be captured, we need to set the &lt;code&gt;dropEffect&lt;/code&gt;, by setting it to &lt;code&gt;copy&lt;/code&gt;, apparently allows the source item (the item we're dragging) will be copied to the drop location.&lt;/p&gt;

&lt;p&gt;The possible values on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer#dropEffect.28.29"&gt;W3&lt;/a&gt; and &lt;a href="http://www.w3.org/TR/2011/WD-html5-20110113/dnd.html#dom-datatransfer-dropeffect"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;copy:&lt;/strong&gt; A copy of the source item is made at the new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;move:&lt;/strong&gt; An item is moved to a new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;link:&lt;/strong&gt; A link is established to the source at the new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;none:&lt;/strong&gt; The item may not be dropped.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting this value on &lt;code&gt;dragenter&lt;/code&gt; doesn't seem to do anything, it only works when doing it on &lt;code&gt;dragover&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Lets capture it and render it!!!&lt;/h2&gt;

&lt;p&gt;All that's left now is to touch the &lt;code&gt;drop&lt;/code&gt; event...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dropArea.addEventListener('drop', function(e){
    e.preventDefault();
    e.stopPropagation();

    var file = e.dataTransfer.files[0];
    var fileUrl = window.URL.createObjectURL(file);

    image.src = fileUrl;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like when we load the file from an &lt;code&gt;input&lt;/code&gt; control, we get a collection of files. Since we're only dragging 1 file for testing, we just grab the first file, create a URL, and load it...&lt;/p&gt;

&lt;p&gt;Now when we drop out cat picture!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM Now we have Pizza Cat! :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/loading-an-image-or-video-from-a-file-input-control/</guid><link>http://www.philliphaydon.com/2014/04/loading-an-image-or-video-from-a-file-input-control/</link><title>Loading an Image or Video from a File Input control.</title><description>&lt;p&gt;So you've got an input control, and you want to display the video/image before the user uploads, maybe so they can verify it first...&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt; allows you to get more information from a &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt; control than we could get before. &lt;/p&gt;

&lt;p&gt;So lets start with Video:&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;Ok so we have a basic HTML page with an &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt;, &lt;code&gt;&amp;lt;video...&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type="button'...&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we load up a file, our UI should look something like this:&lt;/p&gt;

</description><pubDate>Mon, 28 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So you've got an input control, and you want to display the video/image before the user uploads, maybe so they can verify it first...&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt; allows you to get more information from a &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt; control than we could get before. &lt;/p&gt;

&lt;p&gt;So lets start with Video:&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;Ok so we have a basic HTML page with an &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt;, &lt;code&gt;&amp;lt;video...&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type="button'...&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we load up a file, our UI should look something like this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-01.png" alt="" /&gt;  &lt;/p&gt;

&lt;p&gt;Now we need to add a click event to the button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;    
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');

        document.getElementById('load-video').addEventListener('click', function(){

            // Hmmm what happens?!?

        });

    })();   
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is currently only 3 video types that most browsers can handle. &lt;em&gt;There are others but support is far and few, for now atleast&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;video/mp4&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;video/ogg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;video/webm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;video/mp4&lt;/code&gt; is supported on all browsers except Opera. (tho I haven't tested) so I'll only use a &lt;code&gt;.mp4&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;How to load the selected file into a &lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;p&gt;Ok so we have selected a file, but how do we load it? The W3 Spec has a section on Blob URL for &lt;a href="http://www.w3.org/TR/FileAPI/#creating-revoking"&gt;Creating/Revoking&lt;/a&gt;, all we need to do is creat a URL for the file blob, we can do this by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fileUrl = window.URL.createObjectURL(fileInput.files[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can assign this to the &lt;code&gt;&amp;lt;video...&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.getElementById('load-video').addEventListener('click', function(){

    var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

    video.src = fileUrl;

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can select the file:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can see the file selected next to the file input&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if we click on &lt;code&gt;Load Selected Video&lt;/code&gt; we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-03.png" alt="" /&gt;  &lt;/p&gt;

&lt;h2&gt;What's it doing?!?&lt;/h2&gt;

&lt;p&gt;What the browser does is creates a fake URL with the blob loaded into it to simulate a URL for the content, if we put a break point on the button click:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can see a URL prefixed with &lt;code&gt;blob&lt;/code&gt; and a url. So this allows the browser to simulate making a request for the content as if it was being served up normally...&lt;/p&gt;

&lt;h2&gt;Images!&lt;/h2&gt;

&lt;p&gt;So the great thing about this is it works for images too!!! So if we change the HTML now to have an &lt;code&gt;&amp;lt;img...&lt;/code&gt; tag instead of &lt;code&gt;&amp;lt;video...&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we update the JavaScript (just the wording so its all &lt;code&gt;image&lt;/code&gt; instead of &lt;code&gt;video&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(){

    var fileInput = document.getElementById('image-input');
    var image = document.getElementById('image-container');

    document.getElementById('load-image').addEventListener('click', function(){

        var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

        image.src = fileUrl;

    });

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve the same thing with images, selecting a file:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we hit load:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And if we debug it, just like the video, it creates a URL we can use for the image:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's how easy it is :) Next we will look at a drop area for files.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/leveling-up-your-logging/</guid><link>http://www.philliphaydon.com/2014/04/leveling-up-your-logging/</link><title>Levelling up your logging. (part 2)</title><description>&lt;h2&gt;Part 2: Levelling up your Logging.&lt;/h2&gt;

&lt;p&gt;Make sure you've read Part 1: &lt;a href="http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/"&gt;If you're not logging, you're doing it all wrong&lt;/a&gt; before you continue.&lt;/p&gt;

&lt;h3&gt;Production logging : This.Changes.Everything &amp;trade;&lt;/h3&gt;

&lt;p&gt;Localhost development is easy. Live/production logging is where This.Changes.Everything. &amp;trade;&lt;br /&gt;
Instead of sending all the logging information to your localhost Sentinal app we now send it to LogEntries.&lt;/p&gt;

&lt;p&gt;Why LogEntries (or any other Logging Service as a Service)?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can access this information any time.&lt;/li&gt;
&lt;li&gt;You local computer cannot be online 24/7&lt;/li&gt;
&lt;li&gt;When you need to triage a problem, the problem as already occured. Therefore, the problem is already &lt;em&gt;historical&lt;/em&gt;. As such, you can't suddenly turn 'on' logging. You need to go back into time and look at what has already happened.&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Sun, 27 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-27T16:00:00Z</a10:updated><a10:content type="html">&lt;h2&gt;Part 2: Levelling up your Logging.&lt;/h2&gt;

&lt;p&gt;Make sure you've read Part 1: &lt;a href="http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/"&gt;If you're not logging, you're doing it all wrong&lt;/a&gt; before you continue.&lt;/p&gt;

&lt;h3&gt;Production logging : This.Changes.Everything &amp;trade;&lt;/h3&gt;

&lt;p&gt;Localhost development is easy. Live/production logging is where This.Changes.Everything. &amp;trade;&lt;br /&gt;
Instead of sending all the logging information to your localhost Sentinal app we now send it to LogEntries.&lt;/p&gt;

&lt;p&gt;Why LogEntries (or any other Logging Service as a Service)?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can access this information any time.&lt;/li&gt;
&lt;li&gt;You local computer cannot be online 24/7&lt;/li&gt;
&lt;li&gt;When you need to triage a problem, the problem as already occured. Therefore, the problem is already &lt;em&gt;historical&lt;/em&gt;. As such, you can't suddenly turn 'on' logging. You need to go back into time and look at what has already happened.&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;These Logging SAAS products are perfect for this situation. They just keep storing logging data as it streams in. You can just ignore all the data ... until it's time to check on things :)&lt;/p&gt;

&lt;p&gt;The general idea is this&lt;/p&gt;

&lt;p&gt;Step 1. Create an account with &lt;a href="https://logentries.com/"&gt;LogEntries&lt;/a&gt;. Create a new &lt;em&gt;host&lt;/em&gt;. Get the 'token' text key. (It's a guid).&lt;/p&gt;

&lt;p&gt;Step 2. Install the log entries nuget package: &lt;code&gt;install-package SimpleLogging.LogEntries.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/leveling-up-logging-01.png" alt="weeeeee" /&gt;&lt;/p&gt;

&lt;p&gt;Step 3. &lt;code&gt;Add-&amp;gt;new-&amp;gt;nlog.release.config&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Note 1:&lt;/em&gt; Notice how we now have a new &lt;code&gt;extensions&lt;/code&gt; element? Need-dat.&lt;br /&gt;
&lt;em&gt;Note 2:&lt;/em&gt; Notice how we are now using a &lt;code&gt;logentries&lt;/code&gt; target type? Also need-dat.    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true"&amp;gt;

    &amp;lt;extensions&amp;gt;
        &amp;lt;add assembly="LogentriesNLog"/&amp;gt;
    &amp;lt;/extensions&amp;gt;

    &amp;lt;!-- NLog example: https://github.com/nlog/nlog/wiki/Examples --&amp;gt;
    &amp;lt;targets&amp;gt;
        &amp;lt;target name="logentries" type="Logentries"
                debug="false"
                httpPut="false"
                ssl="false"
                layout="${date:format=ddd MMM dd} ${time:format=HH:mm:ss} ${date:format=zzz yyyy} ${logger} : ${LEVEL}, ${message}" /&amp;gt;
    &amp;lt;/targets&amp;gt;

    &amp;lt;rules&amp;gt;
        &amp;lt;logger name="*" minlevel="Trace" appendTo="logentries"/&amp;gt;
    &amp;lt;/rules&amp;gt;

&amp;lt;/nlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4. Modify &lt;code&gt;web.release.config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change this...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nlog configSource="NLog.config" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to this...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nlog configSource="NLog.release.config" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 5. Run the website.&lt;/p&gt;

&lt;p&gt;Step 6. Now jump over to LogEntries and start a LIVE TAIL of the host... and viola... data should be streaming in.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/leveling-up-logging-02.png" alt="OMG IT WORKS!!!!111!!111" /&gt;&lt;/p&gt;

&lt;p&gt;Recap.&lt;/p&gt;

&lt;p&gt;We've got logging messages sprinkled through our code already. When we're happy, we push our latest code up to our website (ie. &lt;code&gt;RELEASE&lt;/code&gt; build so the web config transformations do their magic) and now the logging messages are logged to LogEntries instead. So at any time, we can log into LogEntries and see what's happening to our site.&lt;/p&gt;

&lt;h2&gt;Bonus Level&lt;/h2&gt;

&lt;p&gt;There's still more we can do. If you don't want to install Sentinal (or you're in some super fail restrictive environment where you are not allowed to install anything) you can always send any localhost debugging messages to LogEntries. Just create a second LogEntires-host called Debug or whatever and use that host for localhost development.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also use Sentinal for production/live because you don't want to have any logging information stored on a 3rd party service. Just make sure you setup your Firewall to Port Forward any nLog data to the computer where Sentinal is running. This is what i &lt;em&gt;used&lt;/em&gt; to do until I found out about LogEntries.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</guid><link>http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</link><title>Fixing OSX as a Windows User...</title><description>&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

</description><pubDate>Fri, 25 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I found &lt;a href="http://mwholt.blogspot.sg/2012/09/fix-home-and-end-keys-on-mac-os-x.html"&gt;this blog post&lt;/a&gt; by &lt;a href="https://twitter.com/mholt6"&gt;Matthew Holt&lt;/a&gt; which fixes the problem for me! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Copying without permission from Matthew Holt's blog, just incase it dies one day...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Open the Terminal and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Library
$ mkdir KeyBindings
$ cd KeyBindings
$ nano DefaultKeyBinding.dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put these lines in that file, including the curly braces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
/* Remap Home / End keys to be correct */
"\UF729" = "moveToBeginningOfLine:"; /* Home */
"\UF72B" = "moveToEndOfLine:"; /* End */
"$\UF729" = "moveToBeginningOfLineAndModifySelection:"; /* Shift + Home */
"$\UF72B" = "moveToEndOfLineAndModifySelection:"; /* Shift + End */
"^\UF729" = "moveToBeginningOfDocument:"; /* Ctrl + Home */
"^\UF72B" = "moveToEndOfDocument:"; /* Ctrl + End */
"$^\UF729" = "moveToBeginningOfDocumentAndModifySelection:"; /* Shift + Ctrl + Home */
"$^\UF72B" = "moveToEndOfDocumentAndModifySelection:"; /* Shift + Ctrl + End */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press Ctrl+O and then Enter to save the file, and Ctrl+X to exit. Restart your computer to have it take full effect.&lt;/p&gt;

&lt;p&gt;Cited Sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys"&gt;http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/"&gt;http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Fixing Alt Tab...&lt;/h3&gt;

&lt;p&gt;I have no idea what the person was thinking when they decided that this was a good idea. &lt;/p&gt;

&lt;p&gt;So you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; to tab applications... but if you want to tab instances?!? You need to use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;`&lt;/kbd&gt;... So to fix that... Enter &lt;a href="http://manytricks.com/witch/"&gt;Witch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This thing is great, back to the old &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; &lt;/p&gt;

&lt;h3&gt;Fixing Spotlight&lt;/h3&gt;

&lt;p&gt;I don't know how anyone... This is my Spotlight:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Besides pretty much always saying 'indexing' when it does actually 'index'... it's really slow, doesn't give me what I'm looking for, and doesn't seem very helpful.&lt;/p&gt;

&lt;p&gt;Windows 8.1 Search is actually far superior to Spotlight. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.alfredapp.com"&gt;Alfred&lt;/a&gt;... This thing is awesome, from the moment you install it, open it with &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;space&lt;/kbd&gt;, and run your first start, it gives you the results you want.&lt;/p&gt;

&lt;h3&gt;Fixing maximize windows&lt;/h3&gt;

&lt;p&gt;I like to use windows Maximized, but when you press the little green &lt;code&gt;+&lt;/code&gt; for some reason it only expands the window vertically... I have no idea why...&lt;/p&gt;

&lt;p&gt;Spaces on OSX are pretty awesome, so if I want to have a couple of programs on 2 or 3 spaces I can easily flick between them with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt; or view all with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;uarr;&lt;/kbd&gt;, but when it comes to maximizing a window... while keeping the top tool bar, it seems you can't...&lt;/p&gt;

&lt;p&gt;I always get the argument that I should full screen the app, but I don't want to... &lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.blazingtools.com/right_zoom_mac.html"&gt;RightZoom&lt;/a&gt;, this thing is great, it makes a window take up all the space, both horizontally and vertically. &lt;/p&gt;

&lt;h3&gt;Things I can't fix :(&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click context menu to add new file...&lt;/li&gt;
&lt;li&gt;Cut/Paste folders easily (apparently there's some command but I never remember it)&lt;/li&gt;
&lt;/ol&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</guid><link>http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</link><title>If you're not logging, you're doing it all wrong. (part 1)</title><description>&lt;h2&gt;Part 1: If you're not logging, you're doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-01.png" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

</description><pubDate>Tue, 22 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-22T16:00:00Z</a10:updated><a10:content type="html">&lt;h2&gt;Part 1: If you're not logging, you're doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-01.png" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;What this is not about:    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not an opinion piece about why you should be logging your code. Google for that, then come back when you're convinced that you need it. &lt;/li&gt;
&lt;li&gt;This is not a lesson in Dependency Injection. Don't know that? Google it then come back.&lt;/li&gt;
&lt;li&gt;Nor is this a lesson in &lt;a href="http://nlog-project.org/"&gt;NLog&lt;/a&gt;, &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; or &lt;a href="http://nancyfx.org/"&gt;NancyFX&lt;/a&gt; / &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt; (sample tools we use in this example)&lt;/li&gt;
&lt;li&gt;Nor will I explain how to setup an account and 'hosts' with LogEntries (what the hell is LogEntries? I'll explain that later).&lt;/li&gt;
&lt;li&gt;Nor will I explain what/how are web.config transformations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;If you're not logging, then you're doing it all wrong.&lt;/h3&gt;

&lt;p&gt;You build websites or mobile/desktop applications. Awesome. Therefore, you need to know what is happening &lt;em&gt;during&lt;/em&gt; runtime of your live/production application, otherwise you're flying blind. &lt;/p&gt;

&lt;p&gt;The trick to logging a .NET application is to make sure that you leverage a logging interface all over your code. Based upon your solution's configuration (ie. &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;RELEASE&lt;/code&gt; or &lt;code&gt;ANY_OTHER_CUSTOM_CONFIG&lt;/code&gt;) we leverage &lt;code&gt;web.config&lt;/code&gt; &lt;em&gt;transformations&lt;/em&gt; to use the appropriate logging &lt;em&gt;targets&lt;/em&gt;, based on the configuration.&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;Target&lt;/code&gt; = a fancy word for where we dump our logging information to. This could be the console or a file or another gui-application (more on this, later) or some internet website (also more on this magic, later).&lt;/p&gt;

&lt;h3&gt;Tools - we need tools!&lt;/h3&gt;

&lt;p&gt;Then general idea is this&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code your message(s): "Hi, I'm here."  or "OMG, BOOM" or "Just created a new user. UserId: '1'.".&lt;/li&gt;
&lt;li&gt;NLog sends the message somewhere: your GUI app, or email, or a logging website.&lt;/li&gt;
&lt;li&gt;View the messages: use Sentinal (localhost) or LogEntries (production).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And where do we visualize this data again?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;: A free windows app that displays log information, as it streams in &lt;em&gt;live&lt;/em&gt;. (yes, ~~streams~~ in …)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logentries.com/"&gt;LogEntires&lt;/a&gt;: A website that &lt;em&gt;stores&lt;/em&gt; your log entry information, which you can view it at any time. Also has a live stream.&lt;br /&gt;
&lt;strong&gt;Free account limits data retention to a week .. which for most people (especially when you're testing/debuging) is &lt;em&gt;totally&lt;/em&gt; sufficient.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay so when to use what?    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sentinal: use this for localhost debugging.&lt;/li&gt;
&lt;li&gt;LogEntires: use this for live/production system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pro Tip: Yes, you can use Sentinal for live/production if you really want to. But this involves setting up NAT rules in your firewall, opening ports on your local firewall, etc. Basically - a PITA vs using LogEntries which is for free.&lt;/p&gt;

&lt;h3&gt;Show me some code, already! Sheesss…&lt;/h3&gt;

&lt;p&gt;Fine. Let's do this: LEEEEROOYYYYY JENKINNNNNSSSSSSS……&lt;/p&gt;

&lt;p&gt;Step 1. Download &amp;amp; install &lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step 2. Create/Setup a new solution.&lt;br /&gt;
    eg. &lt;code&gt;File -&amp;gt; New -&amp;gt; Web Application.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Lets add some logging information.&lt;/p&gt;

&lt;p&gt;First, we need an existing logging interface package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-02.png" alt="Nuget command line" /&gt;&lt;/p&gt;

&lt;p&gt;Next we'll use DI/IOC to inject the logging instance, so lets wire that up first.&lt;/p&gt;

&lt;p&gt;NancyFX:&lt;br /&gt;
(This is using TinyIOC for IoC (which is built into NancyFX))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void ConfigureApplicationContainer(TinyIoCContainer container)
{
    base.ConfigureApplicationContainer(container);

    // NOTE: Use a specific constructor, which is why we have to use the delayed registration.
    var loggingService = new NLogLoggingService();
    container.Register&amp;lt;ILoggingService&amp;gt;((c, p) =&amp;gt; loggingService);

    // Register any other singleton services.
    // …
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.Net MVC&lt;br /&gt;
(This is using &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; for IoC)    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class DependencyResolutionConfig
{
    public static void RegisterContainers()
    {
        var builder = new ContainerBuilder();

        // Register our services.
        builder.Register(c =&amp;gt; new NLogLoggingService())
            .As&amp;lt;ILoggingService&amp;gt;();

        // Register our controllers (so they will use constructor injection)
        builder.RegisterControllers(typeof(MvcApplication).Assembly);

        var container = builder.Build();

        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we'll use constructor injection for our logging interface.&lt;br /&gt;
&lt;strong&gt;Side Note&lt;/strong&gt;: I do not consider injecting an &lt;code&gt;ILoggingService&lt;/code&gt; into classes as an &lt;a href="http://jeffreypalermo.com/blog/constructor-over-injection-anti-pattern/"&gt;Anti-Pattern&lt;/a&gt; because IMO I usually log things in &lt;em&gt;all&lt;/em&gt; methods (I'll touch on this, below) so therefore, logging is a fundamental part of each class that contains business logic. As such, my class has a logging dependecy throughout. Not on 1 or some methods, only.&lt;/p&gt;

&lt;p&gt;NancyFX&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Nancy;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.NancyFX.Modules
{
    public class HomeModule : NancyModule
    {
        private readonly ILoggingService _loggingService;

        public HomeModule(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;

            Get["/"] = _ =&amp;gt; GetHome();
        }

        private dynamic GetHome()
        {
            _loggingService.Trace("GetHome");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View["home"];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.NET MVC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Web.Mvc;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.MVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILoggingService _loggingService;

        public HomeController(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;
        }

        //
        // GET: /Home/

        public ActionResult Index()
        {
            _loggingService.Trace("Index");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4. Add an NLog file.&lt;/p&gt;

&lt;p&gt;Add this new file to the root website / application folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nlog.config    

&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true"&amp;gt;

    &amp;lt;!-- NLog example: https://github.com/nlog/nlog/wiki/Examples --&amp;gt;
    &amp;lt;targets async="true"&amp;gt;
        &amp;lt;target xsi:type="NLogViewer"
                name="sentinal" 
                address="udp://127.0.0.1:9999" /&amp;gt;
    &amp;lt;/targets&amp;gt;

    &amp;lt;rules&amp;gt;
        &amp;lt;logger name="*" minlevel="Trace" writeTo="sentinal"/&amp;gt;
    &amp;lt;/rules&amp;gt;

&amp;lt;/nlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 5. Run Sentinal&lt;/p&gt;

&lt;p&gt;Step 6. Run the website.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-03.png" alt="Zoh Mai Gawd" /&gt;&lt;/p&gt;

&lt;h3&gt;Recap.&lt;/h3&gt;

&lt;p&gt;So now we've started sprinkling logging messages throughout our code. This gives us some Serious.KickAss&amp;trade; insights into what is going on under the hood with our code. We view this logging data locally with our Sentinel app. &lt;/p&gt;

&lt;p&gt;It's not hard to add logging to your website / application. &lt;/p&gt;

&lt;p&gt;Please start to get into the habbit of &lt;code&gt;TRACE&lt;/code&gt;ing and &lt;code&gt;DEBUG&lt;/code&gt;ing your code so you can see what's going on under the hood - when you really need to.&lt;/p&gt;

&lt;h3&gt;NEXT: Part 2 - Levelling up your Logging&lt;/h3&gt;

&lt;p&gt;In the next part, I take all this simple logging magic to the next level : doing this for your live / production website / application!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</guid><link>http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</link><title>Fixing Github with Chrome Plugin - GitHub.Expandinizr</title><description>&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

</description><pubDate>Thu, 06 Feb 2014 16:00:00 Z</pubDate><a10:updated>2014-02-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Luckily &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt; had a brilliant idea... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This awesome Chrome plugin, turns the above, into:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Into......&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This more responsive design is so awesome! (Apparently thanks to some random guy named &lt;a href="https://twitter.com/khellang"&gt;Kristian Hellang&lt;/a&gt;...) &lt;small&gt;don't follow him, don't need his ego boosted anymore.&lt;/small&gt; ;)&lt;/p&gt;

&lt;p&gt;Such a better use of space, and makes working with Github a billion times more pleasurable!&lt;/p&gt;

&lt;p&gt;Download it now... NOW!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOWWWW!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/"&gt;https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</guid><link>http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</link><title>If you're going to use repositories, don't have generic or base repositories...</title><description>&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Thu, 30 Jan 2014 16:00:00 Z</pubDate><a10:updated>2014-01-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GenericRepository&amp;lt;TEntity&amp;gt; : IRepository&amp;lt;TEntity&amp;gt; where TEntity : class
{
    public virtual IEnumerable&amp;lt;TEntity&amp;gt; FindAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation ...
    }

    public virtual TEntity FindOne(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation
    }

    public void Update(TEntity entity)
    {
        // update your entity ...
    }

    // etc...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are just bad bad bad...&lt;/p&gt;

&lt;h2&gt;Generic Repositories make assumptions about your domain&lt;/h2&gt;

&lt;p&gt;Generic Repositories is that they make assumptions about your domain. It makes assumptions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All entities should contain Get/List/Update/Add/Delete... etc&lt;/li&gt;
&lt;li&gt;All entities come from the same location (i.e a database)&lt;/li&gt;
&lt;li&gt;All entities have a single primary key of some sort...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this, is that these are all false assumptions, generic repositories seem to never take into account that entities can have composite keys or no key identifier at all. Or they require some, but not all implementations defined in the base class or interface. &lt;/p&gt;

&lt;p&gt;Often people assume only a single kind of persistence, when you could load some data from a flat file, database, a web service, etc.&lt;/p&gt;

&lt;p&gt;This isn't a problem if you do away with the base implementation or interface and just have explicit interfaces such as &lt;code&gt;IProductRepository&lt;/code&gt; or &lt;code&gt;IUserRepository&lt;/code&gt;, but people get so caught up on the whole idea of having lots of interfaces, and instead try to opt for the generic &lt;code&gt;IRepository&amp;lt;T&amp;gt;&lt;/code&gt; until they need to implement other stuff.&lt;/p&gt;

&lt;h2&gt;Generic Repositories don't prevent code duplication&lt;/h2&gt;

&lt;p&gt;Generic repositories don't prevent duplication because there's no duplication to begin with! What you end up doing is abstracting an abstraction, for the sake if feeling like you're writing less code or getting implementation for free, when you're actually adding unnecessary code that may never be used!&lt;/p&gt;

&lt;p&gt;If for example you have a &lt;code&gt;User&lt;/code&gt; / &lt;code&gt;UserRepository&lt;/code&gt;, you may find that your generic repository asks you to implement &lt;code&gt;Delete&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;But when if you are never required to delete a user, and instead you Deactivate a user, or disable a users login, but keep the user because hes actually attached to data in the system...&lt;/p&gt;

&lt;p&gt;You end up implementing methods, or overriding existing methods to have no implementation or throw a &lt;code&gt;NotImplementedException&lt;/code&gt;. This is just bad design. &lt;/p&gt;

&lt;p&gt;You could argue "Oh but when I implement &lt;code&gt;GetById&lt;/code&gt; I have to duplicate it..."&lt;/p&gt;

&lt;p&gt;Except you're not duplicating it, just because two things do similar or the same things, doesn't mean its duplicated.&lt;/p&gt;

&lt;p&gt;Lets say you have a &lt;code&gt;UserRepository&lt;/code&gt; and &lt;code&gt;OrderRepository&lt;/code&gt;, both have a method defined in a base repository called &lt;code&gt;GetById&lt;/code&gt;, if you changed &lt;code&gt;GetById&lt;/code&gt; for a User, you're changing the way the Order one works. You're potentially breaking your application. These two look the same, but they are different. It's not duplication!&lt;/p&gt;

&lt;h2&gt;Repositories for everything&lt;/h2&gt;

&lt;p&gt;The next issue is people end up creating repositories for everything, not their aggregate roots. For example, say we have an &lt;code&gt;Order&lt;/code&gt; / &lt;code&gt;OrderLine&lt;/code&gt; scenario...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
  public int Id { get; set; }
  ...

  public IList&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
  public int Id { get; set; }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often enough people will create an &lt;code&gt;OrderRepository&lt;/code&gt; and &lt;code&gt;OrderLineRepository&lt;/code&gt;, or use their Generic repositories like &lt;code&gt;BaseRepository&amp;lt;Order&amp;gt;&lt;/code&gt; and &lt;code&gt;BaseRepository&amp;lt;OrderLine&amp;gt;&lt;/code&gt;, the problem is, everything to do with an &lt;code&gt;OrderLine&lt;/code&gt; is actually the responsibility of the &lt;code&gt;Order&lt;/code&gt; and not anything else. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</guid><link>http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</link><title>Snow's new server feature! Runs up a testing website for you.</title><description>&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

</description><pubDate>Tue, 24 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-24T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome right?&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/randompunter"&gt;Damian Hickey&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/davidfowl"&gt;David Fowler&lt;/a&gt; for this feature.&lt;/p&gt;

&lt;p&gt;Damian told me about &lt;a href="https://www.nuget.org/packages/microsoft.owin.staticfiles"&gt;Microsoft.Owin.StaticFiles&lt;/a&gt;, this is an awesome package, basically you can point it to a directory and it will serve up static files. That means for me to setup Snow all I had to write was basically: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configuration(IAppBuilder app)
{
    var fileSystem = new FileServerOptions
    {
        EnableDirectoryBrowsing = true,
        FileSystem = new PhysicalFileSystem(Path.GetFullPath(Settings.Output))
    };

    app.UseFileServer(fileSystem);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created one little problem though :( when running this up it required the command window to be run as Administrator, which isn't very nice.&lt;/p&gt;

&lt;p&gt;Luckily David came to the rescue and let me know about &lt;a href="https://github.com/Bobris/Nowin"&gt;Nowin&lt;/a&gt;, it's a...&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast and scalable Owin Web Server in pure .Net 4.5 (it does not use HttpListener)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plugging it in was super easy, I simply added some &lt;code&gt;WebApp&lt;/code&gt; options specifying the &lt;code&gt;ServerFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = new StartOptions
{
    ServerFactory = "Nowin",
    Port = 5498
};

using (WebApp.Start&amp;lt;Startup&amp;gt;(options))
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM, done, no more asking for admin privileges. :)&lt;/p&gt;

&lt;h2&gt;New merged assemblies&lt;/h2&gt;

&lt;p&gt;With a little help from &lt;a href="https://twitter.com/SimonCropp"&gt;Simon Cropp&lt;/a&gt;, I added &lt;a href="https://www.nuget.org/packages/Costura.Fody"&gt;Costura.Fody&lt;/a&gt;. This awesome little project merges all your assemblies, with NO effort from you at all!&lt;/p&gt;

&lt;p&gt;Simply install the package... and build your project!&lt;/p&gt;

&lt;p&gt;That's how easy it was... Well almost, there's a little problem with Razor, it requires an assembly to be loaded in the AppDomain and if it's not there it throws a wobbly, I don't quite understand but I decided to ignore that single assembly.&lt;/p&gt;

&lt;p&gt;The end result is, Snow now only have 1 files. A &lt;code&gt;.exe&lt;/code&gt; and a &lt;code&gt;.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner than before :)&lt;/p&gt;

&lt;p&gt;Snow repository and Snow.Template have been updated with the new awesomeness. &lt;/p&gt;
</a10:content></item></channel></rss>