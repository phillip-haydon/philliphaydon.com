<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title /><link>http://www.philliphaydon.com/feed.xml</link><description /><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/08/permament-redirect-to-https-with-iis/</guid><link>http://www.philliphaydon.com/2014/08/permament-redirect-to-https-with-iis/</link><a10:author><a10:name /></a10:author><category>HTTPS</category><category>IIS</category><category>Nancy</category><title>Permament redirect to HTTPS with IIS</title><description>&lt;p&gt;Google has just recently updated their search results to give higher ranking to sites with an SSL Certificate, than to sites without, which is one of the best changes Google has made in recent years. There really is no excuse for not having a cert now. &lt;em&gt;(note, this is limited to small portion of sites but lets assume that this will be rolled out if Google proves it to be worth while)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://googleonlinesecurity.blogspot.co.uk/2014/08/https-as-ranking-signal_6.html"&gt;googleonlinesecurity - https-as-ranking-signal_6.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortuntely for me it seems Github Pages does not support Certificates on custom domain names, yet... :( hopefully they will support this eventually so that I can avoid moving my blog.&lt;/p&gt;

&lt;p&gt;So one thing that pops up in the Nancy channel on JabbR every-now-n-then, is how to make all modules require SSL. &lt;/p&gt;

&lt;p&gt;From within a module you can call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.RequiresHttps()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will push the site into &lt;code&gt;https&lt;/code&gt;, but having to write this everywhere is rather annoying, and during development on your local machine this is a bit of a hassle. Despite Visual Studio supporting an HTTPS url...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If you didn't know this existed, you should. Basically in Visual Studio, select your Web Application project, then open up the properties window (don't right click and select properties, you need to open the window manually) in the window, set &lt;code&gt;SSL Enabled&lt;/code&gt; to true, this will add a SSL URL, then you can run the site and use that url instead of the non-https url.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So during development you may want to develop without a certificate, but want your production site to be always using a certificate, this makes the &lt;code&gt;RequiresHttps()&lt;/code&gt; call a little annoying, we end up with conditional logic or something similar to figure out are we in development, or are we in production.&lt;/p&gt;

&lt;h2&gt;URL Rewite Extension for IIS&lt;/h2&gt;

&lt;p&gt;Download and install the &lt;a href="http://www.iis.net/downloads/microsoft/url-rewrite"&gt;URL Rewrite extension&lt;/a&gt; for IIS. Once installed we can do lots of fancy stuff for URL Rewriting, but we only want to handle the HTTPS redirect for this post.&lt;/p&gt;

&lt;p&gt;Now that it's installed, we can configure it one of two ways. If we use the GUI then we still need to copy the contents generated in the Web.config file and put that into a build script.&lt;/p&gt;

&lt;p&gt;Using the GUI, we can open up the URL Rewrite extension:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Using the GUI we can setup a new &lt;code&gt;Blank rule&lt;/code&gt; in the &lt;code&gt;Inbound rules&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to fill in the rule. &lt;/p&gt;

&lt;p&gt;For the Match URL, we want to use a super duper simple regular expression.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This basically says, match any character, as many times as you want.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;For the Conditions, we want to check the Input &lt;code&gt;{HTTPS}&lt;/code&gt; match is off, if we have it on then we will end up in an infinate loop. eek&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We don't care about Server Variables so skip that.&lt;/p&gt;

&lt;p&gt;And lastly is the action we want to take when the rule matches (that it's not an HTTPS request)&lt;/p&gt;

&lt;p&gt;We want to Redirect to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://{HTTP_HOST}/{R:0}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tick append query string, and for the redirect type, select Permanment. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;{HTTP_HOST}&lt;/code&gt; is the host name, so if your domain is &lt;code&gt;bananasareyellow.com&lt;/code&gt; then that's the value that will be put in the redirect url. You can hard code this value if you want, but if you want to support multiple host names then you will want to use the variable. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After applying this new rule, when you visit your website with an HTTP url, it will be pushed into HTTPS. &lt;/p&gt;

&lt;h2&gt;Ahhh I've lost it!&lt;/h2&gt;

&lt;p&gt;All this information gets stored in your web.config file, and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;system.webServer&amp;gt;
    &amp;lt;rewrite&amp;gt;
        &amp;lt;rules&amp;gt;
            &amp;lt;rule name="HTTP to HTTPS redirect" stopProcessing="true"&amp;gt;
                &amp;lt;match url=".*" /&amp;gt;
                &amp;lt;conditions&amp;gt;
                    &amp;lt;add input="{HTTPS}" pattern="OFF" /&amp;gt;
                &amp;lt;/conditions&amp;gt;
                &amp;lt;action type="Redirect" url="https://{HTTP_HOST}/{R:0}" redirectType="Permanent" /&amp;gt;
            &amp;lt;/rule&amp;gt;
        &amp;lt;/rules&amp;gt;
    &amp;lt;/rewrite&amp;gt;
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SO! &lt;/p&gt;

&lt;p&gt;Once you've written up your condition, you may want to roll this into your build script so that during development, that way when it's deployed it will always contain the rule and you wont lose it. &lt;/p&gt;

&lt;p&gt;You can also add a condition in here to say the rule does not apply when the site is a localhost or test domain, but in my opinion you shouldn't add test-checks in production code.&lt;/p&gt;
</description><pubDate>Fri, 15 Aug 2014 16:00:00 Z</pubDate><a10:updated>2014-08-15T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Google has just recently updated their search results to give higher ranking to sites with an SSL Certificate, than to sites without, which is one of the best changes Google has made in recent years. There really is no excuse for not having a cert now. &lt;em&gt;(note, this is limited to small portion of sites but lets assume that this will be rolled out if Google proves it to be worth while)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://googleonlinesecurity.blogspot.co.uk/2014/08/https-as-ranking-signal_6.html"&gt;googleonlinesecurity - https-as-ranking-signal_6.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortuntely for me it seems Github Pages does not support Certificates on custom domain names, yet... :( hopefully they will support this eventually so that I can avoid moving my blog.&lt;/p&gt;

&lt;p&gt;So one thing that pops up in the Nancy channel on JabbR every-now-n-then, is how to make all modules require SSL. &lt;/p&gt;

&lt;p&gt;From within a module you can call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.RequiresHttps()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this will push the site into &lt;code&gt;https&lt;/code&gt;, but having to write this everywhere is rather annoying, and during development on your local machine this is a bit of a hassle. Despite Visual Studio supporting an HTTPS url...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If you didn't know this existed, you should. Basically in Visual Studio, select your Web Application project, then open up the properties window (don't right click and select properties, you need to open the window manually) in the window, set &lt;code&gt;SSL Enabled&lt;/code&gt; to true, this will add a SSL URL, then you can run the site and use that url instead of the non-https url.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So during development you may want to develop without a certificate, but want your production site to be always using a certificate, this makes the &lt;code&gt;RequiresHttps()&lt;/code&gt; call a little annoying, we end up with conditional logic or something similar to figure out are we in development, or are we in production.&lt;/p&gt;

&lt;h2&gt;URL Rewite Extension for IIS&lt;/h2&gt;

&lt;p&gt;Download and install the &lt;a href="http://www.iis.net/downloads/microsoft/url-rewrite"&gt;URL Rewrite extension&lt;/a&gt; for IIS. Once installed we can do lots of fancy stuff for URL Rewriting, but we only want to handle the HTTPS redirect for this post.&lt;/p&gt;

&lt;p&gt;Now that it's installed, we can configure it one of two ways. If we use the GUI then we still need to copy the contents generated in the Web.config file and put that into a build script.&lt;/p&gt;

&lt;p&gt;Using the GUI, we can open up the URL Rewrite extension:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Using the GUI we can setup a new &lt;code&gt;Blank rule&lt;/code&gt; in the &lt;code&gt;Inbound rules&lt;/code&gt; section:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to fill in the rule. &lt;/p&gt;

&lt;p&gt;For the Match URL, we want to use a super duper simple regular expression.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This basically says, match any character, as many times as you want.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;For the Conditions, we want to check the Input &lt;code&gt;{HTTPS}&lt;/code&gt; match is off, if we have it on then we will end up in an infinate loop. eek&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We don't care about Server Variables so skip that.&lt;/p&gt;

&lt;p&gt;And lastly is the action we want to take when the rule matches (that it's not an HTTPS request)&lt;/p&gt;

&lt;p&gt;We want to Redirect to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://{HTTP_HOST}/{R:0}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tick append query string, and for the redirect type, select Permanment. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;{HTTP_HOST}&lt;/code&gt; is the host name, so if your domain is &lt;code&gt;bananasareyellow.com&lt;/code&gt; then that's the value that will be put in the redirect url. You can hard code this value if you want, but if you want to support multiple host names then you will want to use the variable. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/https-iis-vs-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After applying this new rule, when you visit your website with an HTTP url, it will be pushed into HTTPS. &lt;/p&gt;

&lt;h2&gt;Ahhh I've lost it!&lt;/h2&gt;

&lt;p&gt;All this information gets stored in your web.config file, and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;system.webServer&amp;gt;
    &amp;lt;rewrite&amp;gt;
        &amp;lt;rules&amp;gt;
            &amp;lt;rule name="HTTP to HTTPS redirect" stopProcessing="true"&amp;gt;
                &amp;lt;match url=".*" /&amp;gt;
                &amp;lt;conditions&amp;gt;
                    &amp;lt;add input="{HTTPS}" pattern="OFF" /&amp;gt;
                &amp;lt;/conditions&amp;gt;
                &amp;lt;action type="Redirect" url="https://{HTTP_HOST}/{R:0}" redirectType="Permanent" /&amp;gt;
            &amp;lt;/rule&amp;gt;
        &amp;lt;/rules&amp;gt;
    &amp;lt;/rewrite&amp;gt;
&amp;lt;/system.webServer&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SO! &lt;/p&gt;

&lt;p&gt;Once you've written up your condition, you may want to roll this into your build script so that during development, that way when it's deployed it will always contain the rule and you wont lose it. &lt;/p&gt;

&lt;p&gt;You can also add a condition in here to say the rule does not apply when the site is a localhost or test domain, but in my opinion you shouldn't add test-checks in production code.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/06/taking-snapshots-of-a-video-and-displaying-it/</guid><link>http://www.philliphaydon.com/2014/06/taking-snapshots-of-a-video-and-displaying-it/</link><a10:author><a10:name /></a10:author><category>HTML5</category><category>JavaScript</category><title>Taking snap shots of a Video &amp; displaying it</title><description>&lt;p&gt;Now we've loaded an image/video, we've captured the drop event, we've displayed it...&lt;/p&gt;

&lt;p&gt;But what about taking screen grabs of a video?&lt;/p&gt;

&lt;p&gt;To start with I'll go back to the code we used in Part 1, so we have an input, a load button, and a video control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Racing ahead we load that up:&lt;/p&gt;

</description><pubDate>Sun, 08 Jun 2014 16:00:00 Z</pubDate><a10:updated>2014-06-08T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Now we've loaded an image/video, we've captured the drop event, we've displayed it...&lt;/p&gt;

&lt;p&gt;But what about taking screen grabs of a video?&lt;/p&gt;

&lt;p&gt;To start with I'll go back to the code we used in Part 1, so we have an input, a load button, and a video control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Racing ahead we load that up:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;    
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');

        document.getElementById('load-video').addEventListener('click', function(){
            var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

            video.src = fileUrl;            
        });

    })();   
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have loaded our video, how do we capture screen grabs?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/strong&gt; All sizes are halved becaused the test video is too large :)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The hidden canvas&lt;/h2&gt;

&lt;p&gt;The first thing we have to do is get the current data of the current frame being displayed. To do that we need to create a hidden canvas, and then draw onto it. &lt;/p&gt;

&lt;p&gt;So we're gonna add a canvas element to the UI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;canvas id="temp-canvas" style="display:none"&amp;gt;&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The canvas doesn't need to display, it's simply there to capture data. Now we need to put the video into it, so lets add a button, lets also add somewhere to display the image once we have it. :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="button" value="Copy current frame to image below" id="load-image" /&amp;gt;

&amp;lt;br /&amp;gt;Image......&amp;lt;br /&amp;gt;
&amp;lt;img id="image-container" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The fluff in between...&lt;/h2&gt;

&lt;p&gt;Now we need to add some fluff when the button to copy the current frame is clicked.&lt;/p&gt;

&lt;p&gt;Let's find the controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var image = document.getElementById('image-container');
var canvas = document.getElementById('temp-canvas');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a click event to the new button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.getElementById('load-image').addEventListener('click', function(){

});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Load that image!&lt;/h2&gt;

&lt;p&gt;What we need to do now is take the dom video control, as is. &lt;em&gt;(this means if you're using jQuery to find the element, you need to get the real dom element, not the jQuery wrapped element)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;This is currently our &lt;code&gt;video&lt;/code&gt; variable. &lt;/p&gt;

&lt;p&gt;First up we will size our canvas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;canvas.height = video.videoHeight / 2;
canvas.width = video.videoWidth / 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to create a context on our canvas. We will create a 2d context like do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var context = canvas.getContext("2d");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us a 2d rendering context whih we can use to draw on. We will draw the current video frame. Assuming we have pause the video in the middle somewhere, we can hit the button to capture the current frame by padding the video in like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, canvas.width, canvas.height);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;// NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this I used the 9 property &lt;code&gt;drawImage&lt;/code&gt; function, this is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;drawImage(source, sourceStartX, sourceStartY, width, height, destinationStartX, destinationStartY, width, height) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means, the sourceStart is where you want the first pixel to be captured from, the width/height of the source from the start pixels. &lt;/p&gt;

&lt;p&gt;The destinationStart is where you want to place the image on the canvas and how you want it to stretch.&lt;/p&gt;

&lt;p&gt;My sample takes the actual height/width of the source and places it in the smaller canvas.&lt;/p&gt;

&lt;p&gt;You can also use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will assume the same height/width for source/canvas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;// END NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now all that's left is to display it, to do this we call the &lt;code&gt;toDataURL()&lt;/code&gt; function defined on the canvas. This takes what's currently drawn and shows it in a image element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image.src = canvas.toDataURL();     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why do we do this rather than display the canvas itself? Well this allows you to right click the image and download it. :)&lt;/p&gt;

&lt;p&gt;Now we can load a video:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/screen-capture-video-html5-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And then press the button to capture it!!!!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/screen-capture-video-html5-02.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The final codez&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="video-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;br /&amp;gt;Video...&amp;lt;br /&amp;gt;
    &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;

    &amp;lt;br /&amp;gt;
    &amp;lt;input type="button" value="Copy current frame to image below" id="load-image" /&amp;gt;

    &amp;lt;br /&amp;gt;Image......&amp;lt;br /&amp;gt;
    &amp;lt;img id="image-container" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;canvas id="temp-canvas" style="display:none"&amp;gt;&amp;lt;/canvas&amp;gt;

&amp;lt;script&amp;gt;
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');
        var image = document.getElementById('image-container');
        var canvas = document.getElementById('temp-canvas');

        document.getElementById('load-video').addEventListener('click', function(){
            var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

            video.src = fileUrl;            
        });
        document.getElementById('load-image').addEventListener('click', function(){

            canvas.height = video.videoHeight;
            canvas.width = video.videoWidth;

            var context = canvas.getContext("2d");

            drawImage(source, sourceStartX, sourceStartY, width, height, destinationStartX, destinationStartY, width, height) 

            image.src = canvas.toDataURL();         
        });

    })();

&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What do we have...&lt;/h2&gt;

&lt;p&gt;So we've got an file &lt;code&gt;input&lt;/code&gt; control, it loads a video file into a &lt;code&gt;video&lt;/code&gt; element, then we scrub the video &amp;amp; hit that button, and bam, we capture what ever the current frame is.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/05/managing-your-azure-storage-account-with-zudio/</guid><link>http://www.philliphaydon.com/2014/05/managing-your-azure-storage-account-with-zudio/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Managing your Azure Storage account with Zudio</title><description>&lt;p&gt;Messing around with Azure Queues, using the C# library to create a queue, add messages, read them, delete them... all is well and good...&lt;/p&gt;

&lt;p&gt;But at some point I wanted to view what I was putting into the queue...&lt;/p&gt;

&lt;p&gt;The Azure blog has a recent post listing a few &lt;a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2014/03/11/windows-azure-storage-explorers-2014.aspx"&gt;Azure Storage explorers&lt;/a&gt;. I tried a couple of them, but they were so buggy!&lt;/p&gt;

&lt;p&gt;Infact, I'm sorry to say... Azure Storage Explorer was the worst. When I attempted to refresh a queue, nothing happened. I had to add a second queue, then swap between each queue in order to review the list. Most of the buttons don't seem to do anything at all.&lt;/p&gt;

&lt;p&gt;Then I remember &lt;a href="http://twitter.com/markrendle"&gt;Mark Rendle&lt;/a&gt; tweeted me about his &lt;a href="http://zud.io/"&gt;Zudio&lt;/a&gt; site. Funnily enough he got a mention on the blog post. I decided to login and check it out again.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io/"&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-02.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

</description><pubDate>Fri, 02 May 2014 18:21:42 Z</pubDate><a10:updated>2014-05-02T18:21:42Z</a10:updated><a10:content type="html">&lt;p&gt;Messing around with Azure Queues, using the C# library to create a queue, add messages, read them, delete them... all is well and good...&lt;/p&gt;

&lt;p&gt;But at some point I wanted to view what I was putting into the queue...&lt;/p&gt;

&lt;p&gt;The Azure blog has a recent post listing a few &lt;a href="http://blogs.msdn.com/b/windowsazurestorage/archive/2014/03/11/windows-azure-storage-explorers-2014.aspx"&gt;Azure Storage explorers&lt;/a&gt;. I tried a couple of them, but they were so buggy!&lt;/p&gt;

&lt;p&gt;Infact, I'm sorry to say... Azure Storage Explorer was the worst. When I attempted to refresh a queue, nothing happened. I had to add a second queue, then swap between each queue in order to review the list. Most of the buttons don't seem to do anything at all.&lt;/p&gt;

&lt;p&gt;Then I remember &lt;a href="http://twitter.com/markrendle"&gt;Mark Rendle&lt;/a&gt; tweeted me about his &lt;a href="http://zud.io/"&gt;Zudio&lt;/a&gt; site. Funnily enough he got a mention on the blog post. I decided to login and check it out again.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io/"&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-02.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Using zudio&lt;/h2&gt;

&lt;p&gt;Assuming you've already setup a Storage Account on Azure, we can login to zudio, where you will be presented with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the Add a Storage Account button prompts us to add an account: &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can get the Account Name and Location looking at the Storage List in Azure&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Then the Shared Key can be found by clicking the Manage Access Keys link in the same page as the Store Accounts list:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Selecting one of the Access Keys and pasting it into the Shared Key in Zudio.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once we have added the account we should have the account name appear in the list on Zudio&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click the account name and we should get a list of options, we can choose what we want to manage, Blobs, Queues, or Tables. Lets pick Queues.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We should get a list of queues, my list is empty since I haven't added any yet...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-09.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We could manage the queues from this screen using the available options:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But lets add some code :)&lt;/p&gt;

&lt;h2&gt;Codez - because we need some :)&lt;/h2&gt;

&lt;p&gt;In a basic console app, I've added the &lt;a href="http://www.nuget.org/packages/WindowsAzure.Storage/"&gt;WindowsAzure.Storage&lt;/a&gt; nuget, and written some simple code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var storageConnection = @"DefaultEndpointsProtocol=https;AccountName=phzudio;AccountKey=*REMOVED*";
var storageAccount = CloudStorageAccount.Parse(storageConnection);

var queueClient = storageAccount.CreateCloudQueueClient();
var queue = queueClient.GetQueueReference("my-first-queue");

queue.CreateIfNotExists();

queue.AddMessage(new CloudQueueMessage("Hello, World"));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it... simple simple code. The account key removed in the &lt;code&gt;storageConnection&lt;/code&gt; is the same key we used to connect to Zudio.&lt;/p&gt;

&lt;p&gt;Now when we run the code, and jump back to Zudio, hit refresh...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We get our newly created queue from code.&lt;/p&gt;

&lt;p&gt;Clicking on the queue shows us our message&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;From here we can manage messages &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/zudio-post-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Adding new messages, refreshing, dequeuing, etc.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;Zudio is super simple to use and pretty damn powerful for managing Azure Storage, Mark has done an awesome job and I look forward to using Zudio in the future. &lt;/p&gt;

&lt;p&gt;So far I'm only used it for queues, and clicked around on the tables/blobs, but its so easy to use and intuitive! &lt;/p&gt;

&lt;p&gt;I would highly recommend checking out Zudio!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://zud.io"&gt;http://zud.io&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/05/creating-a-drop-area-top-drop-a-file-in-html5/</guid><link>http://www.philliphaydon.com/2014/05/creating-a-drop-area-top-drop-a-file-in-html5/</link><a10:author><a10:name /></a10:author><category>HTML5</category><category>JavaScript</category><title>Creating a drop area to drop a file in HTML 5</title><description>&lt;p&gt;In the first post we uploaded a file and viewed it in the browser without sending it to a server, now we are going to create a drop area so that you can drag a file from a folder, into the website.&lt;/p&gt;

&lt;p&gt;Using the same HTML as before, lets add a drop area:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id="drop-area"&amp;gt;
    Drop File Here...
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" width="360" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a bit of CSS to make it a little more visible:&lt;/p&gt;

</description><pubDate>Wed, 30 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In the first post we uploaded a file and viewed it in the browser without sending it to a server, now we are going to create a drop area so that you can drag a file from a folder, into the website.&lt;/p&gt;

&lt;p&gt;Using the same HTML as before, lets add a drop area:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div id="drop-area"&amp;gt;
    Drop File Here...
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" width="360" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And add a bit of CSS to make it a little more visible:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;style type="text/css"&amp;gt;
#drop-area{
    border: 1px dotted #666;
    background: #f2f2f2;
    width: 360px;
    height: 50px;
    vertical-align: middle;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

#drop-area.drop {
    background: red;
}
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we view it now it should look like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-01.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Drag Enter&lt;/h2&gt;

&lt;p&gt;Now we have our UI set, we need to add an indication when the user drags a file...&lt;/p&gt;

&lt;p&gt;If we don't, it would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Which isn't very helpful, so first we need to attach some events for &lt;code&gt;dragenter&lt;/code&gt; and &lt;code&gt;dragleave&lt;/code&gt; so we can add/remove the class.&lt;/p&gt;

&lt;p&gt;We use this instead of &lt;code&gt;:hover&lt;/code&gt; because we only want the visual effect when the user is dragging something into the droppable area.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var dropArea = document.getElementById('drop-area');

dropArea.addEventListener('dragenter', function(e){
    e.currentTarget.classList.add('drop');
});

dropArea.addEventListener('dragleave', function(e){
    e.currentTarget.classList.remove('drop');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we drag the a file over the drop area, we end with...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-03.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The hidden 'Copy'...&lt;/h2&gt;

&lt;p&gt;It took me a while to figure out why my code didn't work and it happens to be the bit people put in the sample code and never explain...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dropArea.addEventListener('dragover', function(e){
    e.preventDefault();
    e.stopPropagation();
    e.dataTransfer.dropEffect = 'copy';
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order for the drag to be captured, we need to set the &lt;code&gt;dropEffect&lt;/code&gt;, by setting it to &lt;code&gt;copy&lt;/code&gt;, apparently allows the source item (the item we're dragging) will be copied to the drop location.&lt;/p&gt;

&lt;p&gt;The possible values on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer#dropEffect.28.29"&gt;W3&lt;/a&gt; and &lt;a href="http://www.w3.org/TR/2011/WD-html5-20110113/dnd.html#dom-datatransfer-dropeffect"&gt;MDN&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;copy:&lt;/strong&gt; A copy of the source item is made at the new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;move:&lt;/strong&gt; An item is moved to a new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;link:&lt;/strong&gt; A link is established to the source at the new location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;none:&lt;/strong&gt; The item may not be dropped.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Setting this value on &lt;code&gt;dragenter&lt;/code&gt; doesn't seem to do anything, it only works when doing it on &lt;code&gt;dragover&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Lets capture it and render it!!!&lt;/h2&gt;

&lt;p&gt;All that's left now is to touch the &lt;code&gt;drop&lt;/code&gt; event...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dropArea.addEventListener('drop', function(e){
    e.preventDefault();
    e.stopPropagation();

    var file = e.dataTransfer.files[0];
    var fileUrl = window.URL.createObjectURL(file);

    image.src = fileUrl;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like when we load the file from an &lt;code&gt;input&lt;/code&gt; control, we get a collection of files. Since we're only dragging 1 file for testing, we just grab the first file, create a URL, and load it...&lt;/p&gt;

&lt;p&gt;Now when we drop out cat picture!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/drag-drop-image-html5-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM Now we have Pizza Cat! :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/loading-an-image-or-video-from-a-file-input-control/</guid><link>http://www.philliphaydon.com/2014/04/loading-an-image-or-video-from-a-file-input-control/</link><a10:author><a10:name /></a10:author><category>HTML5</category><category>JavaScript</category><title>Loading an Image or Video from a File Input control.</title><description>&lt;p&gt;So you've got an input control, and you want to display the video/image before the user uploads, maybe so they can verify it first...&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt; allows you to get more information from a &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt; control than we could get before. &lt;/p&gt;

&lt;p&gt;So lets start with Video:&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;Ok so we have a basic HTML page with an &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt;, &lt;code&gt;&amp;lt;video...&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type="button'...&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we load up a file, our UI should look something like this:&lt;/p&gt;

</description><pubDate>Mon, 28 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So you've got an input control, and you want to display the video/image before the user uploads, maybe so they can verify it first...&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://dev.w3.org/2006/webapi/FileAPI/"&gt;File API&lt;/a&gt; allows you to get more information from a &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt; control than we could get before. &lt;/p&gt;

&lt;p&gt;So lets start with Video:&lt;/p&gt;

&lt;h2&gt;Video&lt;/h2&gt;

&lt;p&gt;Ok so we have a basic HTML page with an &lt;code&gt;&amp;lt;input type="file"...&lt;/code&gt;, &lt;code&gt;&amp;lt;video...&lt;/code&gt;, and &lt;code&gt;&amp;lt;input type="button'...&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;      
    &amp;lt;div&amp;gt;
        &amp;lt;input type="file" id="video-input"&amp;gt;
        &amp;lt;input type="button" value="Load Selected Video" id="load-video" /&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div&amp;gt;
        &amp;lt;video id="video-container" controls&amp;gt;&amp;lt;/video&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we load up a file, our UI should look something like this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-01.png" alt="" /&gt;  &lt;/p&gt;

&lt;p&gt;Now we need to add a click event to the button:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;    
    (function(){

        var fileInput = document.getElementById('video-input');
        var video = document.getElementById('video-container');

        document.getElementById('load-video').addEventListener('click', function(){

            // Hmmm what happens?!?

        });

    })();   
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is currently only 3 video types that most browsers can handle. &lt;em&gt;There are others but support is far and few, for now atleast&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;video/mp4&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;video/ogg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;video/webm&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;video/mp4&lt;/code&gt; is supported on all browsers except Opera. (tho I haven't tested) so I'll only use a &lt;code&gt;.mp4&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;How to load the selected file into a &lt;code&gt;&amp;lt;video /&amp;gt;&lt;/code&gt; element&lt;/h2&gt;

&lt;p&gt;Ok so we have selected a file, but how do we load it? The W3 Spec has a section on Blob URL for &lt;a href="http://www.w3.org/TR/FileAPI/#creating-revoking"&gt;Creating/Revoking&lt;/a&gt;, all we need to do is creat a URL for the file blob, we can do this by calling:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fileUrl = window.URL.createObjectURL(fileInput.files[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can assign this to the &lt;code&gt;&amp;lt;video...&lt;/code&gt; element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.getElementById('load-video').addEventListener('click', function(){

    var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

    video.src = fileUrl;

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can select the file:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Can see the file selected next to the file input&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if we click on &lt;code&gt;Load Selected Video&lt;/code&gt; we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-03.png" alt="" /&gt;  &lt;/p&gt;

&lt;h2&gt;What's it doing?!?&lt;/h2&gt;

&lt;p&gt;What the browser does is creates a fake URL with the blob loaded into it to simulate a URL for the content, if we put a break point on the button click:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can see a URL prefixed with &lt;code&gt;blob&lt;/code&gt; and a url. So this allows the browser to simulate making a request for the content as if it was being served up normally...&lt;/p&gt;

&lt;h2&gt;Images!&lt;/h2&gt;

&lt;p&gt;So the great thing about this is it works for images too!!! So if we change the HTML now to have an &lt;code&gt;&amp;lt;img...&lt;/code&gt; tag instead of &lt;code&gt;&amp;lt;video...&lt;/code&gt; tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div&amp;gt;
    &amp;lt;input type="file" id="image-input"&amp;gt;
    &amp;lt;input type="button" value="Load Selected Image" id="load-image" /&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div&amp;gt;
    &amp;lt;img id="image-container" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we update the JavaScript (just the wording so its all &lt;code&gt;image&lt;/code&gt; instead of &lt;code&gt;video&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(function(){

    var fileInput = document.getElementById('image-input');
    var image = document.getElementById('image-container');

    document.getElementById('load-image').addEventListener('click', function(){

        var fileUrl = window.URL.createObjectURL(fileInput.files[0]);

        image.src = fileUrl;

    });

})();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can achieve the same thing with images, selecting a file:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we hit load:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And if we debug it, just like the video, it creates a URL we can use for the image:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image-video-part-1-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's how easy it is :) Next we will look at a drop area for files.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/leveling-up-your-logging/</guid><link>http://www.philliphaydon.com/2014/04/leveling-up-your-logging/</link><a10:author><a10:name>Pure Krome</a10:name></a10:author><category>Logging</category><title>Levelling up your logging. (part 2)</title><description>&lt;h2&gt;Part 2: Levelling up your Logging.&lt;/h2&gt;

&lt;p&gt;Make sure you've read Part 1: &lt;a href="http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/"&gt;If you're not logging, you're doing it all wrong&lt;/a&gt; before you continue.&lt;/p&gt;

&lt;h3&gt;Production logging : This.Changes.Everything &amp;trade;&lt;/h3&gt;

&lt;p&gt;Localhost development is easy. Live/production logging is where This.Changes.Everything. &amp;trade;&lt;br /&gt;
Instead of sending all the logging information to your localhost Sentinal app we now send it to LogEntries.&lt;/p&gt;

&lt;p&gt;Why LogEntries (or any other Logging Service as a Service)?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can access this information any time.&lt;/li&gt;
&lt;li&gt;You local computer cannot be online 24/7&lt;/li&gt;
&lt;li&gt;When you need to triage a problem, the problem as already occured. Therefore, the problem is already &lt;em&gt;historical&lt;/em&gt;. As such, you can't suddenly turn 'on' logging. You need to go back into time and look at what has already happened.&lt;/li&gt;
&lt;/ol&gt;

</description><pubDate>Sun, 27 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-27T16:00:00Z</a10:updated><a10:content type="html">&lt;h2&gt;Part 2: Levelling up your Logging.&lt;/h2&gt;

&lt;p&gt;Make sure you've read Part 1: &lt;a href="http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/"&gt;If you're not logging, you're doing it all wrong&lt;/a&gt; before you continue.&lt;/p&gt;

&lt;h3&gt;Production logging : This.Changes.Everything &amp;trade;&lt;/h3&gt;

&lt;p&gt;Localhost development is easy. Live/production logging is where This.Changes.Everything. &amp;trade;&lt;br /&gt;
Instead of sending all the logging information to your localhost Sentinal app we now send it to LogEntries.&lt;/p&gt;

&lt;p&gt;Why LogEntries (or any other Logging Service as a Service)?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can access this information any time.&lt;/li&gt;
&lt;li&gt;You local computer cannot be online 24/7&lt;/li&gt;
&lt;li&gt;When you need to triage a problem, the problem as already occured. Therefore, the problem is already &lt;em&gt;historical&lt;/em&gt;. As such, you can't suddenly turn 'on' logging. You need to go back into time and look at what has already happened.&lt;/li&gt;
&lt;/ol&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;These Logging SAAS products are perfect for this situation. They just keep storing logging data as it streams in. You can just ignore all the data ... until it's time to check on things :)&lt;/p&gt;

&lt;p&gt;The general idea is this&lt;/p&gt;

&lt;p&gt;Step 1. Create an account with &lt;a href="https://logentries.com/"&gt;LogEntries&lt;/a&gt;. Create a new &lt;em&gt;host&lt;/em&gt;. Get the 'token' text key. (It's a guid).&lt;/p&gt;

&lt;p&gt;Step 2. Install the log entries nuget package: &lt;code&gt;install-package SimpleLogging.LogEntries.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/leveling-up-logging-01.png" alt="weeeeee" /&gt;&lt;/p&gt;

&lt;p&gt;Step 3. &lt;code&gt;Add-&amp;gt;new-&amp;gt;nlog.release.config&lt;/code&gt;&lt;br /&gt;
&lt;em&gt;Note 1:&lt;/em&gt; Notice how we now have a new &lt;code&gt;extensions&lt;/code&gt; element? Need-dat.&lt;br /&gt;
&lt;em&gt;Note 2:&lt;/em&gt; Notice how we are now using a &lt;code&gt;logentries&lt;/code&gt; target type? Also need-dat.    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true"&amp;gt;

    &amp;lt;extensions&amp;gt;
        &amp;lt;add assembly="LogentriesNLog"/&amp;gt;
    &amp;lt;/extensions&amp;gt;

    &amp;lt;!-- NLog example: https://github.com/nlog/nlog/wiki/Examples --&amp;gt;
    &amp;lt;targets&amp;gt;
        &amp;lt;target name="logentries" type="Logentries"
                debug="false"
                httpPut="false"
                ssl="false"
                layout="${date:format=ddd MMM dd} ${time:format=HH:mm:ss} ${date:format=zzz yyyy} ${logger} : ${LEVEL}, ${message}" /&amp;gt;
    &amp;lt;/targets&amp;gt;

    &amp;lt;rules&amp;gt;
        &amp;lt;logger name="*" minlevel="Trace" appendTo="logentries"/&amp;gt;
    &amp;lt;/rules&amp;gt;

&amp;lt;/nlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4. Modify &lt;code&gt;web.release.config&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change this...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nlog configSource="NLog.config" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to this...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;nlog configSource="NLog.release.config" /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 5. Run the website.&lt;/p&gt;

&lt;p&gt;Step 6. Now jump over to LogEntries and start a LIVE TAIL of the host... and viola... data should be streaming in.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/leveling-up-logging-02.png" alt="OMG IT WORKS!!!!111!!111" /&gt;&lt;/p&gt;

&lt;p&gt;Recap.&lt;/p&gt;

&lt;p&gt;We've got logging messages sprinkled through our code already. When we're happy, we push our latest code up to our website (ie. &lt;code&gt;RELEASE&lt;/code&gt; build so the web config transformations do their magic) and now the logging messages are logged to LogEntries instead. So at any time, we can log into LogEntries and see what's happening to our site.&lt;/p&gt;

&lt;h2&gt;Bonus Level&lt;/h2&gt;

&lt;p&gt;There's still more we can do. If you don't want to install Sentinal (or you're in some super fail restrictive environment where you are not allowed to install anything) you can always send any localhost debugging messages to LogEntries. Just create a second LogEntires-host called Debug or whatever and use that host for localhost development.&lt;/p&gt;

&lt;p&gt;Alternatively, you can also use Sentinal for production/live because you don't want to have any logging information stored on a 3rd party service. Just make sure you setup your Firewall to Port Forward any nLog data to the computer where Sentinal is running. This is what i &lt;em&gt;used&lt;/em&gt; to do until I found out about LogEntries.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</guid><link>http://www.philliphaydon.com/2014/04/fixing-osx-for-a-windows-user/</link><a10:author><a10:name /></a10:author><category>OSX</category><category>Windows</category><title>Fixing OSX as a Windows User...</title><description>&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

</description><pubDate>Fri, 25 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm slowly in the process of moving away from my huge desktop computer and moving to my good old 15" Mac Book Pro w/ Retina, as my main computer. Running windows in parallels. But moving to OSX is really hard, things that I take for granted in Windows are just hard in OSX, even after 2 years of having this laptop, and having used OSX for a few years when I lived in New Zealand....&lt;/p&gt;

&lt;p&gt;Sooo I'm making this blog post, mostly as a reference for the future, on what I've done to make life a little easier. &lt;/p&gt;

&lt;h3&gt;Fixing Home / End keys&lt;/h3&gt;

&lt;p&gt;Ahhh I know you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;rarr;&lt;/kbd&gt; and &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt;, but I just prefer the Windows key mapping. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I found &lt;a href="http://mwholt.blogspot.sg/2012/09/fix-home-and-end-keys-on-mac-os-x.html"&gt;this blog post&lt;/a&gt; by &lt;a href="https://twitter.com/mholt6"&gt;Matthew Holt&lt;/a&gt; which fixes the problem for me! &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Copying without permission from Matthew Holt's blog, just incase it dies one day...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Open the Terminal and do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Library
$ mkdir KeyBindings
$ cd KeyBindings
$ nano DefaultKeyBinding.dict
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put these lines in that file, including the curly braces:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
/* Remap Home / End keys to be correct */
"\UF729" = "moveToBeginningOfLine:"; /* Home */
"\UF72B" = "moveToEndOfLine:"; /* End */
"$\UF729" = "moveToBeginningOfLineAndModifySelection:"; /* Shift + Home */
"$\UF72B" = "moveToEndOfLineAndModifySelection:"; /* Shift + End */
"^\UF729" = "moveToBeginningOfDocument:"; /* Ctrl + Home */
"^\UF72B" = "moveToEndOfDocument:"; /* Ctrl + End */
"$^\UF729" = "moveToBeginningOfDocumentAndModifySelection:"; /* Shift + Ctrl + Home */
"$^\UF72B" = "moveToEndOfDocumentAndModifySelection:"; /* Shift + Ctrl + End */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Press Ctrl+O and then Enter to save the file, and Ctrl+X to exit. Restart your computer to have it take full effect.&lt;/p&gt;

&lt;p&gt;Cited Sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys"&gt;http://evansweb.info/2005/03/24/mac-os-x-and-home-end-keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/"&gt;http://soodev.wordpress.com/2011/07/04/mac-os-x-remapping-home-and-end-keys/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Fixing Alt Tab...&lt;/h3&gt;

&lt;p&gt;I have no idea what the person was thinking when they decided that this was a good idea. &lt;/p&gt;

&lt;p&gt;So you can use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; to tab applications... but if you want to tab instances?!? You need to use &lt;kbd&gt;cmd&lt;/kbd&gt; + &lt;kbd&gt;`&lt;/kbd&gt;... So to fix that... Enter &lt;a href="http://manytricks.com/witch/"&gt;Witch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This thing is great, back to the old &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;tab&lt;/kbd&gt; &lt;/p&gt;

&lt;h3&gt;Fixing Spotlight&lt;/h3&gt;

&lt;p&gt;I don't know how anyone... This is my Spotlight:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Besides pretty much always saying 'indexing' when it does actually 'index'... it's really slow, doesn't give me what I'm looking for, and doesn't seem very helpful.&lt;/p&gt;

&lt;p&gt;Windows 8.1 Search is actually far superior to Spotlight. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-osx-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.alfredapp.com"&gt;Alfred&lt;/a&gt;... This thing is awesome, from the moment you install it, open it with &lt;kbd&gt;alt/opt&lt;/kbd&gt; + &lt;kbd&gt;space&lt;/kbd&gt;, and run your first start, it gives you the results you want.&lt;/p&gt;

&lt;h3&gt;Fixing maximize windows&lt;/h3&gt;

&lt;p&gt;I like to use windows Maximized, but when you press the little green &lt;code&gt;+&lt;/code&gt; for some reason it only expands the window vertically... I have no idea why...&lt;/p&gt;

&lt;p&gt;Spaces on OSX are pretty awesome, so if I want to have a couple of programs on 2 or 3 spaces I can easily flick between them with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;larr;&lt;/kbd&gt; or view all with &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;&amp;uarr;&lt;/kbd&gt;, but when it comes to maximizing a window... while keeping the top tool bar, it seems you can't...&lt;/p&gt;

&lt;p&gt;I always get the argument that I should full screen the app, but I don't want to... &lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.blazingtools.com/right_zoom_mac.html"&gt;RightZoom&lt;/a&gt;, this thing is great, it makes a window take up all the space, both horizontally and vertically. &lt;/p&gt;

&lt;h3&gt;Things I can't fix :(&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Right click context menu to add new file...&lt;/li&gt;
&lt;li&gt;Cut/Paste folders easily (apparently there's some command but I never remember it)&lt;/li&gt;
&lt;/ol&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</guid><link>http://www.philliphaydon.com/2014/04/if-youre-not-logging-youre-doing-it-all-wrong/</link><a10:author><a10:name>Pure Krome</a10:name></a10:author><category>Logging</category><category>NancyFX</category><title>If you're not logging, you're doing it all wrong. (part 1)</title><description>&lt;h2&gt;Part 1: If you're not logging, you're doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-01.png" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

</description><pubDate>Tue, 22 Apr 2014 16:00:00 Z</pubDate><a10:updated>2014-04-22T16:00:00Z</a10:updated><a10:content type="html">&lt;h2&gt;Part 1: If you're not logging, you're doing it all wrong.&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-01.png" alt="Really? Seriously?" /&gt;&lt;/p&gt;

&lt;h3&gt;Synopsis: Simple way to start logging your .NET application.&lt;/h3&gt;

&lt;p&gt;Maintaining some production software is most overlooked until a problem arises ... which by then it could be more costly to support and fix if some simple, basic procedures were not considered from day zero. In my opionion, adding the ability to get acess to the internal runnings of your system is crutial to &lt;em&gt;seeing what is going on under the hood&lt;/em&gt; and helping you get some facts to help problem solve a production issue.&lt;/p&gt;

&lt;p&gt;Logging is one of these mechanisms and should be considered and planned before you even start any coding.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;What this is not about:    &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Not an opinion piece about why you should be logging your code. Google for that, then come back when you're convinced that you need it. &lt;/li&gt;
&lt;li&gt;This is not a lesson in Dependency Injection. Don't know that? Google it then come back.&lt;/li&gt;
&lt;li&gt;Nor is this a lesson in &lt;a href="http://nlog-project.org/"&gt;NLog&lt;/a&gt;, &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; or &lt;a href="http://nancyfx.org/"&gt;NancyFX&lt;/a&gt; / &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt; (sample tools we use in this example)&lt;/li&gt;
&lt;li&gt;Nor will I explain how to setup an account and 'hosts' with LogEntries (what the hell is LogEntries? I'll explain that later).&lt;/li&gt;
&lt;li&gt;Nor will I explain what/how are web.config transformations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;If you're not logging, then you're doing it all wrong.&lt;/h3&gt;

&lt;p&gt;You build websites or mobile/desktop applications. Awesome. Therefore, you need to know what is happening &lt;em&gt;during&lt;/em&gt; runtime of your live/production application, otherwise you're flying blind. &lt;/p&gt;

&lt;p&gt;The trick to logging a .NET application is to make sure that you leverage a logging interface all over your code. Based upon your solution's configuration (ie. &lt;code&gt;DEBUG&lt;/code&gt; or &lt;code&gt;RELEASE&lt;/code&gt; or &lt;code&gt;ANY_OTHER_CUSTOM_CONFIG&lt;/code&gt;) we leverage &lt;code&gt;web.config&lt;/code&gt; &lt;em&gt;transformations&lt;/em&gt; to use the appropriate logging &lt;em&gt;targets&lt;/em&gt;, based on the configuration.&lt;/p&gt;

&lt;p&gt;Note: &lt;code&gt;Target&lt;/code&gt; = a fancy word for where we dump our logging information to. This could be the console or a file or another gui-application (more on this, later) or some internet website (also more on this magic, later).&lt;/p&gt;

&lt;h3&gt;Tools - we need tools!&lt;/h3&gt;

&lt;p&gt;Then general idea is this&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code your message(s): "Hi, I'm here."  or "OMG, BOOM" or "Just created a new user. UserId: '1'.".&lt;/li&gt;
&lt;li&gt;NLog sends the message somewhere: your GUI app, or email, or a logging website.&lt;/li&gt;
&lt;li&gt;View the messages: use Sentinal (localhost) or LogEntries (production).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And where do we visualize this data again?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;: A free windows app that displays log information, as it streams in &lt;em&gt;live&lt;/em&gt;. (yes, ~~streams~~ in …)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://logentries.com/"&gt;LogEntires&lt;/a&gt;: A website that &lt;em&gt;stores&lt;/em&gt; your log entry information, which you can view it at any time. Also has a live stream.&lt;br /&gt;
&lt;strong&gt;Free account limits data retention to a week .. which for most people (especially when you're testing/debuging) is &lt;em&gt;totally&lt;/em&gt; sufficient.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay so when to use what?    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sentinal: use this for localhost debugging.&lt;/li&gt;
&lt;li&gt;LogEntires: use this for live/production system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pro Tip: Yes, you can use Sentinal for live/production if you really want to. But this involves setting up NAT rules in your firewall, opening ports on your local firewall, etc. Basically - a PITA vs using LogEntries which is for free.&lt;/p&gt;

&lt;h3&gt;Show me some code, already! Sheesss…&lt;/h3&gt;

&lt;p&gt;Fine. Let's do this: LEEEEROOYYYYY JENKINNNNNSSSSSSS……&lt;/p&gt;

&lt;p&gt;Step 1. Download &amp;amp; install &lt;a href="http://sentinel.codeplex.com/"&gt;Sentinal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Step 2. Create/Setup a new solution.&lt;br /&gt;
    eg. &lt;code&gt;File -&amp;gt; New -&amp;gt; Web Application.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Step 3. Lets add some logging information.&lt;/p&gt;

&lt;p&gt;First, we need an existing logging interface package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-02.png" alt="Nuget command line" /&gt;&lt;/p&gt;

&lt;p&gt;Next we'll use DI/IOC to inject the logging instance, so lets wire that up first.&lt;/p&gt;

&lt;p&gt;NancyFX:&lt;br /&gt;
(This is using TinyIOC for IoC (which is built into NancyFX))&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void ConfigureApplicationContainer(TinyIoCContainer container)
{
    base.ConfigureApplicationContainer(container);

    // NOTE: Use a specific constructor, which is why we have to use the delayed registration.
    var loggingService = new NLogLoggingService();
    container.Register&amp;lt;ILoggingService&amp;gt;((c, p) =&amp;gt; loggingService);

    // Register any other singleton services.
    // …
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.Net MVC&lt;br /&gt;
(This is using &lt;a href="http://autofac.org/"&gt;AutoFac&lt;/a&gt; for IoC)    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class DependencyResolutionConfig
{
    public static void RegisterContainers()
    {
        var builder = new ContainerBuilder();

        // Register our services.
        builder.Register(c =&amp;gt; new NLogLoggingService())
            .As&amp;lt;ILoggingService&amp;gt;();

        // Register our controllers (so they will use constructor injection)
        builder.RegisterControllers(typeof(MvcApplication).Assembly);

        var container = builder.Build();

        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we'll use constructor injection for our logging interface.&lt;br /&gt;
&lt;strong&gt;Side Note&lt;/strong&gt;: I do not consider injecting an &lt;code&gt;ILoggingService&lt;/code&gt; into classes as an &lt;a href="http://jeffreypalermo.com/blog/constructor-over-injection-anti-pattern/"&gt;Anti-Pattern&lt;/a&gt; because IMO I usually log things in &lt;em&gt;all&lt;/em&gt; methods (I'll touch on this, below) so therefore, logging is a fundamental part of each class that contains business logic. As such, my class has a logging dependecy throughout. Not on 1 or some methods, only.&lt;/p&gt;

&lt;p&gt;NancyFX&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using Nancy;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.NancyFX.Modules
{
    public class HomeModule : NancyModule
    {
        private readonly ILoggingService _loggingService;

        public HomeModule(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;

            Get["/"] = _ =&amp;gt; GetHome();
        }

        private dynamic GetHome()
        {
            _loggingService.Trace("GetHome");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View["home"];
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ASP.NET MVC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Web.Mvc;
using Shouldly;
using SimpleLogging.Core;

namespace SimpleLogging.Samples.MVC.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILoggingService _loggingService;

        public HomeController(ILoggingService loggingService)
        {
            loggingService.ShouldNotBe(null);
            _loggingService = loggingService;
        }

        //
        // GET: /Home/

        public ActionResult Index()
        {
            _loggingService.Trace("Index");

            _loggingService.Debug("Current DateTime: '{0}'", DateTime.UtcNow);

            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 4. Add an NLog file.&lt;/p&gt;

&lt;p&gt;Add this new file to the root website / application folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nlog.config    

&amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;
&amp;lt;nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="true"&amp;gt;

    &amp;lt;!-- NLog example: https://github.com/nlog/nlog/wiki/Examples --&amp;gt;
    &amp;lt;targets async="true"&amp;gt;
        &amp;lt;target xsi:type="NLogViewer"
                name="sentinal" 
                address="udp://127.0.0.1:9999" /&amp;gt;
    &amp;lt;/targets&amp;gt;

    &amp;lt;rules&amp;gt;
        &amp;lt;logger name="*" minlevel="Trace" writeTo="sentinal"/&amp;gt;
    &amp;lt;/rules&amp;gt;

&amp;lt;/nlog&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Step 5. Run Sentinal&lt;/p&gt;

&lt;p&gt;Step 6. Run the website.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/simple-logging-03.png" alt="Zoh Mai Gawd" /&gt;&lt;/p&gt;

&lt;h3&gt;Recap.&lt;/h3&gt;

&lt;p&gt;So now we've started sprinkling logging messages throughout our code. This gives us some Serious.KickAss&amp;trade; insights into what is going on under the hood with our code. We view this logging data locally with our Sentinel app. &lt;/p&gt;

&lt;p&gt;It's not hard to add logging to your website / application. &lt;/p&gt;

&lt;p&gt;Please start to get into the habbit of &lt;code&gt;TRACE&lt;/code&gt;ing and &lt;code&gt;DEBUG&lt;/code&gt;ing your code so you can see what's going on under the hood - when you really need to.&lt;/p&gt;

&lt;h3&gt;NEXT: Part 2 - Levelling up your Logging&lt;/h3&gt;

&lt;p&gt;In the next part, I take all this simple logging magic to the next level : doing this for your live / production website / application!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</guid><link>http://www.philliphaydon.com/2014/02/fixing-github-with-chrome-plugin-github-expandinizr/</link><a10:author><a10:name /></a10:author><category>github</category><title>Fixing Github with Chrome Plugin - GitHub.Expandinizr</title><description>&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

</description><pubDate>Thu, 06 Feb 2014 16:00:00 Z</pubDate><a10:updated>2014-02-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So if you've ever visited Github, and thought &lt;em&gt;'Oh, I'll browser a repository and find a file'&lt;/em&gt;, no doubt you've probably ended up in a suituation like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;OH Joy, this is so readable... I honestly have no idea who at Github approved this...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Luckily &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt; had a brilliant idea... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This awesome Chrome plugin, turns the above, into:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Into......&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fixing-github-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This more responsive design is so awesome! (Apparently thanks to some random guy named &lt;a href="https://twitter.com/khellang"&gt;Kristian Hellang&lt;/a&gt;...) &lt;small&gt;don't follow him, don't need his ego boosted anymore.&lt;/small&gt; ;)&lt;/p&gt;

&lt;p&gt;Such a better use of space, and makes working with Github a billion times more pleasurable!&lt;/p&gt;

&lt;p&gt;Download it now... NOW!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOWWWW!!!!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/"&gt;https://chrome.google.com/webstore/detail/githubexpandinizr/cbehdjjcilgnejbpnjhobkiiggkedfib/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</guid><link>http://www.philliphaydon.com/2014/01/if-youre-going-to-use-repositories-dont-have-generic-or-base-repositories/</link><a10:author><a10:name /></a10:author><category>Rant</category><category>Repositories</category><title>If you're going to use repositories, don't have generic or base repositories...</title><description>&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Thu, 30 Jan 2014 16:00:00 Z</pubDate><a10:updated>2014-01-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Repositories are one of those patterns we hate to love or love to hate, but seems to be getting more hate lately than love. &lt;/p&gt;

&lt;p&gt;Personally I don't have any real problem with repositories themselves, I just have a problem with the way it is used. &lt;/p&gt;

&lt;p&gt;If you run the following search in Google:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;BaseRepository OR GenericRepository OR IRepository site:stackoverflow.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You will get about 10k results on Stack Overflow for questions that contain something related to a generic repository or base repository. You end up with code snippets such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IRepository&amp;lt;TEntity&amp;gt; : IDisposable where TEntity : class
{
    IUnitOfWork Session { get; }
    IList&amp;lt;TEntity&amp;gt; GetAll();
    IList&amp;lt;TEntity&amp;gt; GetAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; predicate);
    bool Add(TEntity entity);
    bool Delete(TEntity entity);
    bool Update(TEntity entity);
    bool IsValid(TEntity entity);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GenericRepository&amp;lt;TEntity&amp;gt; : IRepository&amp;lt;TEntity&amp;gt; where TEntity : class
{
    public virtual IEnumerable&amp;lt;TEntity&amp;gt; FindAll(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation ...
    }

    public virtual TEntity FindOne(Expression&amp;lt;Func&amp;lt;TEntity, bool&amp;gt;&amp;gt; where = null)
    {
        // implementation
    }

    public void Update(TEntity entity)
    {
        // update your entity ...
    }

    // etc...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are just bad bad bad...&lt;/p&gt;

&lt;h2&gt;Generic Repositories make assumptions about your domain&lt;/h2&gt;

&lt;p&gt;Generic Repositories is that they make assumptions about your domain. It makes assumptions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All entities should contain Get/List/Update/Add/Delete... etc&lt;/li&gt;
&lt;li&gt;All entities come from the same location (i.e a database)&lt;/li&gt;
&lt;li&gt;All entities have a single primary key of some sort...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with this, is that these are all false assumptions, generic repositories seem to never take into account that entities can have composite keys or no key identifier at all. Or they require some, but not all implementations defined in the base class or interface. &lt;/p&gt;

&lt;p&gt;Often people assume only a single kind of persistence, when you could load some data from a flat file, database, a web service, etc.&lt;/p&gt;

&lt;p&gt;This isn't a problem if you do away with the base implementation or interface and just have explicit interfaces such as &lt;code&gt;IProductRepository&lt;/code&gt; or &lt;code&gt;IUserRepository&lt;/code&gt;, but people get so caught up on the whole idea of having lots of interfaces, and instead try to opt for the generic &lt;code&gt;IRepository&amp;lt;T&amp;gt;&lt;/code&gt; until they need to implement other stuff.&lt;/p&gt;

&lt;h2&gt;Generic Repositories don't prevent code duplication&lt;/h2&gt;

&lt;p&gt;Generic repositories don't prevent duplication because there's no duplication to begin with! What you end up doing is abstracting an abstraction, for the sake if feeling like you're writing less code or getting implementation for free, when you're actually adding unnecessary code that may never be used!&lt;/p&gt;

&lt;p&gt;If for example you have a &lt;code&gt;User&lt;/code&gt; / &lt;code&gt;UserRepository&lt;/code&gt;, you may find that your generic repository asks you to implement &lt;code&gt;Delete&lt;/code&gt;...&lt;/p&gt;

&lt;p&gt;But when if you are never required to delete a user, and instead you Deactivate a user, or disable a users login, but keep the user because hes actually attached to data in the system...&lt;/p&gt;

&lt;p&gt;You end up implementing methods, or overriding existing methods to have no implementation or throw a &lt;code&gt;NotImplementedException&lt;/code&gt;. This is just bad design. &lt;/p&gt;

&lt;p&gt;You could argue "Oh but when I implement &lt;code&gt;GetById&lt;/code&gt; I have to duplicate it..."&lt;/p&gt;

&lt;p&gt;Except you're not duplicating it, just because two things do similar or the same things, doesn't mean its duplicated.&lt;/p&gt;

&lt;p&gt;Lets say you have a &lt;code&gt;UserRepository&lt;/code&gt; and &lt;code&gt;OrderRepository&lt;/code&gt;, both have a method defined in a base repository called &lt;code&gt;GetById&lt;/code&gt;, if you changed &lt;code&gt;GetById&lt;/code&gt; for a User, you're changing the way the Order one works. You're potentially breaking your application. These two look the same, but they are different. It's not duplication!&lt;/p&gt;

&lt;h2&gt;Repositories for everything&lt;/h2&gt;

&lt;p&gt;The next issue is people end up creating repositories for everything, not their aggregate roots. For example, say we have an &lt;code&gt;Order&lt;/code&gt; / &lt;code&gt;OrderLine&lt;/code&gt; scenario...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
  public int Id { get; set; }
  ...

  public IList&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
  public int Id { get; set; }
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Often enough people will create an &lt;code&gt;OrderRepository&lt;/code&gt; and &lt;code&gt;OrderLineRepository&lt;/code&gt;, or use their Generic repositories like &lt;code&gt;BaseRepository&amp;lt;Order&amp;gt;&lt;/code&gt; and &lt;code&gt;BaseRepository&amp;lt;OrderLine&amp;gt;&lt;/code&gt;, the problem is, everything to do with an &lt;code&gt;OrderLine&lt;/code&gt; is actually the responsibility of the &lt;code&gt;Order&lt;/code&gt; and not anything else. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</guid><link>http://www.philliphaydon.com/2013/12/snows-new-server-feature-running-up-a-test-website-for-you/</link><a10:author><a10:name /></a10:author><category>Snow</category><title>Snow's new server feature! Runs up a testing website for you.</title><description>&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

</description><pubDate>Tue, 24 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-24T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Just now I released Snow v1.4.0 :) with this we have two new features.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New &lt;code&gt;server=true&lt;/code&gt; argument on Snow to run up an Owin testing website.&lt;/li&gt;
&lt;li&gt;Merged assemblies&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;New server argument&lt;/h2&gt;

&lt;p&gt;When running Snow, you can now pass in an additional argument &lt;code&gt;server=true&lt;/code&gt; which will start up a self-hosted website which will allow you to test your updates before pushing them.&lt;/p&gt;

&lt;p&gt;Given my blog for example, my config looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true server=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome right?&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a href="https://twitter.com/randompunter"&gt;Damian Hickey&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/davidfowl"&gt;David Fowler&lt;/a&gt; for this feature.&lt;/p&gt;

&lt;p&gt;Damian told me about &lt;a href="https://www.nuget.org/packages/microsoft.owin.staticfiles"&gt;Microsoft.Owin.StaticFiles&lt;/a&gt;, this is an awesome package, basically you can point it to a directory and it will serve up static files. That means for me to setup Snow all I had to write was basically: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configuration(IAppBuilder app)
{
    var fileSystem = new FileServerOptions
    {
        EnableDirectoryBrowsing = true,
        FileSystem = new PhysicalFileSystem(Path.GetFullPath(Settings.Output))
    };

    app.UseFileServer(fileSystem);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created one little problem though :( when running this up it required the command window to be run as Administrator, which isn't very nice.&lt;/p&gt;

&lt;p&gt;Luckily David came to the rescue and let me know about &lt;a href="https://github.com/Bobris/Nowin"&gt;Nowin&lt;/a&gt;, it's a...&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Fast and scalable Owin Web Server in pure .Net 4.5 (it does not use HttpListener)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Plugging it in was super easy, I simply added some &lt;code&gt;WebApp&lt;/code&gt; options specifying the &lt;code&gt;ServerFactory&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var options = new StartOptions
{
    ServerFactory = "Nowin",
    Port = 5498
};

using (WebApp.Start&amp;lt;Startup&amp;gt;(options))
{
    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM, done, no more asking for admin privileges. :)&lt;/p&gt;

&lt;h2&gt;New merged assemblies&lt;/h2&gt;

&lt;p&gt;With a little help from &lt;a href="https://twitter.com/SimonCropp"&gt;Simon Cropp&lt;/a&gt;, I added &lt;a href="https://www.nuget.org/packages/Costura.Fody"&gt;Costura.Fody&lt;/a&gt;. This awesome little project merges all your assemblies, with NO effort from you at all!&lt;/p&gt;

&lt;p&gt;Simply install the package... and build your project!&lt;/p&gt;

&lt;p&gt;That's how easy it was... Well almost, there's a little problem with Razor, it requires an assembly to be loaded in the AppDomain and if it's not there it throws a wobbly, I don't quite understand but I decided to ignore that single assembly.&lt;/p&gt;

&lt;p&gt;The end result is, Snow now only have 1 files. A &lt;code&gt;.exe&lt;/code&gt; and a &lt;code&gt;.dll&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-testing-website-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner than before :)&lt;/p&gt;

&lt;p&gt;Snow repository and Snow.Template have been updated with the new awesomeness. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</guid><link>http://www.philliphaydon.com/2013/12/unit-testing-workflow-foundation-bookmarks-easily/</link><a10:author><a10:name /></a10:author><category>Unit Testing</category><category>Workflow</category><title>Unit testing Workflow Foundation Bookmarks... easily...</title><description>&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

</description><pubDate>Tue, 17 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm not a fan of Workflow Foundation, but you got to do what you got to do. Usually when using WF, unit testing an activity is rather easy. Invoke with some data, assert the out value, possibly watch some methods on some dependencies...&lt;/p&gt;

&lt;p&gt;But when it comes to testing Bookmarks, if the bookmark is created, and resuming it, it's not easy...&lt;/p&gt;

&lt;p&gt;Well that is unless you're using &lt;a href="http://wf.codeplex.com"&gt;Microsoft.Activities.UnitTesting&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So creating some new projects, a workflow project and a class library for testing...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to add the MS Libraries:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will add:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.UnitTesting&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Microsoft.Activities.Extensions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I've also added &lt;code&gt;xUnit&lt;/code&gt; for testing :)&lt;/p&gt;

&lt;p&gt;Now we can create a basic workflow activity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System.Activities;

public class SampleActivity : NativeActivity&amp;lt;bool&amp;gt;
{
    public InArgument&amp;lt;int&amp;gt; ValueOne { get; set; }
    public InArgument&amp;lt;int&amp;gt; ValueTwo { get; set; }

    protected override bool CanInduceIdle
    {
        get { return true; }
    }

    protected override void Execute(NativeActivityContext context)
    {
        var valueOne = context.GetValue(ValueOne);
        var valueTwo = context.GetValue(ValueTwo);

        if (valueTwo % 2 == 0)
        {
            //We do something and return true...
            context.SetValue(Result, true);

            return;
        }

        // Else condition was not met so we sleep and come back later
        context.CreateBookmark("Bookmark_" + valueOne, ResumeBookmarkCallback);
    }

    private void ResumeBookmarkCallback(NativeActivityContext context, Bookmark bookmark, object value)
    {
        // When we wake up, return false and let it try again
        context.SetValue(Result, false);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Post isn't about workflow, it's about unit testing. This is just a random example. :)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So completely random, given &lt;code&gt;valueTwo&lt;/code&gt; mod &lt;code&gt;2&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt; then we should set the return value as &lt;code&gt;true&lt;/code&gt;, else we create a bookmark... and when the bookmark is woken, it returns false.&lt;/p&gt;

&lt;p&gt;The first thing we want to test is the super duper happy path, given &lt;code&gt;valueTwo&lt;/code&gt; is &lt;code&gt;10&lt;/code&gt; then we should get &lt;code&gt;0&lt;/code&gt; remaining and we can assert that the result is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_10_For_Value_Two_Should_Have_A_Return_Argument_Of_True()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 10
    });

    // Act
    wfTester.TestActivity();

    // Assert
    wfTester.AssertOutArgument.IsTrue("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we create an instance of the &lt;code&gt;WorkflowApplicationTest&lt;/code&gt; class, passing in an activity with data. &lt;/p&gt;

&lt;p&gt;Next we call &lt;code&gt;TestActivity&lt;/code&gt; and then we &lt;code&gt;Assert&lt;/code&gt; the value. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, it passes :)&lt;/p&gt;

&lt;p&gt;Now, given the value 9, we should get a bookmark named &lt;code&gt;Bookmark_123&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_9_For_Value_Two_Should_Have_Bookmark_Using_Value_One()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.GetBookmarks();

    // Assert
    Assert.Equal("Bookmark_123", wfTester.Bookmarks.First());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like the first test, we start out the same, except after we call &lt;code&gt;TestActivity&lt;/code&gt; we actually call &lt;code&gt;GetBookmarks&lt;/code&gt; off the &lt;code&gt;TestWorkflowApplication&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is rather important, I couldn't find this in any of the documentation, but without this, the &lt;code&gt;Bookmarks&lt;/code&gt; property is always empty...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So by having the &lt;code&gt;GetBookmarks&lt;/code&gt; call, ensures the &lt;code&gt;Bookmarks&lt;/code&gt; property is populated.&lt;/p&gt;

&lt;p&gt;Now, lastly we want to resume the bookmark and assert that the result is returned. We are expecting &lt;code&gt;false&lt;/code&gt; so we create a new test, similar to the last, but we resume...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void When_Resuming_A_Workflow_Should_Get_The_Return_Value_False()
{
    // Arrange
    var wfTester = WorkflowApplicationTest.Create(new SampleActivity
    {
        ValueOne = 123,
        ValueTwo = 9
    });

    // Act
    wfTester.TestActivity();
    wfTester.TestWorkflowApplication.ResumeBookmark("Bookmark_123", 0);

    // Assert
    wfTester.AssertOutArgument.IsFalse("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So again, it's similar to the second test, except rather than call &lt;code&gt;GetBookmarks&lt;/code&gt; we called &lt;code&gt;ResumeBookmark&lt;/code&gt;, passing in the bookmark name, and a value. Although in our case we don't need it, so I passed in 0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;null is not allowed :(&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then we assert that the value is false!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/workflow-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it! A passing unit test! Easy peasy :)&lt;/p&gt;

&lt;p&gt;I've put this test into a github repository that can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git"&gt;https://github.com/phillip-haydon/WorkflowBookmarkUnitTest.git&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</guid><link>http://www.philliphaydon.com/2013/12/git-support-in-visual-studio-2013-is-actually-quite-cool/</link><a10:author><a10:name /></a10:author><category>Visual Studio</category><title>Git support in Visual Studio 2013... is actually quite cool!</title><description>&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

</description><pubDate>Wed, 11 Dec 2013 16:00:00 Z</pubDate><a10:updated>2013-12-11T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Lately I've found myself using the new Git support in Visual Studio 2013 more and more, it turns out once you get used to it, its quite handy! Initially my thoughts were its rubbish, mostly because I found it cumbersome, or maybe just that things weren't working the way I thought they were. I do fine some things strange, but it's still completely usable!&lt;/p&gt;

&lt;p&gt;How does it all work?&lt;/p&gt;

&lt;p&gt;Let's start by creating a new project:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I ticked the &lt;code&gt;Create new Git repository&lt;/code&gt; option in the bottom right hand corner, this just initializes the folder for you. &lt;/p&gt;

&lt;p&gt;Now that the project is created, we can open the Team Explorer, it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I'm not entirely sure why it does this but when I create new projects, the solution file is never included by default?!?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So the solution file is excluded, we can right click the file(s) and include them...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now this gets included with the pend... Included Changes. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we want to exclude stuff, we can right click in the Included Changes:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is very handy, I was working on a project earlier where I couldn't be bothered typing the login credentials in every time. So I hard coded them in the View and excluded the file so it wouldn't get picked up in the Included Changes. Was nice being able to quickly Right Click &gt; Exclude&lt;/p&gt;

&lt;p&gt;Now we can add a comment and commit:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The commit is created locally:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to push it, if we click on &lt;code&gt;Unsynced Commits&lt;/code&gt; we currently get a screen asking us to push to a Remote Repository.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-08.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we enter a URL and try to push:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;My remote repository doesn't exist yet :( so creating it on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now... where to push from?!? HAH, this is where I got confused. If you try to push before your repository exists, it sort of breaks the workflow. So to fix it, click on the Arrow next to &lt;code&gt;master&lt;/code&gt; branch. And select &lt;code&gt;Manage Branches&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can then see &lt;code&gt;Unpublished Branches&lt;/code&gt;, right click on your master branch and select &lt;code&gt;Publish&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Visiting GitHub we can see all our pushed changes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-14.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome! Back in Visual Studio, if we navigate back to our &lt;code&gt;Changes&lt;/code&gt;, we can click on the &lt;code&gt;Action&lt;/code&gt; button next to &lt;code&gt;Commit&lt;/code&gt; and select &lt;code&gt;View History&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-09.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;this feature seems to lag a little when loading up a large history&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can see all the history on our commits, for the current selected branch.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I think this support for Git in Visual Studio is really awesome! I suggest you take a look, I still use console primarily, but this is really handy, and I find myself committing more often, which is always a good thing!&lt;/p&gt;

&lt;p&gt;It's also nice to be able to see changed files in Visual Studio!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/git-support-15.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/snow-gets-drafts/</guid><link>http://www.philliphaydon.com/2013/11/snow-gets-drafts/</link><a10:author><a10:name /></a10:author><category>Snow</category><title>Snow gets Drafts!</title><description>&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

</description><pubDate>Wed, 06 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A special thanks goes out to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for this new feature!&lt;/p&gt;

&lt;p&gt;Snow now ships with Drafts and Privates, this is a really cool feature since it allows you to create drafts, and a page to list all drafts (optional). &lt;/p&gt;

&lt;h2&gt;What are the options&lt;/h2&gt;

&lt;p&gt;There are three options for a &lt;code&gt;published&lt;/code&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;draft&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Draft is basically a finished or rough cut blog post that you will publish soon, it will be compiled to &lt;code&gt;/drafts&lt;/code&gt; URL and be publicly accessible (either via a known page or the direct URL)&lt;/p&gt;

&lt;p&gt;Private is a post that will not be compiled at all, this will stay as markdown, good for when you want to begin writing something but not have it show up online yet.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;True, this is optional, but its basically the same as not supplying the &lt;code&gt;published&lt;/code&gt; state at all. It will compile your post and make it publicly available. &lt;/p&gt;

&lt;h2&gt;How do I do it?!?&lt;/h2&gt;

&lt;p&gt;In the header of your markdown file, simply add a new property called &lt;code&gt;published&lt;/code&gt; and away you go!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Snow gets Drafts! 
layout: post
categories: Snow 
published: draft
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Where does it go?&lt;/h2&gt;

&lt;p&gt;Your file should be located where all your other posts go. Using this post as an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As well as the same header as above, with &lt;code&gt;published&lt;/code&gt; set to draft, I can now compile the site. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We get this new drafts folder. The folder structure is the same as a normal post, so the file name and chosen slug will dictate the URL.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Given this information, the URL would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://www.philliphaydon.com/drafts/2013/11/snow-gets-drafts/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat huh?&lt;/p&gt;

&lt;h2&gt;What about that viewing page you told me about?!?&lt;/h2&gt;

&lt;p&gt;To create a viewing page of all drafts, we can create a brand new template in the root of our Snow folder called &lt;code&gt;drafts.cshtml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The contents is super simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase&amp;lt;Snow.ViewModels.ContentViewModel&amp;gt;
@using System.Collections.Generic
@{
  Layout = "default.cshtml";
}

&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
@foreach(var draft in Model.Drafts){
  &amp;lt;li&amp;gt;&amp;lt;a href="@draft.Url" title="@draft.Title"&amp;gt;@draft.Title&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how I have mine marked up, similar to how my archive pages work. &lt;/p&gt;

&lt;p&gt;Next, add it to the config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a snippet of my config&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;},{
    "file": "archive.cshtml"
},{
    "file": "drafts.cshtml",
    "loop": "Drafts"
},{
    "file": "about.cshtml"
},{
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's it, now we can compile our Snow site.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/snow-gets-drafts-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Bam we have a new index file, and it has listed out the current drafts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;
    &amp;lt;div class="head-inner"&amp;gt;
        &amp;lt;h1&amp;gt;Drafts&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/header&amp;gt;

&amp;lt;ul class="category-list fancy-container darkishblue"&amp;gt;
  &amp;lt;li&amp;gt;&amp;lt;a href="/drafts//2013/11/snow-gets-drafts/" title="Snow gets Drafts!"&amp;gt;Snow gets Drafts!&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;h2&gt;Things to note.&lt;/h2&gt;

&lt;p&gt;Snow has some Razor helpers for things like Analytics. If you're using the helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.RenderGoogleAnalytics("UA-######-##")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then Snow will not render any analytically code for the Draft index or compiled Draft Posts. This means Google wont pick it up unless you link to it somewhere. &lt;em&gt;(considering adding a helper to set no-cache and such in the header)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Anyway that's it, the new Drafts feature in Snow. Thanks again to &lt;a href="https://twitter.com/johanilsson"&gt;@johanilsson&lt;/a&gt; for implementing this for us!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</guid><link>http://www.philliphaydon.com/2013/11/making-nancy-modules-easier-to-manage/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>Making Nancy Modules easier to manage</title><description>&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

</description><pubDate>Sat, 02 Nov 2013 16:00:00 Z</pubDate><a10:updated>2013-11-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One problem I think a lot of developers have, is creating Controllers and Modules that are small and maintainable. Sometimes when you add some querying, bit of validation, pass it off to a repository or service, etc. It begins to become a little bit too big. &lt;/p&gt;

&lt;p&gt;Lets assume our we have an &lt;code&gt;AccountModule&lt;/code&gt; it Gets a Login route to load the UI, and Posts to a Login route to authenticate the user, and do something.&lt;/p&gt;

&lt;p&gt;It also Gets a Register route to load the UI, and Posts to a Register route to register the new user. &lt;/p&gt;

&lt;p&gt;Without an actual implementation, something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AccountModule : NancyModule
{
    public AccountModule() : base("/account")
    {
        Get["/login"] = _ =&amp;gt; "login";
        Post["/login"] = _ =&amp;gt; "login";

        Get["/register"] = _ =&amp;gt; "register";
        Post["/register"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To begin with, we only have 4 things to implement, its rather small, somewhat easy to manage, but what happens when we want to update an account?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;Get["details"] = _ =&amp;gt; "details...";
Post["details"] = _ =&amp;gt; "details...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we want to have a profile...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["profile"] = _ =&amp;gt; "profile...";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just keeps adding up...&lt;/p&gt;

&lt;p&gt;At this point it begins to get cluttered. Not only that, I believe this also breaks the Single Responsibility Principal.&lt;/p&gt;

&lt;h2&gt;My solution!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;This isn't anything new, I personally haven't seen anyone blog about this stuff but I have absolutely no doubt people most likely create controllers like this in MVC&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that's why I've decided Modules should be broken up into Functionality rather than Functional Areas.&lt;/p&gt;

&lt;p&gt;All these things hang off &lt;code&gt;Account&lt;/code&gt;, so lets create an &lt;code&gt;Account&lt;/code&gt; folder in our &lt;code&gt;Modules&lt;/code&gt; folder. &lt;/p&gt;

&lt;p&gt;Inside this folder we can create 4 new modules.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/small-nancy-module-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So we have 4 modules rather than 1:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DetailsModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ProfileModule&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RegisterModule&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can expect, these are all really small now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DetailsModule : NancyModule
{
    public DetailsModule()
        : base("/account/details")
    {
        Get["/"] = _ =&amp;gt; "details";
    }
}

public class LoginModule : NancyModule
{
    public LoginModule()
        : base("/account/login")
    {
        Get["/"] = _ =&amp;gt; "login";
        Post["/"] = _ =&amp;gt; "login";
    }
}

public class ProfileModule : NancyModule
{
    public ProfileModule()
        : base("/account/profile")
    {
        Get["/"] = _ =&amp;gt; "profile...";
    }
}

public class RegisterModule : NancyModule
{
    public RegisterModule()
        : base("/account/register")
    {
        Get["/"] = _ =&amp;gt; "register";
        Post["/"] = _ =&amp;gt; "register";
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From our folder perspective we can easily find all Modules under the &lt;code&gt;/account&lt;/code&gt; route, and easily find the one related to &lt;code&gt;Login&lt;/code&gt;, or &lt;code&gt;Register&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;This also makes unit testing easier since we only need to worry about dependencies related to a specific piece of functionality. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Login&lt;/code&gt; might use a RavenDB session and Password Hashing Service, while &lt;code&gt;Profile&lt;/code&gt; may use RavenDB and a 3rd party Image hosting service for Profile pictures. &lt;/p&gt;

&lt;p&gt;Disagree or have a better way? Would love to hear! Share in the comments :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</guid><link>http://www.philliphaydon.com/2013/10/running-javascript-unit-tests-in-visual-studio-with-jasmine-and-resharper/</link><a10:author><a10:name /></a10:author><category>AngularJS</category><category>Jasmine</category><category>JavaScript</category><category>ReSharper</category><category>Unit Testing</category><title>Running JavaScript Unit Tests in Visual Studio with Jasmine &amp; ReSharper</title><description>&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

</description><pubDate>Wed, 23 Oct 2013 16:00:00 Z</pubDate><a10:updated>2013-10-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There's so much information on the internet in terms of JavaScript Unit Testing and how to run tests etc, but when it comes to running tests in Visual Studio, without a browser, there's very little information. I had to piece information together to figure it out.&lt;/p&gt;

&lt;p&gt;So I'm going to do a small series on this.&lt;/p&gt;

&lt;p&gt;Things you will need!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://pivotal.github.io/jasmine/"&gt;Jasmine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://phantomjs.org/"&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Setup PhantomJS&lt;/h2&gt;

&lt;p&gt;To run JavaScript tests without a browser, we need PhantomJS, and we need to wire it up into Resharper.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Download PhantomJS and unzip it somewhere, I put it in my development folder. Next open up ReSharper Options:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-01.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the Unit Testing &gt; JavaScript Tests and set the PhantomJS path to the &lt;code&gt;.exe&lt;/code&gt; where you unzipped it to:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-02.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Save all that and PhantomJS will be all setup and ready to run out tests!&lt;/p&gt;

&lt;h2&gt;Folder Setup&lt;/h2&gt;

&lt;p&gt;In Visual Studio create a new &lt;code&gt;Empty Project&lt;/code&gt;, or something similar, add some folders, naming isn't important but I've stuck with &lt;code&gt;dependencies&lt;/code&gt; for things like Jasmine, &lt;code&gt;sources&lt;/code&gt; for the files we will be testing, and &lt;code&gt;specs&lt;/code&gt; for the Jasmine specs.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-03.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;jasmine.js&lt;/code&gt; file into the dependencies folder, and create two empty files for &lt;code&gt;Calculator.js&lt;/code&gt; and &lt;code&gt;CalculatorSpec.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will create a super simple calculator that's only capable of multiplying two numbers. There's lots of Jasmine examples so I'm not going to bore you with those details. &lt;/p&gt;

&lt;h2&gt;Our first basic test&lt;/h2&gt;

&lt;p&gt;Lets start by adding a basic test in our &lt;code&gt;CalculatorSpec.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;///&amp;lt;reference path="~/dependencies/jasmine.js"/&amp;gt;
///&amp;lt;reference path="~/sources/Calculator.js"/&amp;gt;

describe("Calculator", function () {
    var calculator = new Calculator();

    it("should multiple two positive numbers", function () {
        var result = calculator.multiple(2, 5);

        expect(result).toBe(10);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's break this down, at the top I have some 'reference path' comments, then I have the actual test. The reference paths is what got me initially when trying to get this working.&lt;/p&gt;

&lt;p&gt;Its a Visual Studio thing which gives intellisense, but it also allows ReSharper to find the files when running the unit tests. Without it the tests fail. &lt;/p&gt;

&lt;p&gt;So if we run this test now...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-04.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We have no implementation, so lets implement!&lt;/p&gt;

&lt;p&gt;Lets create a new function for the &lt;code&gt;Calculator&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-05.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now its undefined on the function call &lt;code&gt;multiple&lt;/code&gt;, so lets add it in, but lets return a hard coded value of -100&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function() {
        return -100;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-06.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Almost there, now lets multiple two values together!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var Calculator = function() {
    this.multiple = function(valueOne, valueTwo) {
        return valueOne * valueTwo;
    };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;BAM it passes!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jasmine-01-07.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Our first test without a browser.&lt;/p&gt;

&lt;p&gt;Next up I'll show you how you can also test with a browser, and how to reference files in a separate project.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/semantic-ui-and-angularjs-basic-registration-form-with-validation/</guid><link>http://www.philliphaydon.com/2013/10/semantic-ui-and-angularjs-basic-registration-form-with-validation/</link><a10:author><a10:name /></a10:author><category>AngularJS</category><category>Semantic-UI</category><title>Semantic-UI &amp; AngularJS - Basic Registration Form with Validation</title><description>&lt;p&gt;Last week I saw a tweet about Semantic-UI, which I had not heard about, I guess it's relatively new. I decided to take a look and to be honest. I love what I see.&lt;/p&gt;

&lt;p&gt;So to get rolling I decided to create a basic registration form for a personal project using it. &lt;/p&gt;

&lt;h2&gt;What is Semantic UI&lt;/h2&gt;

&lt;p&gt;Well, for starters, its a rather large library :| coming in total at a whopping 333kb for just the minified CSS an JavaScript.&lt;/p&gt;

&lt;p&gt;That's not including the Fonts &lt;em&gt;(roughly 50kb, unless you like SVG which is 194kb, but who the hell uses that crap)&lt;/em&gt;, Images which are about 3-10kb, though you probably only use 1 or 2 per app depending on what you're doing. These are all loading gifs, all other images are... well done using Font-Awesome. Which happens to be rolled into the library.&lt;/p&gt;

&lt;p&gt;But for what the library does, its pretty damn impressive. &lt;/p&gt;

&lt;p&gt;The idea is that Semantic is a more fluent and structured way to writing a web application, rather than naming stuff poorly like Bootstrap does with things like &lt;code&gt;col-lg-4&lt;/code&gt;, Semantic opts for &lt;code&gt;column&lt;/code&gt;. This is both good and bad. The examples on their homepage are more semantic, but at the cost of either writing less or more code in order to describe the UI elements in the markup. &lt;/p&gt;

&lt;p&gt;Reading the examples is awesome, in fact I wanted to right align a button, I started out with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I thought "I want that floated right, it would look better...", and I ended up with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button floated right&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You end up writing lots but instead of shifting around in CSS to figure out how to move it from left to right, I just described it. Sure enough, button sat on the right hand side!&lt;/p&gt;

</description><pubDate>Fri, 04 Oct 2013 16:00:00 Z</pubDate><a10:updated>2013-10-04T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Last week I saw a tweet about Semantic-UI, which I had not heard about, I guess it's relatively new. I decided to take a look and to be honest. I love what I see.&lt;/p&gt;

&lt;p&gt;So to get rolling I decided to create a basic registration form for a personal project using it. &lt;/p&gt;

&lt;h2&gt;What is Semantic UI&lt;/h2&gt;

&lt;p&gt;Well, for starters, its a rather large library :| coming in total at a whopping 333kb for just the minified CSS an JavaScript.&lt;/p&gt;

&lt;p&gt;That's not including the Fonts &lt;em&gt;(roughly 50kb, unless you like SVG which is 194kb, but who the hell uses that crap)&lt;/em&gt;, Images which are about 3-10kb, though you probably only use 1 or 2 per app depending on what you're doing. These are all loading gifs, all other images are... well done using Font-Awesome. Which happens to be rolled into the library.&lt;/p&gt;

&lt;p&gt;But for what the library does, its pretty damn impressive. &lt;/p&gt;

&lt;p&gt;The idea is that Semantic is a more fluent and structured way to writing a web application, rather than naming stuff poorly like Bootstrap does with things like &lt;code&gt;col-lg-4&lt;/code&gt;, Semantic opts for &lt;code&gt;column&lt;/code&gt;. This is both good and bad. The examples on their homepage are more semantic, but at the cost of either writing less or more code in order to describe the UI elements in the markup. &lt;/p&gt;

&lt;p&gt;Reading the examples is awesome, in fact I wanted to right align a button, I started out with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I thought "I want that floated right, it would look better...", and I ended up with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ui blue submit button floated right&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You end up writing lots but instead of shifting around in CSS to figure out how to move it from left to right, I just described it. Sure enough, button sat on the right hand side!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Things used in this demo&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://semantic-ui.com"&gt;Semantic UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://angularjs.org"&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nancyfx.org"&gt;NancyFX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Nothing is complete without Nancy, but I'm not showing any Nancy stuff. I'm including it in-case I show the server side stuff. &lt;/p&gt;

&lt;h2&gt;Setup&lt;/h2&gt;

&lt;p&gt;Download the latest version of Semantic from the website and include the packages folder into your project.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And include them into your page...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="utf-8"&amp;gt;
  &amp;lt;title&amp;gt;DemoWebsite&amp;lt;/title&amp;gt;

  &amp;lt;link href="/content/semantic/css/semantic.min.css" rel="stylesheet" type="text/css"/&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

  &amp;lt;script src="/content/jquery-1.10.2.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="/content/semantic/javascript/semantic.min.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src="/content/angular.min.js"&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this, we should get a nice blank page :)&lt;/p&gt;

&lt;h2&gt;Creating the form&lt;/h2&gt;

&lt;p&gt;Lets start by writing some HTML for the form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="container"&amp;gt; 
  &amp;lt;h1&amp;gt;Register Now&amp;lt;/h1&amp;gt;

  &amp;lt;div class="ui form segment"&amp;gt;   
    &amp;lt;div class="two fields"&amp;gt;
      &amp;lt;div class="field"&amp;gt;
        &amp;lt;label for="GivenName"&amp;gt;Given Name&amp;lt;/label&amp;gt;
        &amp;lt;input id="GivenName" placeholder="Given Name" type="text" /&amp;gt;
      &amp;lt;/div&amp;gt;

      &amp;lt;div class="field"&amp;gt;
        &amp;lt;label for="Surname"&amp;gt;Surname&amp;lt;/label&amp;gt;
        &amp;lt;input id="Surname" placeholder="Surname" type="text"&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Email"&amp;gt;Email&amp;lt;/label&amp;gt;
      &amp;lt;input id="Email" placeholder="Email" type="text"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Username"&amp;gt;Username&amp;lt;/label&amp;gt;
      &amp;lt;input id="Username" placeholder="Username" type="text"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="Password"&amp;gt;Password&amp;lt;/label&amp;gt;
      &amp;lt;input id="Password" type="password"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="field"&amp;gt;
      &amp;lt;label for="PasswordConfirm"&amp;gt;Password Confirm&amp;lt;/label&amp;gt;
      &amp;lt;input id="PasswordConfirm" type="password"&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;button class="ui blue button"&amp;gt;Submit&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;    
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special, this is using the Semantic markup. The outer &lt;code&gt;container&lt;/code&gt; div is just a element I added to center the page. Without adding anything to the styling to change the look and feel, we get a page that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Doesn't look too bad.&lt;/p&gt;

&lt;h2&gt;Lets add some validation&lt;/h2&gt;

&lt;p&gt;Based on the documentation you can add validation in HTML, but I prefer to do it in JavaScript, so that's how I'll do it now :)&lt;/p&gt;

&lt;p&gt;First we need to find the form element, then call &lt;code&gt;.form(*validation*, *options*)&lt;/code&gt; on it to wire it up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script&amp;gt;

  (function ($) {
    $('.ui.form').form({        
      givenName: {
        identifier: 'GivenName',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your given name'
        }]
      },       
      surname: {
        identifier: 'Surname',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your surname'
        }]
      },       
      username: {
        identifier: 'Username',
        rules: [{
          type: 'empty',
          prompt: 'Please enter a username'
        }]
      },       
      email: {
        identifier: 'Email',
        rules: [{
          type: 'empty',
          prompt: 'Please enter your email'
        },{
          type: 'email',
          prompt: 'Please enter a valid email'
        }]
      },       
      password: {
        identifier: 'Password',
        rules: [{
          type: 'empty',
          prompt: 'Please enter a password'
        },{
          type: 'length[6]',
          prompt: 'Password needs to be atleast 6 characters long'
        }]
      },       
      passwordConfirm: {
        identifier: 'PasswordConfirm',
        rules: [{
          type: 'match[Password]',
          prompt: 'Password don\'t match'
        }]
      }
    }, {
      on: 'blur',
      inline: 'true'
    });
  }(jQuery));

&amp;lt;/script&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's break this up, first we have an array of validation rules. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;email: {
  identifier: 'Email',
  rules: [{
    type: 'empty',
    prompt: 'Please enter your email'
  },{
    type: 'email',
    prompt: 'Please enter a valid email'
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first part &lt;code&gt;email&lt;/code&gt; is the identifier in Semantic. &lt;/p&gt;

&lt;p&gt;The next bit of the identifier, this can match against either &lt;code&gt;id&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;data-validate&lt;/code&gt; attributes on the element. I picked the &lt;code&gt;id&lt;/code&gt; since I'm using &lt;code&gt;for&lt;/code&gt; on my labels.&lt;/p&gt;

&lt;p&gt;Next bit of the rules, which is an array of objects defining the type of validation, and the message to prompt the user with. This is somewhat the same as using jQuery Validate (except it works...)&lt;/p&gt;

&lt;p&gt;The second part is the settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  on: 'blur',
  inline: 'true'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part says we want validation to occur on blur, and we want it to be inline. &lt;/p&gt;

&lt;p&gt;This gives us the following effect.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we wanted to put all errors in a list at the bottom by adding &lt;code&gt;&amp;lt;div class="ui error message"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; to the bottom (or top) of the form.&lt;/p&gt;

&lt;p&gt;This would give us something like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Though the form will only display the messages at the bottom if you manually validate the form, or press submit. We haven't defined our button as a submit button, which I'll explain soon.&lt;/p&gt;

&lt;h2&gt;Let's create a Controller and get this validated!&lt;/h2&gt;

&lt;p&gt;So assuming you've setup your Angular App...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html lang="en" ng-app&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And set the controller...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui form segment" ng-controller="RegisterController"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now create our &lt;code&gt;RegisterController&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope) {
  $scope.register = function() {
    alert("Register was clicked!");
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice and simple. Wire up an Angular click event to the button...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button class="ui blue button" ng-click="register()"&amp;gt;Submit&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how the button doesn't define &lt;code&gt;submit&lt;/code&gt; class. If you put the &lt;code&gt;submit&lt;/code&gt;, Semantic will try and handle submission. We don't want that.&lt;/p&gt;

&lt;p&gt;Now if we click the button we should get a prompt:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next we want to check the form is valid. In the controller we can add a basic function to invoke validate on the Semantic form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope, $element) {
  var registrationForm = $($element);

  $scope.isInvalid = function() {
    return !registrationForm.form('validate form');
  };

  $scope.register = function () {
    if (this.isInvalid()) {
      return;
    }

    alert("Register was clicked!");
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we inject the &lt;code&gt;$element&lt;/code&gt; into the Controller, this gives us the current scope element the controller is attached to. Since we attached it to the form the scope for the form in Semantic and Angular is the same.&lt;/p&gt;

&lt;p&gt;This is a Angular object though, so we need to then convert it to a jQuery.&lt;/p&gt;

&lt;p&gt;Now we can implement the isInvalid method which will call &lt;code&gt;form&lt;/code&gt;, a jQuery plugin implemented by Semantic, and pass in the argument &lt;code&gt;validate form&lt;/code&gt; which tells it to... well validate the form.&lt;/p&gt;

&lt;p&gt;The result is true or false, and the UI will now show an invalid state.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we've got validation working! Woohoo!&lt;/p&gt;

&lt;p&gt;Next we need some data, so lets create an empty property on our scope to work with, this will be our model called &lt;code&gt;user&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function RegisterController($scope, $element) {
  var registrationForm = $($element);

  $scope.user = {};

  $scope.isInvalid = function() {
    return !registrationForm.form('validate form');
  };

  $scope.register = function () {
    if (this.isInvalid()) {
      return;
    }

    console.log(this.user);
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, lets update all the input fields to define the model we want to use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input id="GivenName" placeholder="Given Name" type="text" ng-model="user.givenname"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ng-model="user.surname"
ng-model="user.email"
ng-model="user.username"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the idea.&lt;/p&gt;

&lt;p&gt;Back to our form, we fill it in, hit submit...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nothing has happened, the form is valid, but we logged the user to the console, did we get anything?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We sure did!&lt;/p&gt;

&lt;h2&gt;Lets tidy up the form a little&lt;/h2&gt;

&lt;p&gt;So we want to make the input fields show they are required, at the moment there's no visual indication.&lt;/p&gt;

&lt;p&gt;Semantic allows us to put little icons in the corner, its super awesome and super simple.&lt;/p&gt;

&lt;p&gt;We will update our &lt;code&gt;input elements&lt;/code&gt; like so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui icon input"&amp;gt;
  &amp;lt;input id="GivenName" placeholder="Given Name" type="text" ng-model="user.givenname"&amp;gt;
  &amp;lt;i class="asterisk red icon"&amp;gt;&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we get some nice little asterisk's on each input.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;What about when we submit the form? We want to block the form UI until we are done. So we can add a loading to the form.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="ui inverted dimmer" ng-class="{true: 'active', false: 'disabled'}[loading]"&amp;gt;
  &amp;lt;div class="ui text loader"&amp;gt;Registering you now :)&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the top of the form, we add a new div with the classes for a loader. &lt;/p&gt;

&lt;p&gt;We include the &lt;code&gt;ng-class&lt;/code&gt; attribute so we can easily toggle the loading. Basically if the value &lt;code&gt;[loading]&lt;/code&gt; is true, it will set the &lt;code&gt;active&lt;/code&gt; class to the element, when false, it will set it to &lt;code&gt;disabled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now in our controller we can add.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$scope.loading = false;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And in our click event we can set it to true after before we submit everything, but after we verify its valid.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.register = function () {
  if (this.isInvalid()) {
    return;
  }

  this.loading = true;

  console.log(this.user);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Normally you would set it to false again, but I've left it as true to show the affect&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/semantic-ui-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And there we have it. &lt;/p&gt;

&lt;p&gt;We built:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Basic registration form&lt;/li&gt;
&lt;li&gt;Added basic validation&lt;/li&gt;
&lt;li&gt;Added some fancy mandatory icons&lt;/li&gt;
&lt;li&gt;Captured the click event with Angular&lt;/li&gt;
&lt;li&gt;Validated using Semantic&lt;/li&gt;
&lt;li&gt;Added a loading indicator blocking the form&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was the first thing I did putting the two together. I've messed around with Angular quite a bit, first time touching Semantic.&lt;/p&gt;

&lt;p&gt;It took me about 7-10 minutes to write the demo, and 2 hours to break it apart and write the blog post piece by piece.&lt;/p&gt;

&lt;p&gt;Hopefully people find it useful.&lt;/p&gt;

&lt;p&gt;I've put the project on &lt;a href="https://github.com/phillip-haydon/Demo-SemanticUIAngular"&gt;Github&lt;/a&gt; if you're interested in taking a look. There isn't much :)&lt;/p&gt;

&lt;p&gt;I love Semantic, and Angular... So so awesome :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/10/introducing-sandra-snow/</guid><link>http://www.philliphaydon.com/2013/10/introducing-sandra-snow/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><category>Snow</category><title>Introducing Sandra.Snow</title><description>&lt;p&gt;I've only been blogging since 2009, and my blog had gone through multiple iterations. I began on BlogEngine.NET, moved onto Wordpress, then was introduced to Jekyll. &lt;/p&gt;

&lt;p&gt;I loved Jekyll, but I personally found it fiddly, and people who I've spoken to have also found it fiddly, but are quiet happy after they had set it up.&lt;/p&gt;

&lt;p&gt;I really liked the idea, so I thought I would recreate it in .NET :) Because reinventing the wheel is fun!&lt;/p&gt;

&lt;h2&gt;Introducing Sandra.Snow&lt;/h2&gt;

&lt;p&gt;With the help of &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt;, I've managed release Snow. Using NancyFX we have created a small application that allows you to write Markdown Posts with Razor Layouts, which will be compiled static HTML files.&lt;/p&gt;

&lt;p&gt;Currently, besides my own, I'm aware of 3 other blogs running on Snow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jonathanchannon.com"&gt;blog.jonathanchannon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodejunkie.com/"&gt;thecodejunkie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.owenrumney.co.uk/"&gt;blog.owenrumney.co.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what is it? Basically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX.&lt;/p&gt;
&lt;/blockquote&gt;

</description><pubDate>Mon, 30 Sep 2013 16:00:00 Z</pubDate><a10:updated>2013-09-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've only been blogging since 2009, and my blog had gone through multiple iterations. I began on BlogEngine.NET, moved onto Wordpress, then was introduced to Jekyll. &lt;/p&gt;

&lt;p&gt;I loved Jekyll, but I personally found it fiddly, and people who I've spoken to have also found it fiddly, but are quiet happy after they had set it up.&lt;/p&gt;

&lt;p&gt;I really liked the idea, so I thought I would recreate it in .NET :) Because reinventing the wheel is fun!&lt;/p&gt;

&lt;h2&gt;Introducing Sandra.Snow&lt;/h2&gt;

&lt;p&gt;With the help of &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt;, I've managed release Snow. Using NancyFX we have created a small application that allows you to write Markdown Posts with Razor Layouts, which will be compiled static HTML files.&lt;/p&gt;

&lt;p&gt;Currently, besides my own, I'm aware of 3 other blogs running on Snow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.jonathanchannon.com"&gt;blog.jonathanchannon.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://thecodejunkie.com/"&gt;thecodejunkie.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.owenrumney.co.uk/"&gt;blog.owenrumney.co.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what is it? Basically:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sandra.Snow is a Jekyll inspired static site generation tool that can be run locally, as a CAAS(Compiler as a Service) or setup with Azure to build your site when your repository changes. It is built on top of NancyFX.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;The easiest way to getting started with Snow is to fork it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Sandra/Sandra.Snow.SnowTemplate"&gt;Sandra.Snow.SnowTemplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can fork the Snow Template repository, which is all setup and ready to go. Basically you fork it, run the &lt;code&gt;.bat&lt;/code&gt; file, and it will build the website into the current directory, and away you go.&lt;/p&gt;

&lt;p&gt;Push the fork back up to &lt;code&gt;gh-pages&lt;/code&gt; and you've got a site on GitHub pages :)&lt;/p&gt;

&lt;h2&gt;So what happening?!?&lt;/h2&gt;

&lt;p&gt;If you take a look at my blog repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/philliphaydon.com"&gt;https://github.com/phillip-haydon/philliphaydon.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was originally a Github Pages blog running on Jekyll, I've re-purposed it using the Sandra.Snow.SnowTemplate project.&lt;/p&gt;

&lt;p&gt;Basically in the root directory of the website are 4 key things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;./.nojekyll&lt;/li&gt;
&lt;li&gt;./CNAME&lt;/li&gt;
&lt;li&gt;./compile.snow.bat&lt;/li&gt;
&lt;li&gt;./Snow&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;.nojekyll&lt;/h3&gt;

&lt;p&gt;This is exactly what you think it is... it basically tells Github to not treat the site as a jekyll site. :) prevents me from receiving emails from Github.&lt;/p&gt;

&lt;h3&gt;CNAME&lt;/h3&gt;

&lt;p&gt;This file is super basic. It contains my blog URL. :)&lt;/p&gt;

&lt;h3&gt;compile.snow.bat&lt;/h3&gt;

&lt;p&gt;This file does two things. &lt;/p&gt;

&lt;p&gt;It executes &lt;a href="http://optipng.sourceforge.net"&gt;OptiPNG&lt;/a&gt; which is a little &lt;code&gt;.exe&lt;/code&gt; file which recompresses images to a smaller size. All my screen grabs are done using &lt;kbd&gt;PrtScn&lt;/kbd&gt; + Paint, so the &lt;code&gt;.png&lt;/code&gt; files are often larger than they should be. &lt;/p&gt;

&lt;p&gt;It may not be much, but my entire site is about 12mb of images, with the optimization its only 8.8mb. Github hosts my blog, but I'm more worried about end users downloading the images ASAP, especially if they are viewing on a mobile device.&lt;/p&gt;

&lt;p&gt;The second thing it executes is &lt;code&gt;Snow.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.\Snow\_compiler\Snow.exe config=.\Snow\ debug=true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This line tells it to execute Snow, and the location of the config file. &lt;/p&gt;

&lt;h3&gt;Snow&lt;/h3&gt;

&lt;p&gt;This directory is my actual un-compiled website. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/philliphaydon.com/tree/gh-pages/Snow"&gt;Github Snow Directory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In here is the actual exe under &lt;code&gt;_compiler&lt;/code&gt; and a snow.config file.&lt;/p&gt;

&lt;p&gt;The snow.config file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "siteUrl": "http://www.philliphaydon.com",
  "posts": "_posts",
  "layouts": "_layouts",
  "output": "../",
  "urlFormat": "yyyy/MM/slug",
  "directoryname": "",
  "copyDirectories": [
    "images/output =&amp;gt; images",
    "javascripts",
    "stylesheets",
    "stuffz"
  ],
  "processFiles": [{
    "file": "index.cshtml",
    "loop": "Posts"
  },{
    "file": "category.cshtml",
    "loop": "Categories"
  },{
    "file": "categories.cshtml =&amp;gt; category"
  },{
    "file": "archive.cshtml"
  },{
    "file": "about.cshtml"
  },{
    "file": "feed.xml",
    "loop": "RSS"
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's nothing special, it's just a JSON file. :)&lt;/p&gt;

&lt;p&gt;I specify where my posts are, where my layouts are, and where I want to output my site.&lt;/p&gt;

&lt;p&gt;This basically just generates all the markdown posts which live in &lt;code&gt;/Snow/_posts&lt;/code&gt;, then I have some additional files to process.&lt;/p&gt;

&lt;p&gt;Jekyll works by processing any file, but I personally don't like that. I opted for being specific and telling it what it should process. &lt;/p&gt;

&lt;h2&gt;Those markdown files!&lt;/h2&gt;

&lt;p&gt;The markdown files are similar to Jekyll, they use the same styled header like, well this blog post I'm writing right now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Introducing Sandra.Snow
categories: NancyFX, Snow
layout: post
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I ported my blog to Snow. I updated NONE of my markdown files. :) &lt;/p&gt;

&lt;p&gt;That's really all there is to it. &lt;/p&gt;

&lt;p&gt;The rest is just Markdown files, some Razor views, and a .exe&lt;/p&gt;

&lt;p&gt;It generates to the folder below by specifying the output as &lt;code&gt;../&lt;/code&gt;, but it preserves some folders. i.e it wont delete the .bat file, CNAME, .nojekyll, Snow, or .git/.svn&lt;/p&gt;

&lt;h2&gt;Stuff...&lt;/h2&gt;

&lt;p&gt;So that's it, I have some nifty little features too. I'm slowly detailing all this on the wiki. But the one I like most was inspired by a conversion with &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's the ability to specify a Series of posts:&lt;/p&gt;

&lt;p&gt;My blog series on setting up Mono on Azure/Ubuntu, has a special header in the markdown file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category: Azure
title: Setting up Mono on nginx
series:
    name: AzureMono
    current: 3
    part: Part 1 - Setting up the Virtual Machine and nginx
    part: Part 2 - Setting up new Website and Domain on nginx
    part: Part 3 - Setting up Mono on nginx
    part: Part 4 - Setting up a NancyFX website
    part: Part 5 - Setting up a ServiceStack web service
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each post has a 'series' and 3 key properties:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Name - specifies the unique identifier for the series.&lt;/p&gt;
  
  &lt;p&gt;Current - is the current index of the posts (its starting index is 1, not 0)&lt;/p&gt;
  
  &lt;p&gt;Part - the parts is a collection of all parts that will be in the series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Future posts will show without links, while past posts will show with the link they relate to.&lt;/p&gt;

&lt;p&gt;If you changed a future post name, it will take the current post's part name and use that, while previous post parts will be ignored. When the HTML files are generated they will be updated with the new series. Meaning you never need to go back and update old posts, or if they are far apart you don't have to hunt them down :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Well I hope you like Snow. So far I've had positive feedback, but if you choose to use it, I would love to hear what you use it for and any feedback, good or bad! Or post an issue on the repository.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/09/instant-nancy-web-development-book-review/</guid><link>http://www.philliphaydon.com/2013/09/instant-nancy-web-development-book-review/</link><a10:author><a10:name /></a10:author><category>Book Review</category><category>NancyFX</category><title>Instant Nancy Web Development - Book Review</title><description>&lt;p&gt;Just today, &lt;a href="https://twitter.com/chr_horsdal"&gt;Christian Horsdal&lt;/a&gt; released his first book, his first topic to write a book about, only the most awesome Web Framework to exist in .NET! :)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-book-review-1a.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;non affiliate links&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B00FF8OKP8"&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.packtpub.com/nancy-web-development/book"&gt;Packt Publishing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This book is rather short, clocking in at only 74 pages. Not to worry though, it covers quite a bit! &lt;/p&gt;

&lt;p&gt;Usually I don't go near Packt Publishing books after having a bad experience buying a few books, all of which were terrible. But seeing as this was a Nancy book I couldn't pass up the chance to check it out. &lt;/p&gt;

&lt;p&gt;Considering this is the first book Christian has written, it reads very well. I've read books from authors who have done 3 or 4 books and I struggle to read them because their style of writing. So that alone impressed me about this book.&lt;/p&gt;

</description><pubDate>Wed, 25 Sep 2013 16:00:00 Z</pubDate><a10:updated>2013-09-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Just today, &lt;a href="https://twitter.com/chr_horsdal"&gt;Christian Horsdal&lt;/a&gt; released his first book, his first topic to write a book about, only the most awesome Web Framework to exist in .NET! :)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-book-review-1a.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;non affiliate links&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B00FF8OKP8"&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.packtpub.com/nancy-web-development/book"&gt;Packt Publishing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This book is rather short, clocking in at only 74 pages. Not to worry though, it covers quite a bit! &lt;/p&gt;

&lt;p&gt;Usually I don't go near Packt Publishing books after having a bad experience buying a few books, all of which were terrible. But seeing as this was a Nancy book I couldn't pass up the chance to check it out. &lt;/p&gt;

&lt;p&gt;Considering this is the first book Christian has written, it reads very well. I've read books from authors who have done 3 or 4 books and I struggle to read them because their style of writing. So that alone impressed me about this book.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Not that the book is perfect, I took the opportunity to tweet him this image:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-book-review-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I shouldn't laugh though... my spelling is absolutely terrible!&lt;/p&gt;

&lt;p&gt;Right from Chapter One he gets into things, showing you just how little it takes to go from nothing, to a good old Hello World app, following onto Chapter Two he begins making a Todo Web App that's done doing TDD.&lt;/p&gt;

&lt;p&gt;This alone was really valuable to me, because he showed some little tips and tricks that I had never seen other people do before, showing how you can &lt;code&gt;Post&lt;/code&gt; and then &lt;code&gt;Get&lt;/code&gt; consecutively and assert the response. &lt;/p&gt;

&lt;p&gt;Mocking is demoed using FakeItEasy which I sometimes find a little hard to read, that's mostly due to having used Moq. But its great to see examples using another framework that I'm not entirely familiar with.&lt;/p&gt;

&lt;p&gt;The topics covered in this book are pretty vast. In-fact, here's the table of contents:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Building and running your first Nancy application&lt;/li&gt;
&lt;li&gt;Nancy testing&lt;/li&gt;
&lt;li&gt;Routes and model binding&lt;/li&gt;
&lt;li&gt;Taking a dependency - introducing the bootstrapper&lt;/li&gt;
&lt;li&gt;Content negotiation and more model binding&lt;/li&gt;
&lt;li&gt;Adding views&lt;/li&gt;
&lt;li&gt;Adding static content&lt;/li&gt;
&lt;li&gt;Hosting Nancy on the Cloud&lt;/li&gt;
&lt;li&gt;Handling cross-cutting concerns - Before, After, and Error hooks&lt;/li&gt;
&lt;li&gt;Authenticating users&lt;/li&gt;
&lt;li&gt;Separating applications and hosting&lt;/li&gt;
&lt;li&gt;Using async handlers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Complaints...&lt;/h2&gt;

&lt;p&gt;There isn't many, the only things I wish would change is the View chapter to come before Content Negotiation, this is mainly because I think people coming from MVC or Web Forms will want to view something in their browser quickly, while returning JSON/XML may not be immediately obvious to them, then explaining that Views are just another content type that is negotiated. &lt;/p&gt;

&lt;p&gt;Secondly is the use of Razor, little part of me wishes it showed the built in View Engine - Super Simple View Engine. Rather than diving directly into Razor. But this is personal opinion, its entirely possible users reading may care more about Razor. :) Granted it does mention at the end of that chapter what SSVE is and that you can implement your own or download others :)&lt;/p&gt;

&lt;p&gt;The hosting Nancy in the Cloud chapter doesn't make a lot of sense, its the only chapter that feels kinda out of place, it should focus less on the testing/deployment and more on getting the app up and running on a cloud provider.&lt;/p&gt;

&lt;p&gt;Hopefully no one takes my opinions/complaints the wrong way because I don't believe any of the things I've listed are reasons to not get the book!&lt;/p&gt;

&lt;h2&gt;Errors&lt;/h2&gt;

&lt;p&gt;These aren't so much as errors, just things that need to be updated.&lt;/p&gt;

&lt;p&gt;1) The chapter on Authenticating Users uses WorldDomination, which was renamed to SimpleAuthentication, all the rest still applies though.&lt;/p&gt;

&lt;p&gt;2) Async chapter uses the Beta packages and mentions that at the time of writing, it wasn't in release. This has now been released in 0.20.0 of Nancy.&lt;/p&gt;

&lt;p&gt;All things considering, those are pretty damn minor! &lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;This book is downright great, if you're new to Nancy, want to learn it, or have been using it for a while but don't feel 'expert', this is a great book and I highly recommend it!&lt;/p&gt;

&lt;p&gt;The book is short that I read it in a few hours, granted I have prior knowledge of Nancy so I didn't create the app while reading, but I did pick up a few little things I didn't know about, especially around Testing with Nancy.&lt;/p&gt;

&lt;p&gt;I enjoyed reading the book, so I hope you do too!&lt;/p&gt;

&lt;h2&gt;Want a copy? Comment below!&lt;/h2&gt;

&lt;p&gt;I'm going to gift 3 Kindle Copies of the book, if you would like a copy, comment or tweet the book with the hash-tag #nancyfx and I'll pick 3 people on the 4th of October. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(If you comment below, please use your real email address so I can contact you should you win, its only visible to me)&lt;/em&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/08/love-the-new-resharper-8-best-update-to-date/</guid><link>http://www.philliphaydon.com/2013/08/love-the-new-resharper-8-best-update-to-date/</link><a10:author><a10:name /></a10:author><category>ReSharper</category><title>Love the new ReSharper 8, best update to date!</title><description>&lt;p&gt;It was only little over a week ago that ReSharper 8 came out. It's not something that I really follow, but because of that I keep finding all these new features in R# 8 that are absolutely AWESOME!&lt;/p&gt;

&lt;p&gt;The R# team, if you see this. Congrats on such an awesome effort really pushing the boundaries of what R# can do with V8.  &lt;/p&gt;

&lt;h2&gt;ToString on Dates!&lt;/h2&gt;

&lt;p&gt;This is simply amazing, often I would throw up Google and search "stevex string format" and pull up a pretty detailed blog post on string formatting. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This single feature along, in my opinion, is worth the $ to upgrade to R# 8!!!! &lt;/p&gt;

</description><pubDate>Fri, 02 Aug 2013 16:00:00 Z</pubDate><a10:updated>2013-08-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;It was only little over a week ago that ReSharper 8 came out. It's not something that I really follow, but because of that I keep finding all these new features in R# 8 that are absolutely AWESOME!&lt;/p&gt;

&lt;p&gt;The R# team, if you see this. Congrats on such an awesome effort really pushing the boundaries of what R# can do with V8.  &lt;/p&gt;

&lt;h2&gt;ToString on Dates!&lt;/h2&gt;

&lt;p&gt;This is simply amazing, often I would throw up Google and search "stevex string format" and pull up a pretty detailed blog post on string formatting. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This single feature along, in my opinion, is worth the $ to upgrade to R# 8!!!! &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;It's not just dates though... It works with any .NET type that supports built-in &lt;code&gt;ToString(...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's epic!&lt;/p&gt;

&lt;h2&gt;Keyboard Shortcuts&lt;/h2&gt;

&lt;p&gt;This tricked me at first, but it seems all the keyboard shortcuts have been reduced down, before I would use the IntelliJ keys &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;N&lt;/kbd&gt; which would bring up the Type Search. Now it brings up Search Anything, and with a second press of &lt;kbd&gt;N&lt;/kbd&gt; it will bring up the Type Search. (Keys are &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;T&lt;/kbd&gt; if you're using Visual Studio keys)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is super handy, it feels like less keystrokes to learn, and a lot of the time I was finding myself searching Types, then trying Symbols, then trying Files. Now I can search all at once!&lt;/p&gt;

&lt;h2&gt;Plugin Manager&lt;/h2&gt;

&lt;p&gt;This is another amazingly awesome feature. With the success of Nuget, the R# team have created their own Plugin Manager using the Nuget platform since it's &lt;a href="http://nuget.codeplex.com"&gt;open source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The Extensions Manager opens up Jet Brains own Nuget type Dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/resharper8-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And bam it's that easy to install xUnit now. That plugin that used to be a pain in the ass to install, upgrade, etc. Now it's as simple as pressing &lt;code&gt;install&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;What else&lt;/h2&gt;

&lt;p&gt;These were the things I found myself among other little things, but &lt;a href="https://twitter.com/hhariri"&gt;@Hadi&lt;/a&gt; pointed me out to the Webinar Recording on What's New in ReSharper 8&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blogs.jetbrains.com/dotnet/2013/07/webinar-recording-whats-new-in-resharper-80/"&gt;http://blogs.jetbrains.com/dotnet/2013/07/webinar-recording-whats-new-in-resharper-80/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look, its the most impressive update so far.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/07/setting-up-a-servicestack-service/</guid><link>http://www.philliphaydon.com/2013/07/setting-up-a-servicestack-service/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setting up a ServiceStack Service</title><description>&lt;p&gt;Time to setup a ServiceStack service!&lt;/p&gt;

&lt;h2&gt;Prelude!&lt;/h2&gt;

&lt;p&gt;ServiceStack is great, specially when you need to support .NET 3.5 and don't have the pleasure of being able to use .NET 4.0/4.5, you're not limited to .NET 3.5, ServiceStack works great with .NET 4.0/4.5 as well!&lt;/p&gt;

&lt;p&gt;God forbid we get subjected to having to use WCF...&lt;/p&gt;

&lt;p&gt;Setting this up should be super easy, we will use all the same settings as NancyFX, the only difference is we will be running ServiceStack instead. &lt;/p&gt;

&lt;p&gt;The ServiceStack team take real care to ensure that it works on Mono, enough so that their website; &lt;a href="http://www.servicestack.net"&gt;http://www.servicestack.net&lt;/a&gt;, runs on Linux!&lt;/p&gt;

</description><pubDate>Sun, 14 Jul 2013 16:00:00 Z</pubDate><a10:updated>2013-07-14T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Time to setup a ServiceStack service!&lt;/p&gt;

&lt;h2&gt;Prelude!&lt;/h2&gt;

&lt;p&gt;ServiceStack is great, specially when you need to support .NET 3.5 and don't have the pleasure of being able to use .NET 4.0/4.5, you're not limited to .NET 3.5, ServiceStack works great with .NET 4.0/4.5 as well!&lt;/p&gt;

&lt;p&gt;God forbid we get subjected to having to use WCF...&lt;/p&gt;

&lt;p&gt;Setting this up should be super easy, we will use all the same settings as NancyFX, the only difference is we will be running ServiceStack instead. &lt;/p&gt;

&lt;p&gt;The ServiceStack team take real care to ensure that it works on Mono, enough so that their website; &lt;a href="http://www.servicestack.net"&gt;http://www.servicestack.net&lt;/a&gt;, runs on Linux!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Creating the Sample Project&lt;/h2&gt;

&lt;p&gt;One of the great things about ServiceStack is it has a bunch of awesome examples. Head on over to &lt;a href="https://github.com/ServiceStack/ServiceStack.Examples"&gt;https://github.com/ServiceStack/ServiceStack.Examples&lt;/a&gt; and download the samples. Either by downloading the repository, or cloning it. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After downloading the ServiceStack Examples, navigate to &lt;code&gt;src&lt;/code&gt; and open the &lt;code&gt;ServiceStack.Hello&lt;/code&gt; project. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Running this project we should end up with a small Service Stack sample website like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-3.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Quick local test&lt;/h2&gt;

&lt;p&gt;Navigating to the URL; &lt;code&gt;http://localhost:62577/servicestack/metadata&lt;/code&gt; we should get the nice meta data screen:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And navigating to the URL: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://localhost:62577/servicestack/hello/phillip&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We end up with a response:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We do need to make one minor change. In the root project of the folder, rename the &lt;code&gt;default.htm&lt;/code&gt; file to &lt;code&gt;index.html&lt;/code&gt;. This is only so we don't need to modify nginx to look for the default file &lt;code&gt;default.htm&lt;/code&gt; :) #lazyme&lt;/p&gt;

&lt;h2&gt;Lets deploy it!&lt;/h2&gt;

&lt;p&gt;So like the Nancy project, we can publish the project to a folder. The good thing about this sample is it doesn't need any database or anything like that. It's just a straight website with a Hello World service.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once deployed we should end up with the ServiceStack site again!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Navigating to the metadata page we end up with the same screen we had locally!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And navigating to the test URL we end up with the fancy ServiceStack response! &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-5-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Hello, with love from nginx!&lt;/p&gt;

&lt;p&gt;That's it, using the best web frameworks, NancyFX and ServiceStack, is super duper happy path easy with Mono!&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/07/setting-up-a-nancyfx-website/</guid><link>http://www.philliphaydon.com/2013/07/setting-up-a-nancyfx-website/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setting up a NancyFX website</title><description>&lt;p&gt;Time to setup NancyFX on Mono.&lt;/p&gt;

&lt;h2&gt;Prelude!&lt;/h2&gt;

&lt;p&gt;This series is done using Mono 2.10 and .NET 4.0. This wont work with a 4.5 project since we need Mono 3.0 for that, but I plan to do another series on building Mono from source since there's no package available yet.&lt;/p&gt;

&lt;p&gt;Also, this post assumes you've setup FTP to upload the files, I'm not going to go into detail, but you can install &lt;code&gt;vsftpd&lt;/code&gt; and Google the setup. If you're new to Linux and followed Parts 1-3 so far, it should be easy enough to setup and install. All you need to do is authenticate using sshftp or sftp, rather than normal ftp. &lt;/p&gt;

&lt;h2&gt;Creating a Nancy test project&lt;/h2&gt;

&lt;p&gt;The easiest way to create a test project is to grab the &lt;a href="http://visualstudiogallery.msdn.microsoft.com/f1e29f61-4dff-4b1e-a14b-6bd0d307611a"&gt;Nancy Templates&lt;/a&gt; from the Visual Studio Gallery. &lt;/p&gt;

&lt;p&gt;Using this method, we can create a new project in Visual Studio and select Nancy Application.&lt;/p&gt;

</description><pubDate>Wed, 03 Jul 2013 16:00:00 Z</pubDate><a10:updated>2013-07-03T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Time to setup NancyFX on Mono.&lt;/p&gt;

&lt;h2&gt;Prelude!&lt;/h2&gt;

&lt;p&gt;This series is done using Mono 2.10 and .NET 4.0. This wont work with a 4.5 project since we need Mono 3.0 for that, but I plan to do another series on building Mono from source since there's no package available yet.&lt;/p&gt;

&lt;p&gt;Also, this post assumes you've setup FTP to upload the files, I'm not going to go into detail, but you can install &lt;code&gt;vsftpd&lt;/code&gt; and Google the setup. If you're new to Linux and followed Parts 1-3 so far, it should be easy enough to setup and install. All you need to do is authenticate using sshftp or sftp, rather than normal ftp. &lt;/p&gt;

&lt;h2&gt;Creating a Nancy test project&lt;/h2&gt;

&lt;p&gt;The easiest way to create a test project is to grab the &lt;a href="http://visualstudiogallery.msdn.microsoft.com/f1e29f61-4dff-4b1e-a14b-6bd0d307611a"&gt;Nancy Templates&lt;/a&gt; from the Visual Studio Gallery. &lt;/p&gt;

&lt;p&gt;Using this method, we can create a new project in Visual Studio and select Nancy Application.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to make this a .NET 4.0 project, NOT a .NET 4.5 project. When running Mono 3.0 you can choose .NET 4.5.&lt;/p&gt;

&lt;p&gt;Once created press F5 and you should end up with a screen like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BUT, before we can publish, we need to update Nancy to the beta version (version 0.18.0) because 0.17.1 doesn't work on Mono 2.10. Hopefully if you're reading this shortly after its being published 0.18.0 will be out and you can.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Updating the Nuget Packages. We need to add the Nancy CI builds to out options.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we can remove the references from the project to &lt;code&gt;Nancy&lt;/code&gt; and &lt;code&gt;Nancy.Hosting.Aspnet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And now you can run the commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install-package Nancy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;install-package Nancy.Hosting.Aspnet&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-6.png" alt="" /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now we can publish the website. I'm just going to publish to the file system since this is a learning exercise. &lt;/p&gt;

&lt;h2&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Now that we've created and updated our Nancy project, published it. Now we can deploy it! &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So we can remove the html files we manually created in the previous posts, and deploy our Nancy website to the FTP. &lt;/p&gt;

&lt;h2&gt;Does it work?&lt;/h2&gt;

&lt;p&gt;If we visit the site now, most likely we will end up with:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is because we originally configured our fastcgi index to be &lt;code&gt;index.aspx&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Configure the default page&lt;/h2&gt;

&lt;p&gt;We can update our nginx configuration now, call &lt;code&gt;nano /etc/nginx/sites-available/default&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Remove the &lt;code&gt;index.aspx&lt;/code&gt; part so the index is just &lt;code&gt;/&lt;/code&gt; and nothing else.&lt;/p&gt;

&lt;p&gt;Now we can restart nginx to make sure the changes are picked up... &lt;code&gt;service nginx restart&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Now does it work?!?&lt;/h2&gt;

&lt;p&gt;Now we can give it a restart anddddddddddd.....&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-4-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM! Now we have Nancy... Running on Mono... on nginx... Ubuntu... on Azure...&lt;/p&gt;

&lt;p&gt;How awesome is that! &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/06/setting-up-mono-on-nginx/</guid><link>http://www.philliphaydon.com/2013/06/setting-up-mono-on-nginx/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setting up Mono on nginx</title><description>&lt;p&gt;Now we get to the fun stuff, getting up Mono. I'll be demoing with Mono 2.10 but after this series I may include a 6th part on how build Mono 3.0 from source and run it. &lt;/p&gt;

&lt;h2&gt;Setting up our test page&lt;/h2&gt;

&lt;p&gt;I figured we should start with setting up our test page. Something super simple, we will create a new page that outputs a bit of server side text. &lt;/p&gt;

&lt;p&gt;We wont deploy a bin folder or anything like that, it will be almost like deploying Classic ASP. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%@ Page Language="C#" AutoEventWireup="true" %&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head runat="server"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;% var test = "Hello World! Got an aspx page running on nginx!!!"; %&amp;gt;

    &amp;lt;%= test %&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we are just creating a variable named &lt;code&gt;test&lt;/code&gt; with some test data, then outputting it to the page. &lt;/p&gt;

</description><pubDate>Thu, 27 Jun 2013 16:00:00 Z</pubDate><a10:updated>2013-06-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Now we get to the fun stuff, getting up Mono. I'll be demoing with Mono 2.10 but after this series I may include a 6th part on how build Mono 3.0 from source and run it. &lt;/p&gt;

&lt;h2&gt;Setting up our test page&lt;/h2&gt;

&lt;p&gt;I figured we should start with setting up our test page. Something super simple, we will create a new page that outputs a bit of server side text. &lt;/p&gt;

&lt;p&gt;We wont deploy a bin folder or anything like that, it will be almost like deploying Classic ASP. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%@ Page Language="C#" AutoEventWireup="true" %&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head runat="server"&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
    &amp;lt;% var test = "Hello World! Got an aspx page running on nginx!!!"; %&amp;gt;

    &amp;lt;%= test %&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we are just creating a variable named &lt;code&gt;test&lt;/code&gt; with some test data, then outputting it to the page. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;We need to navigate to our site directory by calling &lt;code&gt;cd /var/www/phillip.pw&lt;/code&gt; followed by creating a new file in nano by calling &lt;code&gt;nano test.aspx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will open up a new nano window. Now you can type in the test code, or paste it in. Now we need to save it by calling &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;X&lt;/kbd&gt; followed by &lt;kbd&gt;Y&lt;/kbd&gt; and &lt;kbd&gt;Enter&lt;/kbd&gt;. Same thing we have been doing in the other parts. &lt;/p&gt;

&lt;h2&gt;Installing Mono&lt;/h2&gt;

&lt;p&gt;Now that our test page is ready, we can install Mono by calling &lt;code&gt;apt-get install mono-complete&lt;/code&gt;, your window should now look like&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Hit &lt;kbd&gt;Y&lt;/kbd&gt; and &lt;kbd&gt;Enter&lt;/kbd&gt;, and let it install... this could take a while.&lt;/p&gt;

&lt;p&gt;Next we want to install the fastcgi-mono-server4 package. So call &lt;code&gt;apt-get install mono-fastcgi-server4&lt;/code&gt; and install. This package is super small so will install quickly.&lt;/p&gt;

&lt;p&gt;To quickly test that Mono is installed call &lt;code&gt;mono -V&lt;/code&gt; you should get something like so&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-2.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Configuring our website!&lt;/h2&gt;

&lt;p&gt;We need to head on over to the nginx server configuration. So call &lt;code&gt;cd /etc/nginx/sites-available&lt;/code&gt; followed by &lt;code&gt;nano default&lt;/code&gt; so we can edit our site to use the fastcgi stuff.&lt;/p&gt;

&lt;p&gt;We need to add the fastcgi stuff, its important to note the include path. If you remember from Part 1 I mentioned the &lt;code&gt;fastcgi_params&lt;/code&gt; file, well we need to point to that file. We will modify that next.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    # the port the site is listening on
    listen 80;

    # the hostname
    server_name *.phillip.pw;

    # the path to where we host the site
    root /var/www/phillip.pw;

    # the default page
    index index.html;

    location / {
        fastcgi_index /index.html;
        fastcgi_pass 127.0.0.1:9000;
        include /etc/nginx/fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;Note how the fastcgi stuff is put into a location followed by a forward slash to indicate that its location is the root. If you put it in the root of server (with no location scope) you will end up with nginx throwing an error like&lt;/span&gt; &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;root@mono-sample-ph:/var/log/mono# nginx
  nginx: [emerg] "fastcgi_pass" directive is not allowed here in /etc/nginx/sites-enabled/default:34&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save the file and exit. &lt;/p&gt;

&lt;p&gt;Now drop down 1 level by calling &lt;code&gt;cd ..&lt;/code&gt; and then calling &lt;code&gt;ls&lt;/code&gt; to view the directory listing.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We need to modify the fastcgi_params file, we open it up in nano... &lt;code&gt;nano fastcgi_params&lt;/code&gt; and we need to add the two following lines of code to the bottom of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastcgi_param   PATH_INFO               "";
fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you should end up with something like&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Save and exit that file. &lt;/p&gt;

&lt;h2&gt;Setting up the Mono Site&lt;/h2&gt;

&lt;p&gt;So we need to configure a site in Mono as well. This part was a little confusing for me initially. Basically we need to create all of this manually.&lt;/p&gt;

&lt;p&gt;Head back to &lt;code&gt;cd /etc&lt;/code&gt; and call &lt;code&gt;ls&lt;/code&gt;, in here you should see an file called &lt;code&gt;init.d&lt;/code&gt;. Some tutorials on the internet show this file in &lt;code&gt;/etc/rc.d/init.d&lt;/code&gt; but this is actually because some versions of Linux put it in 1 place, while other versions put it in the other. And I think those who put it in &lt;code&gt;rc.d&lt;/code&gt; do a syslink to the root &lt;code&gt;init.d&lt;/code&gt; version. &lt;/p&gt;

&lt;p&gt;In any-case on Ubuntu, &lt;code&gt;rc.d&lt;/code&gt; does not exist. So we want to navigate into &lt;code&gt;init.d&lt;/code&gt; so call &lt;code&gt;cd init.d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new directory in here called &lt;code&gt;mono-fastcgi&lt;/code&gt; by calling &lt;code&gt;mkdir mono-fastcgi&lt;/code&gt; and then navigate to it.&lt;/p&gt;

&lt;p&gt;Here we want to create a Web App file, this is a configuration file for our site.&lt;/p&gt;

&lt;p&gt;Create a new file with nano... &lt;code&gt;nano phillip.pw.webapp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Write the following text into the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;apps&amp;gt;
&amp;lt;web-application&amp;gt;
        &amp;lt;name&amp;gt;phillip.pw&amp;lt;/name&amp;gt;
        &amp;lt;vhost&amp;gt;*&amp;lt;/vhost&amp;gt;
        &amp;lt;vport&amp;gt;80&amp;lt;/vport&amp;gt;
        &amp;lt;vpath&amp;gt;/&amp;lt;/vpath&amp;gt;
        &amp;lt;path&amp;gt;/var/www/phillip.pw&amp;lt;/path&amp;gt;
&amp;lt;/web-application&amp;gt;
&amp;lt;/apps&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these names and paths should be familiar if you've been following from Parts 1/2&lt;/p&gt;

&lt;h2&gt;Setting up the log files&lt;/h2&gt;

&lt;p&gt;Now we need to navigate to &lt;code&gt;cd /var/log&lt;/code&gt; and create a new directory called mono &lt;code&gt;mkdir mono&lt;/code&gt;, navigate into the directory, &lt;code&gt;cd mono&lt;/code&gt;, and create a new file called &lt;code&gt;fastcgi.log&lt;/code&gt;. To create a new file just call &lt;code&gt;&amp;gt; fastcgi.log&lt;/code&gt; which will create a new empty file.&lt;/p&gt;

&lt;h2&gt;Registering fastcgi-mono-server&lt;/h2&gt;

&lt;p&gt;Lastly we need to configure the server. We can start the FastCGI background process by calling&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastcgi-mono-server4 --appconfigdir /etc/init.d/mono-fastcgi /socket=tcp:127.0.0.1:9000 /logfile=/var/log/mono/fastcgi.log &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(if it's hard to scroll, here's the same line broken down into pieces)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fastcgi-mono-server4 
    --appconfigdir /etc/init.d/mono-fastcgi 
    /socket=tcp:127.0.0.1:9000 
    /logfile=/var/log/mono/fastcgi.log &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the paths match those we just created.&lt;/p&gt;

&lt;p&gt;You should have a terminal that looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now give nginx a restart by calling &lt;code&gt;service nginx restart&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;The big test&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-3-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM Just like that we now have an ASPX page running on Mono, on nginx, on Ubuntu, on Azure! &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/06/setting-up-a-new-website-and-domain-on-nginx/</guid><link>http://www.philliphaydon.com/2013/06/setting-up-a-new-website-and-domain-on-nginx/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setting up new Website and Domain on nginx</title><description>&lt;p&gt;The purpose of series is to be able to create an end-to-end setup of a Linux Server on Azure and deploy a brand new production NancyFX website or ServiceStack service, and not get confused in-between. Like I was when I sussed all this out. :)&lt;/p&gt;

&lt;h2&gt;Prelude&lt;/h2&gt;

&lt;p&gt;When using IIS I think it's safe to say a large majority of us would use the GUI to configure or create new Web Sites. Even though it's actually possible to create a new website and configure it entirely through Powershell.&lt;/p&gt;

&lt;p&gt;But, as scary as it sounds it's not too hard to configure a new Website in nginx. I actually think its easier than doing it with Apache, despite the fact that they are relatively similar. &lt;/p&gt;

</description><pubDate>Wed, 26 Jun 2013 16:00:00 Z</pubDate><a10:updated>2013-06-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;The purpose of series is to be able to create an end-to-end setup of a Linux Server on Azure and deploy a brand new production NancyFX website or ServiceStack service, and not get confused in-between. Like I was when I sussed all this out. :)&lt;/p&gt;

&lt;h2&gt;Prelude&lt;/h2&gt;

&lt;p&gt;When using IIS I think it's safe to say a large majority of us would use the GUI to configure or create new Web Sites. Even though it's actually possible to create a new website and configure it entirely through Powershell.&lt;/p&gt;

&lt;p&gt;But, as scary as it sounds it's not too hard to configure a new Website in nginx. I actually think its easier than doing it with Apache, despite the fact that they are relatively similar. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Where are sites configured?!?&lt;/h2&gt;

&lt;p&gt;The nginx configuration files are in &lt;code&gt;/etc&lt;/code&gt;. The etc directory is for all system related configuration files. &lt;/p&gt;

&lt;p&gt;To learn about Linux Filesystem Hierarchy, you can read about them here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/"&gt;http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigate to the nginx directory by running the command &lt;code&gt;cd /etc/nginx&lt;/code&gt; once you reach the nginx directory run the command &lt;code&gt;ls&lt;/code&gt; to see what's in the directory.&lt;/p&gt;

&lt;p&gt;The directory listing should look something like.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The main things we will be touching in here are &lt;code&gt;sites-available&lt;/code&gt; and &lt;code&gt;fastcgi_params&lt;/code&gt;, though the &lt;code&gt;fastcgi_params&lt;/code&gt; will be in part 3 when we setup Mono. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;fastcgi_params&lt;/code&gt; is a configuration file, while the &lt;code&gt;sites-available&lt;/code&gt; is a folder. Navigate to the folder by calling &lt;code&gt;cd sites-available&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In here if you call &lt;code&gt;ls&lt;/code&gt; you will see there's only 1 file called default. This is the default configuration file, we could add more for nginx but to keep things simple we will simply append our website to this file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now open the file in nano by calling &lt;code&gt;nano default&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can see there's a &lt;code&gt;server&lt;/code&gt; defined which sort of looks like json. I don't actually know what this formatting is called but it's simply a configuration name with either a value(s) or a scope (defined with braces)&lt;/p&gt;

&lt;p&gt;The existing server is setup for localhost. We can add our own, so above the server we want to add the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
  # the port the site is listening on
  listen 80;

  # the hostname
  server_name phillip.pw;

  # the path to where we host the site
  root /var/www/phillip.pw;

  # the default page
  index index.html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should end up with your terminal looking like&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to save the file. Do this by pressing &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;X&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;It should then confirm you want to make the changes.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;kbd&gt;Y&lt;/kbd&gt; to accept the changes, then press &lt;kbd&gt;Enter&lt;/kbd&gt; to confirm the filename. Don't change the filename!!!&lt;/p&gt;

&lt;p&gt;Now you should be back at the terminal. &lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If it says you don't have permission to change the file then you're not a root user or you didn't run nano as a root user by prefixing the command with &lt;code&gt;sudo&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Creating the site directory&lt;/h2&gt;

&lt;p&gt;For the configuration we put the root as &lt;code&gt;/var/www/phillip.pw&lt;/code&gt;, this path shouldn't exist yet (except for var) Based on my reading of the Linux Filesystem, this seemed like the best place to put it. If someone disagrees or knows where it should go please leave a comment.&lt;/p&gt;

&lt;p&gt;Navigate to var by calling &lt;code&gt;cd /var&lt;/code&gt;, then calling &lt;code&gt;ls&lt;/code&gt;, you should see there is no &lt;code&gt;www&lt;/code&gt; folder. So lets create one by calling &lt;code&gt;mkdir www&lt;/code&gt;, navigate to the directory; &lt;code&gt;cd www&lt;/code&gt;. And make the next directory; &lt;code&gt;mkdir phillip.pw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your console should look something like this&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-6.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The test file&lt;/h2&gt;

&lt;p&gt;Now that we are inside our hosting directory we need to create a test file. Call &lt;code&gt;nano index.html&lt;/code&gt; which will open up a new nano with nothing in it.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Here we can throw some basic HTML in that looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;Our test page!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Hello World from nginx! Our test page works!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing fancy. You can also write this in notepad and then right click on the terminal which will automatically paste the content in.&lt;/p&gt;

&lt;p&gt;Next hit &lt;kbd&gt;CTRL&lt;/kbd&gt; + &lt;kbd&gt;X&lt;/kbd&gt; to exit, then &lt;kbd&gt;Y&lt;/kbd&gt; followed by &lt;kbd&gt;Enter&lt;/kbd&gt; to accept the changes and save the file.&lt;/p&gt;

&lt;p&gt;Bam we're done! (almost)&lt;/p&gt;

&lt;h2&gt;Update your domain name!&lt;/h2&gt;

&lt;p&gt;Lastly we need to update our domain host records. I'm using &lt;www.namecheap.com&gt; for my hosting. Create a new &lt;code&gt;A&lt;/code&gt; record for the domain we defined in our site configuration; &lt;code&gt;phillip.pw&lt;/code&gt; using the IP from the Azure portal.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Be sure to copy the PUBLIC Virtual IP, and not the Internal IP. Otherwise you may get angry when things don't work when they should. :)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Save the changes to your domain host records. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Running a quick ping test in Windows Command Prompt should resolve to the correct IP.&lt;/p&gt;

&lt;h2&gt;The BIG Test&lt;/h2&gt;

&lt;p&gt;So, does it all work?!?&lt;/p&gt;

&lt;p&gt;Navigating to the website &lt;code&gt;http://phillip.pw&lt;/code&gt; yields:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-part-2-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Yay! &lt;/p&gt;

&lt;h2&gt;What else?&lt;/h2&gt;

&lt;p&gt;So we only configured the domain &lt;code&gt;phillip.pw&lt;/code&gt;, but what if we want both that and &lt;code&gt;www.phillip.pw&lt;/code&gt;. We can update the servername to &lt;code&gt;*.phillip.pw&lt;/code&gt; which will wild-card.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# the hostname
server_name *.phillip.pw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if we want to be more specific we can do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# the hostname
server_name www.phillip.pw phillip.pw;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will only work for the domain and the &lt;code&gt;www&lt;/code&gt; sub domain. &lt;/p&gt;

&lt;p&gt;That's all there is to it. Next up... Mono! :D&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/06/setting-up-ubuntu-and-nginx-on-azure/</guid><link>http://www.philliphaydon.com/2013/06/setting-up-ubuntu-and-nginx-on-azure/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setting up Ubuntu and nginx on Azure</title><description>&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm breaking this up into 5 parts because otherwise it gets far too long :(&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So after spending a week with OSX, I thought I would see how well I go with setting up Mono on Ubuntu... on Azure. &lt;/p&gt;

&lt;p&gt;Turns out it's actually rather simple!&lt;/p&gt;

&lt;h2&gt;Setting up the Virtual Machine&lt;/h2&gt;

&lt;p&gt;Setting up the virtual machine is pretty straight forward. From the Azure Portal, click the Virtual Machines tab, and select New. &lt;/p&gt;

&lt;p&gt;I create mine from the gallery rather than the quick option.&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Ubuntu Server 13.04&lt;/code&gt; from the options, give your new server a name. For Authentication I recommend making a password rather than uploading an SSH key. Only because if you're new or trying this out just to play around, that stuff is probably too difficult for now :)&lt;/p&gt;

</description><pubDate>Tue, 25 Jun 2013 16:00:00 Z</pubDate><a10:updated>2013-06-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm breaking this up into 5 parts because otherwise it gets far too long :(&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So after spending a week with OSX, I thought I would see how well I go with setting up Mono on Ubuntu... on Azure. &lt;/p&gt;

&lt;p&gt;Turns out it's actually rather simple!&lt;/p&gt;

&lt;h2&gt;Setting up the Virtual Machine&lt;/h2&gt;

&lt;p&gt;Setting up the virtual machine is pretty straight forward. From the Azure Portal, click the Virtual Machines tab, and select New. &lt;/p&gt;

&lt;p&gt;I create mine from the gallery rather than the quick option.&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Ubuntu Server 13.04&lt;/code&gt; from the options, give your new server a name. For Authentication I recommend making a password rather than uploading an SSH key. Only because if you're new or trying this out just to play around, that stuff is probably too difficult for now :)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click next (the little arrow thing) and setup as a Stand-Alone Virtual Machine. Name it and select a region, Next, and bam you're done.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once the provisioning is complete, you need to click on the Virtual Machine, and select Endpoints. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Create a new endpoint for port 80.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is so the websites are publicly accessible.&lt;/p&gt;

&lt;h2&gt;Logging into Ubuntu!&lt;/h2&gt;

&lt;p&gt;Unlike Windows Server, there's no desktop for us to RDP into, we could add it, but we wont... There's no need to :)&lt;/p&gt;

&lt;p&gt;First things first, we need to download PuTTY. So head on over to &lt;a href="http://www.putty.org"&gt;http://www.putty.org&lt;/a&gt; and &lt;a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html"&gt;download PuTTY&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When you've downloaded it, run it up, and... switch back to the Azure Portal, to the Dashboard. On the &lt;code&gt;quick glance&lt;/code&gt; section on the right hand side. Find the &lt;code&gt;SSH DETAILS&lt;/code&gt; piece.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter the address into the PuTTY details:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And select &lt;code&gt;option&lt;/code&gt;. You should get a console type window now that looks like.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Login using the details you created when creating the Virtual Machine, and if successful you should get a wall of text.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;login as: phillip
  phillip@mono-sample-ph.cloudapp.net's password:&lt;/p&gt;
  
  &lt;p&gt;The programs included with the Ubuntu system are free software;
  the exact distribution terms for each program are described in the
  individual files in /usr/share/doc/*/copyright.&lt;/p&gt;
  
  &lt;p&gt;Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
  applicable law.&lt;/p&gt;
  
  &lt;p&gt;Welcome to Ubuntu 13.04 (GNU/Linux 3.8.0-25-generic x86_64)&lt;/p&gt;
  
  &lt;ul&gt;
  &lt;li&gt;&lt;p&gt;Documentation:  https://help.ubuntu.com/&lt;/p&gt;
  
  &lt;p&gt;System information as of Wed Jun 26 14:46:18 UTC 2013&lt;/p&gt;
  
  &lt;p&gt;System load:  0.02              Processes:           93
  Usage of /:   3.1% of 28.79GB   Users logged in:     0
  Memory usage: 8%                IP address for eth0: 10.78.154.86
  Swap usage:   0%&lt;/p&gt;
  
  &lt;p&gt;Graph this data and manage this system at https://landscape.canonical.com/&lt;/p&gt;
  
  &lt;p&gt;Get cloud support with Ubuntu Advantage Cloud Guest:
  http://www.ubuntu.com/business/services/cloud&lt;/p&gt;
  
  &lt;p&gt;Use Juju to deploy your cloud instances and workloads:
  https://juju.ubuntu.com/#cloud-raring&lt;/p&gt;&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;0 packages can be updated.
  0 updates are security updates.&lt;/p&gt;
  
  &lt;p&gt;phillip@mono-sample-ph:~$&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, type in the command &lt;code&gt;sudo -s&lt;/code&gt;, and enter your password again.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will set the current user to a super user so we don't need to call &lt;code&gt;sudo&lt;/code&gt; with every command, which can get a little frustrating after a while.&lt;/p&gt;

&lt;h2&gt;Setup nginx&lt;/h2&gt;

&lt;p&gt;Before we setup nginx, run the command &lt;code&gt;apt-get update&lt;/code&gt;. This downloads all the package lists from the repositories and updates the information with the newest versions of the packages and their dependencies. &lt;/p&gt;

&lt;p&gt;Now, run the command &lt;code&gt;apt-get install nginx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; and hit &lt;kbd&gt;enter&lt;/kbd&gt;, and it will download the package and install.&lt;/p&gt;

&lt;p&gt;Next, run the command &lt;code&gt;service nginx restart&lt;/code&gt;, this should say the service is restarting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@mono-sample-ph:~# service nginx restart
 * Restarting nginx nginx                                                [ OK ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, run the command &lt;code&gt;ls&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@mono-sample-ph:~# ls
root@mono-sample-ph:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you haven't change the directory then it should be currently empty. So now we can run the command &lt;code&gt;wget http://localhost&lt;/code&gt; which will issue a request to the &lt;code&gt;localhost&lt;/code&gt; domain and download the HTML file.&lt;/p&gt;

&lt;p&gt;You should end up with your command-line looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@mono-sample-ph:~# wget http://localhost
--2013-06-26 15:07:43--  http://localhost/
Resolving localhost (localhost)... 127.0.0.1
Connecting to localhost (localhost)|127.0.0.1|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 612 [text/html]
Saving to: âindex.htmlâ

100%[======================================&amp;gt;] 612         --.-K/s   in 0s

2013-06-26 15:07:43 (56.7 MB/s) - âindex.htmlâ saved [612/612]

root@mono-sample-ph:~# ls
index.html
root@mono-sample-ph:~#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see when running &lt;code&gt;ls&lt;/code&gt; again there's now a file called index.html. We can take a quick look at that by running &lt;code&gt;nano index.html&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Nano is a text editor that is installed on Ubuntu by default. To exit out of Nano once you're done looking press &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;x&lt;/kbd&gt; which will close Nano and return you to the command-line.&lt;/p&gt;

&lt;p&gt;For a good beginners guide take a look at &lt;a href="http://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/"&gt;The Beginner’s Guide to Nano, the Linux Command-Line Text Editor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/setup-mono-on-ubuntu-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we can see that nginx is setup and running!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/06/making-nuget-a-little-easier-to-use-with-an-alias-on-mono-and-osx/</guid><link>http://www.philliphaydon.com/2013/06/making-nuget-a-little-easier-to-use-with-an-alias-on-mono-and-osx/</link><a10:author><a10:name /></a10:author><category>OSX and Mono</category><title>Making NuGet a little easier to use with an Alias</title><description>&lt;p&gt;So I've been in hospital all week with Mycoplasma Infection (or AIDs, doctor says otherwise tho), and figured it would be a good time to mess around with Mono. &lt;/p&gt;

&lt;p&gt;So I began by testing WorldDomination.Web.Authentication&lt;/p&gt;

&lt;p&gt;While it works GREAT! (Future post maybe) I did run into one issue early on, that is restoring packages. &lt;/p&gt;

&lt;p&gt;I found a &lt;a href="http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/"&gt;great post&lt;/a&gt; by &lt;a href="https://twitter.com/orientman"&gt;&amp;#64;orientman&lt;/a&gt; about using NuGet on OSX.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/"&gt;http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I didn't like having to type the following out each time, since I needed to install a few different project packages.&lt;/p&gt;

</description><pubDate>Thu, 20 Jun 2013 16:00:00 Z</pubDate><a10:updated>2013-06-20T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So I've been in hospital all week with Mycoplasma Infection (or AIDs, doctor says otherwise tho), and figured it would be a good time to mess around with Mono. &lt;/p&gt;

&lt;p&gt;So I began by testing WorldDomination.Web.Authentication&lt;/p&gt;

&lt;p&gt;While it works GREAT! (Future post maybe) I did run into one issue early on, that is restoring packages. &lt;/p&gt;

&lt;p&gt;I found a &lt;a href="http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/"&gt;great post&lt;/a&gt; by &lt;a href="https://twitter.com/orientman"&gt;&amp;#64;orientman&lt;/a&gt; about using NuGet on OSX.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/"&gt;http://orientman.wordpress.com/2012/12/29/for-the-record-how-to-run-nuget-exe-on-os-x-mountain-lion/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I didn't like having to type the following out each time, since I needed to install a few different project packages.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;mono --runtime=v4.0.30319 NuGet.exe install ./Code/WorldDomination.Web.Authentication/packages.config -OutputDirectory ./packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the time, it seemed tedious. So what I did was, moved the NuGet.exe to &lt;code&gt;~/Tools/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mono-osx-alias-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next in &lt;a href="http://www.iterm2.com/"&gt;iTerm 2&lt;/a&gt; (I prefer it over Terminal) I set an alias for the common stuff!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias nuget='mono --runtime=v4.0.30319 /Users/phillip/Tools/NuGet.exe'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now rather than having to type out all that stuff each time, I can just type out &lt;code&gt;nuget&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nuget install ./Code/WorldDomination.Web.Authentication/packages.config -OutputDirectory ./packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mono-osx-alias-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It also means I can forget about the NuGet.exe file or where I've put it :D&lt;/p&gt;

&lt;p&gt;If you want to check what aliases you have you can run &lt;code&gt;alias -p&lt;/code&gt;, and if you want to remove the alias you can call &lt;code&gt;unalias *name*&lt;/code&gt;, e.g &lt;code&gt;unalias nuget&lt;/code&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/05/nancyfx-hosting-with-owin/</guid><link>http://www.philliphaydon.com/2013/05/nancyfx-hosting-with-owin/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX - Hosting with OWIN</title><description>&lt;p&gt;By now you've probably heard of OWIN, its slowly becoming more and more popular, hell even ThoughtWorks mentioned them on their &lt;a href="http://www.thoughtworks.com/radar"&gt;Radar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to know what OWIN is, head on over to Paul Glavich's blog post on &lt;a href="http://weblogs.asp.net/pglavich/"&gt;Owin, Katana, and getting started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question of running NancyFX with Owin has been popping up more often lately so I figured I would show you how to get setup. &lt;/p&gt;

&lt;h2&gt;Codez - Project Setup&lt;/h2&gt;

&lt;p&gt;Lets start off by creating a brand new Empty Web Application:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once created you should get a semi long list of References...&lt;/p&gt;

</description><pubDate>Tue, 28 May 2013 16:00:00 Z</pubDate><a10:updated>2013-05-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;By now you've probably heard of OWIN, its slowly becoming more and more popular, hell even ThoughtWorks mentioned them on their &lt;a href="http://www.thoughtworks.com/radar"&gt;Radar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to know what OWIN is, head on over to Paul Glavich's blog post on &lt;a href="http://weblogs.asp.net/pglavich/"&gt;Owin, Katana, and getting started&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The question of running NancyFX with Owin has been popping up more often lately so I figured I would show you how to get setup. &lt;/p&gt;

&lt;h2&gt;Codez - Project Setup&lt;/h2&gt;

&lt;p&gt;Lets start off by creating a brand new Empty Web Application:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once created you should get a semi long list of References...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;First things first, we want to trim this back to almost NOTHING! That's right, we're gonna kill more references! In fact I'm going to remove EVERYTHING except the bare minimum, so that you can add references only as you need them.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;:D looks beautiful doesn't it!&lt;/p&gt;

&lt;p&gt;Next we're going to add the Nugets&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nancy&lt;/li&gt;
&lt;li&gt;Nancy.Owin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As well as the following... &lt;strong&gt;BUT&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Microsoft.Owin.Host.SystemWeb&lt;/li&gt;
&lt;li&gt;Microsoft.Web.Infrastructure&lt;/li&gt;
&lt;li&gt;Owin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the time of writing this, these Nugets are not available on Nuget yet. You will need to get them from the Katana CI Builds from MyGet.&lt;/p&gt;

&lt;p&gt;The URL for Katana CI build is &lt;strong&gt;&lt;em&gt;http://www.myget.org/F/katana/&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If you don't know how to add this to Nuget, you can do this 1 of 2 ways. If you've never done it, just go &lt;code&gt;Tools &amp;gt; Options &amp;gt; Packager Manager &amp;gt; Package Sources&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click the PLUS sign, enter the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt;, and press &lt;code&gt;ok&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can install the package &lt;code&gt;Microsoft.Owin.Host.SystemWeb&lt;/code&gt; by entering:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Install-Package Microsoft.Owin.Host.SystemWeb &lt;strong&gt;-pre&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sure you have &lt;code&gt;-pre&lt;/code&gt; on the end so that it pulls the pre-release packages. This will automatically install all 3 requires packages.&lt;/p&gt;

&lt;h2&gt;Codez - Startup&lt;/h2&gt;

&lt;p&gt;Next we need to create a Startup file, this is where we tell Owin to use the Nancy.Owin middleware, this is a assembly the Nancy Team has created which does all the hard lifting to wire up Nancy to the Owin interfaces. &lt;/p&gt;

&lt;p&gt;I guess you could say this is like adding the Nancy Hanlder to the web.config file...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;handlers&amp;gt;
    &amp;lt;add name="Nancy" verb="*" type="Nancy.Hosting.Aspnet.NancyHttpRequestHandler" path="*" /&amp;gt;
&amp;lt;/handlers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Except now we don't need any of that! &lt;em&gt;(so don't go adding that to your web.config!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to dive into what the middleware is doing you can take a look at &lt;a href="https://twitter.com/PrabirShrestha"&gt;Prabir's&lt;/a&gt; repository here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prabirshrestha/simple-owin"&gt;https://github.com/prabirshrestha/simple-owin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we need to create a new class called &lt;code&gt;Startup&lt;/code&gt; which contains a single method.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace NancyOwinWeb
{
    using Owin;

    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.UseNancy();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I opt to put this in a folder called App_Start&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's really all that's required to setup Nancy in an Owin project. In the same configuration file you would obviously wire up other middleware, maybe some logging, possibly authentication, maybe... &lt;em&gt;shudder&lt;/em&gt; you might even consider putting WebAPI in there. BUT please don't ruin your project :)&lt;/p&gt;

&lt;p&gt;The namespace is pretty important, if you don't use the default namespace, the Microsoft.Owin host can't find the startup. If for example, we added the App_Start namespace to the class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace NancyOwinWeb.App_Start
{
    using Owin;

    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.UseNancy();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get an exception thrown...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Luckily if you run into this scenario, you can either fix the namespace, or add a appSetting to your web.config like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;add key="owin:AppStartup" value="NancyOwinWeb.App_Start.Startup, NancyOwinWeb" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Codez - Module&lt;/h2&gt;

&lt;p&gt;Now we just need a module, so lets create a nice simple module&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace NancyOwinWeb.Modules
{
    using Nancy;

    public class HomeModule : NancyModule
    {
        public HomeModule()
        {
            Get["/"] = _ =&amp;gt; "Hello from Owin!";
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we ran the app now this would happen...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nice! What about my Web.config file, that file that gets so messy that we all dread...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;

&amp;lt;!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=169433
--&amp;gt;

&amp;lt;configuration&amp;gt;
    &amp;lt;system.web&amp;gt;
      &amp;lt;compilation debug="true" targetFramework="4.5" /&amp;gt;
      &amp;lt;httpRuntime targetFramework="4.5" /&amp;gt;
    &amp;lt;/system.web&amp;gt;   
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's it, believe it or not, I haven't changed a single line of this file at all!&lt;/p&gt;

&lt;p&gt;Best of all our references are next to nothing!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-owin-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So awesome...&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/</guid><link>http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX - Revisiting Content Negotiation &amp; APIs (Part 3)</title><description>&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this last part I want to show you creating your own media type, so far we have gone over a really basic example of returning a response and letting the accept header handle different results, and then we went over how explicitly using &lt;code&gt;Negotiate&lt;/code&gt; allows you to customize your response more.&lt;/p&gt;

&lt;p&gt;Creating your own Media Type may be something you never have to do, but it can help you solve some strange scenarios, for instance you could have a user request an invoice, rather than clutter your code with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (requestedInvoice.Type == "pdf")
{
    // get a pdf invoice
}
else if (requestedInvoice.Type == "word")
{

}
else if (...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the picture, this is tedious problematic work, every time we want to supply a new invoice type we need to modify the existing request, what we want to do is just handle a new media type and process it if we know about it.&lt;/p&gt;

</description><pubDate>Sun, 19 May 2013 16:00:00 Z</pubDate><a10:updated>2013-05-19T16:00:00Z</a10:updated><a10:content type="html">&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this last part I want to show you creating your own media type, so far we have gone over a really basic example of returning a response and letting the accept header handle different results, and then we went over how explicitly using &lt;code&gt;Negotiate&lt;/code&gt; allows you to customize your response more.&lt;/p&gt;

&lt;p&gt;Creating your own Media Type may be something you never have to do, but it can help you solve some strange scenarios, for instance you could have a user request an invoice, rather than clutter your code with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (requestedInvoice.Type == "pdf")
{
    // get a pdf invoice
}
else if (requestedInvoice.Type == "word")
{

}
else if (...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You get the picture, this is tedious problematic work, every time we want to supply a new invoice type we need to modify the existing request, what we want to do is just handle a new media type and process it if we know about it.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; To keep this simple I'm going to show a simple CSV Processor, you can look at NancyFX code on how a ViewProcessor works if you want to hook up a View to a Word/PDF processor.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Codez is what I need!&lt;/h2&gt;

&lt;p&gt;There's 3 things we need to create&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CsvProcessor&lt;/li&gt;
&lt;li&gt;CsvSerializer&lt;/li&gt;
&lt;li&gt;CsvResponse&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;code&gt;CsvProcessor&lt;/code&gt; takes the request, checks to see if it can handle the request, and if it can, it uses the &lt;code&gt;CsvSerializer&lt;/code&gt; to process the request and return a &lt;code&gt;CsvResponse&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Csv Response&lt;/h2&gt;

&lt;p&gt;This class is modeled off the Json Response, it takes a model and a serializer, sets all the correct headers for the response, serializes the response, and this is what is returned to the client.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CsvResponse&amp;lt;TModel&amp;gt; : Response
{
    public CsvResponse(TModel model, ISerializer serializer)
    {
        if (serializer == null)
        {
            throw new InvalidOperationException("CSV Serializer not set");
        }

        this.Contents = GetJsonContents(model, serializer);
        this.ContentType = "text/csv";
        this.StatusCode = HttpStatusCode.OK;
    }

    private static Action&amp;lt;Stream&amp;gt; GetJsonContents(TModel model, ISerializer serializer)
    {
        return stream =&amp;gt; serializer.Serialize("text/csv", model, stream);
    }
}

public class CsvResponse : CsvResponse&amp;lt;object&amp;gt;
{
    public CsvResponse(object model, ISerializer serializer)
        : base(model, serializer)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don't REALLY need this class, I would say its a highly recommended optional. If you don't create this class it just means your processor needs to do all the work of setting up the response.&lt;/p&gt;

&lt;h2&gt;Csv Serializer&lt;/h2&gt;

&lt;p&gt;To handle serialization of the model to a CSV file I'm using &lt;code&gt;ServiceStack.Text&lt;/code&gt; which comes with its own serializer! &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CsvSerializer : ISerializer
{
    public bool CanSerialize(string contentType)
    {
        return IsCsvType(contentType);
    }

    public IEnumerable&amp;lt;string&amp;gt; Extensions
    {
        get { yield return "csv"; }
    }

    public void Serialize&amp;lt;TModel&amp;gt;(string contentType, TModel model, Stream outputStream)
    {
        using (var writer = new StreamWriter(new UnclosableStreamWrapper(outputStream)))
        {
            ServiceStack.Text.CsvSerializer.SerializeToWriter(model, writer);
        }
    }

    private static bool IsCsvType(string contentType)
    {
        if (string.IsNullOrEmpty(contentType))
        {
            return false;
        }

        var contentMimeType = contentType.Split(';')[0];

        return contentMimeType.Equals("text/csv", StringComparison.InvariantCultureIgnoreCase) ||
               contentMimeType.StartsWith("text/csv", StringComparison.InvariantCultureIgnoreCase);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The serializer needs to implement &lt;code&gt;ISerializer&lt;/code&gt;, NancyFX will automatically pick up and register this class for you, so all you need to do is create it.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CanSerialize&lt;/code&gt; method is very important, in the &lt;code&gt;CsvProcessor&lt;/code&gt; we will invoke all serializers until we find one that can handle serializing the content for the requested processor.&lt;/p&gt;

&lt;h2&gt;Csv Processor&lt;/h2&gt;

&lt;p&gt;Lastly we have the processor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CsvProcessor : IResponseProcessor
{
    private readonly ISerializer serializer;

    private static readonly IEnumerable&amp;lt;Tuple&amp;lt;string, MediaRange&amp;gt;&amp;gt; extensionMappings =
        new[] { new Tuple&amp;lt;string, MediaRange&amp;gt;("csv", MediaRange.FromString("text/csv")) };

    public CsvProcessor(IEnumerable&amp;lt;ISerializer&amp;gt; serializers)
    {
        this.serializer = serializers.FirstOrDefault(x =&amp;gt; x.CanSerialize("text/csv"));
    }

    public IEnumerable&amp;lt;Tuple&amp;lt;string, MediaRange&amp;gt;&amp;gt; ExtensionMappings
    {
        get { return extensionMappings; }
    }

    public ProcessorMatch CanProcess(MediaRange requestedMediaRange, dynamic model, NancyContext context)
    {
        if (requestedMediaRange.Matches("text/csv"))
        {
            return new ProcessorMatch
            {
                ModelResult = MatchResult.DontCare,
                RequestedContentTypeResult = MatchResult.ExactMatch
            };
        }

        return new ProcessorMatch
        {
            ModelResult = MatchResult.DontCare,
            RequestedContentTypeResult = MatchResult.NoMatch
        };
    }

    public Response Process(MediaRange requestedMediaRange, dynamic model, NancyContext context)
    {
        return new CsvResponse(model, this.serializer);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class has 3 methods and a constructor.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Constructor&lt;/code&gt; simply works out which serializer it requires.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ExtensionMapping&lt;/code&gt; specifies which extension can be used on a request to call the processor. i.e if you can't pass in accepts headers, you can end the url with &lt;code&gt;.csv&lt;/code&gt; and the processor will be invoked!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CanProcess&lt;/code&gt; checks to see if the request can be processed.&lt;/p&gt;

&lt;p&gt;Lastly &lt;code&gt;Process&lt;/code&gt; simply processes the request.&lt;/p&gt;

&lt;h2&gt;Lets see it in action!&lt;/h2&gt;

&lt;p&gt;Using the EXACT same routes we defined on the previous posts, we can simply modify the header to ask for &lt;code&gt;text/csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part3-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we get all our data serialized to CSV format! We didn't have to modify the bootstrapper or anything, Nancy just sees the implemented interfaces and says MINE! :D&lt;/p&gt;

&lt;h2&gt;What about the Extension mentioned earlier!&lt;/h2&gt;

&lt;p&gt;In the processor we had the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static readonly IEnumerable&amp;lt;Tuple&amp;lt;string, MediaRange&amp;gt;&amp;gt; extensionMappings =
    new[] { new Tuple&amp;lt;string, MediaRange&amp;gt;("csv", MediaRange.FromString("text/csv")) };

public IEnumerable&amp;lt;Tuple&amp;lt;string, MediaRange&amp;gt;&amp;gt; ExtensionMappings
{
    get { return extensionMappings; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well when you access a url with &lt;code&gt;.json&lt;/code&gt; or &lt;code&gt;.csv&lt;/code&gt;, it will response with that as a file!&lt;/p&gt;

&lt;p&gt;If we have the following page&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part3-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We add the extension &lt;code&gt;.json&lt;/code&gt; to the end&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part3-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nancy Replies! (The JSON format shown done using &lt;a href="https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc?hl=en"&gt;JSONView chrome extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we update to &lt;code&gt;.csv&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part3-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And if we open the file up&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part3-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's all there is to it!&lt;/p&gt;

&lt;p&gt;Hope this helps anyone with Conneg or Conneg with NancyFX :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/05/setup-my-first-azure-virtual-machine/</guid><link>http://www.philliphaydon.com/2013/05/setup-my-first-azure-virtual-machine/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Setup my first Azure Virtual Machine!</title><description>&lt;p&gt;Every time I touch Azure I'm constantly amazed at how much simpler it is compared to when I tried it back when it had the crappy Silverlight management site.&lt;/p&gt;

&lt;p&gt;Infact every time I touch the thing I over-complicate something only to realize it was dead simple to begin with.&lt;/p&gt;

&lt;p&gt;I'm currently in the process of slowly building a VM to run a few small websites I'm building in my own time. Based on what I need Azure will cost me $60 less each month for roughly the same specs (with about 256mb less ram)&lt;/p&gt;

&lt;p&gt;The first time creating a VM took me a couple of hours to setup and working, nuking it and starting again took about as long as it took to provision the VM (few minutes)&lt;/p&gt;

</description><pubDate>Wed, 15 May 2013 16:00:00 Z</pubDate><a10:updated>2013-05-15T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Every time I touch Azure I'm constantly amazed at how much simpler it is compared to when I tried it back when it had the crappy Silverlight management site.&lt;/p&gt;

&lt;p&gt;Infact every time I touch the thing I over-complicate something only to realize it was dead simple to begin with.&lt;/p&gt;

&lt;p&gt;I'm currently in the process of slowly building a VM to run a few small websites I'm building in my own time. Based on what I need Azure will cost me $60 less each month for roughly the same specs (with about 256mb less ram)&lt;/p&gt;

&lt;p&gt;The first time creating a VM took me a couple of hours to setup and working, nuking it and starting again took about as long as it took to provision the VM (few minutes)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Things I did wrong :(&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When I setup the DNS I used the Internal IP Address instead of the Public Virtual IP address. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-vm-1.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After sorting out the DNS so ping hit the right IP Address, I needed to add an Endpoint for port 80. Luckily when IIS installs on Windows Server 2012 it configures the Firewall for you. I don't recall it doing that for you on 2008. Needless to say, once the Endpoint was in place, websites became visible!&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-vm-2.png" alt="" /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I didn't want to store my websites, and images/videos on the OS Drive so I needed to create a 2nd drive. Initially I went fluffing around in Storage, creating a new storage and setting blob read/write etc etc... Turns out I wasted about 20 minutes of my time to find out...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-vm-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;There's a button to add an empty disk to a selected virtual machine... Arg, well that turned out to be REALLY simple!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I kind of expected the disk to automatically show up in the VM, but then I remembered watching some video on Azure VMs which said you need to enable/format the disk manually. /facepalm&lt;/p&gt;

&lt;p&gt;So once again jump into the VM, go to the disk management screen and enable/format, now I got storage ready to go!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Weather I'm messing around with Serivces, Website, Virtual Machines. Azure has come a long way and its such a pleasure to work with! I was pretty negative towards Azure when it had the Silverlight management screen because it was slow and I couldn't figure out how to do anything. Now its a breeze!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/</guid><link>http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX - Revisiting Content Negotiation &amp; APIs (Part 2)</title><description>&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In part 1 I went over a really basic scenario, and one of the fiddly things we had was the view name for returning a collection.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;Negotiate&lt;/code&gt; gives as more flexibility on what we can return, allowing us to customize the response to respond differently to different media types or returning partial content in some scenarios.&lt;/p&gt;

&lt;p&gt;Going back to my previous post I said we should be able to use the same API to build our website as we expose. But what about when we want to have additional information on the website that isn't pushed out to the client.&lt;/p&gt;

&lt;p&gt;Lets say you have a product catalog, and you can view a particular product on your website. You also allow people to pull the content from your site to display on their website as like an affiliate system of some sort. But when you render your product you may have a special, but when you send the product to the consuming client you don't want to include the special for them since it's something specific to your website.&lt;/p&gt;

&lt;h2&gt;Show me the codez!&lt;/h2&gt;

&lt;p&gt;So lets update the &lt;code&gt;Product&lt;/code&gt; to include &lt;code&gt;SpecialPrice&lt;/code&gt;&lt;/p&gt;

</description><pubDate>Wed, 08 May 2013 16:00:00 Z</pubDate><a10:updated>2013-05-08T16:00:00Z</a10:updated><a10:content type="html">&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In part 1 I went over a really basic scenario, and one of the fiddly things we had was the view name for returning a collection.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;Negotiate&lt;/code&gt; gives as more flexibility on what we can return, allowing us to customize the response to respond differently to different media types or returning partial content in some scenarios.&lt;/p&gt;

&lt;p&gt;Going back to my previous post I said we should be able to use the same API to build our website as we expose. But what about when we want to have additional information on the website that isn't pushed out to the client.&lt;/p&gt;

&lt;p&gt;Lets say you have a product catalog, and you can view a particular product on your website. You also allow people to pull the content from your site to display on their website as like an affiliate system of some sort. But when you render your product you may have a special, but when you send the product to the consuming client you don't want to include the special for them since it's something specific to your website.&lt;/p&gt;

&lt;h2&gt;Show me the codez!&lt;/h2&gt;

&lt;p&gt;So lets update the &lt;code&gt;Product&lt;/code&gt; to include &lt;code&gt;SpecialPrice&lt;/code&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public decimal? SpecialPrice { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/strong&gt; and also update the repository to return the Special Price on each &lt;code&gt;Product&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We're also going to introduce a new model called &lt;code&gt;PartialProduct&lt;/code&gt;. There may be a better name for it, but its what I picked for the purpose of demonstrating. This is going to be the same as &lt;code&gt;Product&lt;/code&gt; but without the &lt;code&gt;SpecialPrice&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class PartialProduct
{
    public PartialProduct()
    {
    }

    public PartialProduct(Product product)
    {
        Id = product.Id;
        Name = product.Name;
        Price = product.Price;
    }

    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The constructor is used to populate the model based on a &lt;code&gt;Product&lt;/code&gt;. You may want to use something like AutoMapper to do this for you, or write some extension methods, etc.&lt;/p&gt;

&lt;p&gt;Now with our route, we want to return the &lt;code&gt;PartialProduct&lt;/code&gt; when responding to &lt;code&gt;application/json&lt;/code&gt; or &lt;code&gt;application/xml&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/{id}"] = _ =&amp;gt;
{
    var product = productRepository.Get((int)_.id);

    return Negotiate.WithView("product")
                    .WithModel(product)
                    .WithMediaRangeModel(MediaRange.FromString("application/json"),
                                         new PartialProduct(product))
                    .WithMediaRangeModel(MediaRange.FromString("application/xml"),
                                         new PartialProduct(product));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we are saying that we want to negotiate the response with the view &lt;code&gt;product&lt;/code&gt; using the model &lt;code&gt;product&lt;/code&gt;, but if the MediaRange is &lt;code&gt;application/json&lt;/code&gt; we want to return a partial product, likewise if its &lt;code&gt;application/xml&lt;/code&gt; we want to also return a partial model. &lt;em&gt;(if it looks like a lot to type, don't worry we can tidy this up)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now when we setup our Postman looking for &lt;code&gt;text/html&lt;/code&gt; we get the &lt;code&gt;SpecialPrice&lt;/code&gt; returned on the product:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part2-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;However if we update it to &lt;code&gt;application/json&lt;/code&gt; we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part2-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Anddddd &lt;code&gt;application/xml&lt;/code&gt; we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-part2-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But... We kinda had to write a lot of code for the media ranges. Extension methods are awesome though, so we can tidy them up by introducing our own extension methods:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class NegotiateExtensions
{
    public static Negotiator ForJson(this Negotiator negotiator, object model)
    {
        return negotiator.WithMediaRangeModel(MediaRange.FromString("application/json"), model);
    }

    public static Negotiator ForXml(this Negotiator negotiator, object model)
    {
        return negotiator.WithMediaRangeModel(MediaRange.FromString("application/xml"), model);
    }
}   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This reduces things down to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/{id}"] = _ =&amp;gt;
{
    var product = productRepository.Get((int)_.id);

    return Negotiate.WithView("product")
                    .WithModel(product)
                    .ForJson(new PartialProduct(product))
                    .ForXml(new PartialProduct(product));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still too much? We can introduce one more extension&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static Negotiator OrPartial(this Negotiator negotiator, object model)
{
    return negotiator.ForJson(model).ForXml(model);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now all we have is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/{id}"] = _ =&amp;gt;
{
    var product = productRepository.Get((int)_.id);

    return Negotiate.WithView("product")
                    .WithModel(product)
                    .OrPartial(new PartialProduct(product));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously you can play around to figure out what suits you. But this gives us the flexibility to customize outputs for different media types. &lt;/p&gt;

&lt;p&gt;In part 3 I'll discuss implementing your own Media Type :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/05/rss-atom-feed-spam-sorry/</guid><link>http://www.philliphaydon.com/2013/05/rss-atom-feed-spam-sorry/</link><a10:author><a10:name /></a10:author><title>RSS/Atom spam :( Sorry...</title><description>&lt;p&gt;Sorry to anyone who subscribes to me, I was setting up an RSS since not everything accepts Atom, and I guess it re-processed everything and has spammed everyone.&lt;/p&gt;

&lt;p&gt;Real sorry about that :(&lt;/p&gt;
</description><pubDate>Mon, 06 May 2013 16:00:00 Z</pubDate><a10:updated>2013-05-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Sorry to anyone who subscribes to me, I was setting up an RSS since not everything accepts Atom, and I guess it re-processed everything and has spammed everyone.&lt;/p&gt;

&lt;p&gt;Real sorry about that :(&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/visual-studio-disable-namespacing-on-folders/</guid><link>http://www.philliphaydon.com/2013/04/visual-studio-disable-namespacing-on-folders/</link><a10:author><a10:name /></a10:author><title>Disabling Namespaces on folders in Visual Studio</title><description>&lt;p&gt;I just discovered this little trick I found in Visual Studio to turn off namespacing on a folder. Not sure how after 8 years I only just found this.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Lets assume we're working with Entity Framework... (shiver)... We create a Data Model, add all our Entities and away we go. &lt;/p&gt;

&lt;p&gt;Then we want to extend one of the Entities, maybe to add some methods and such, so we need to create some partial classes. So far we have:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We create a new &lt;code&gt;Member.cs&lt;/code&gt; class in the &lt;code&gt;Partials&lt;/code&gt; folder;&lt;/p&gt;

</description><pubDate>Thu, 25 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I just discovered this little trick I found in Visual Studio to turn off namespacing on a folder. Not sure how after 8 years I only just found this.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;Lets assume we're working with Entity Framework... (shiver)... We create a Data Model, add all our Entities and away we go. &lt;/p&gt;

&lt;p&gt;Then we want to extend one of the Entities, maybe to add some methods and such, so we need to create some partial classes. So far we have:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We create a new &lt;code&gt;Member.cs&lt;/code&gt; class in the &lt;code&gt;Partials&lt;/code&gt; folder;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;namespace SampleNamespacing.Models.Partials
{
    public partial class Member
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we delete the &lt;code&gt;Partials&lt;/code&gt; to put it in the same namespace as the Entities defined in the Data Model&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace SampleNamespacing.Models
{
    public partial class Member
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But now we have a ReSharper warning&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we don't have a nice green file :(&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-3.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;The Solution!&lt;/h2&gt;

&lt;p&gt;This is so simple &gt;&amp;lt; &lt;/p&gt;

&lt;p&gt;Right click the folder and go to Properties:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM! Right there, &lt;code&gt;Namespace Provider&lt;/code&gt;! Set that thing to &lt;code&gt;False&lt;/code&gt; and we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/visual-studio-namespacing-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;No more warnings! &lt;/p&gt;

&lt;h2&gt;Wheres this feature come from?&lt;/h2&gt;

&lt;p&gt;Turns out this is a ReSharper setting! This setting is stored in the &lt;code&gt;*project*.csproj.DotSettings&lt;/code&gt; file. So if you're using team settings then this setting would be picked up by everyone on the team. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/</guid><link>http://www.philliphaydon.com/2013/04/nancyfx-revisiting-content-negotiation-and-apis-part-1/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX - Revisiting Content Negotiation &amp; APIs (Part 1)</title><description>&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I thought I would revisit this topic since I don't believe I did it enough justice last time around, and I believe it really is important when creating an API that is going to be consumed not only by the public or client, but &lt;strong&gt;by you also&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;When the browser asks for &lt;code&gt;text/html&lt;/code&gt; its negotiating with the server. So really your website is an API, your &lt;code&gt;Views&lt;/code&gt; are just an additional type of content that your API serves up when requested.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;Lets say you're building Twitter, the initial page shows a list of tweets, so the browser makes a call to &lt;code&gt;/tweets&lt;/code&gt; and the server responds with a list of tweets rendered with using HTML.&lt;/p&gt;

&lt;p&gt;Once the page has loaded, the client uses JavaScript to load new tweets, so it calls &lt;code&gt;/tweets&lt;/code&gt; again, this time it returns a &lt;code&gt;json&lt;/code&gt; result, and the client-side templating engine then renders and appends those to the top of the existing list, keeping the client up to date with the latest tweets.&lt;/p&gt;

&lt;p&gt;What's nice is no new data needed to be written on the server! &lt;/p&gt;

</description><pubDate>Sun, 21 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-21T16:00:00Z</a10:updated><a10:content type="html">&lt;ul&gt;
&lt;li&gt;Original Post: &lt;a href="http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation"&gt;NancyFX and Content Negotiation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 1)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-2/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 2)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.philliphaydon.com/2013/05/nancyfx-revisiting-content-negotiation-and-apis-part-3/"&gt;NancyFX - Revisiting Content Negotiation &amp;amp; APIs (Part 3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I thought I would revisit this topic since I don't believe I did it enough justice last time around, and I believe it really is important when creating an API that is going to be consumed not only by the public or client, but &lt;strong&gt;by you also&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;When the browser asks for &lt;code&gt;text/html&lt;/code&gt; its negotiating with the server. So really your website is an API, your &lt;code&gt;Views&lt;/code&gt; are just an additional type of content that your API serves up when requested.&lt;/p&gt;

&lt;h2&gt;Example&lt;/h2&gt;

&lt;p&gt;Lets say you're building Twitter, the initial page shows a list of tweets, so the browser makes a call to &lt;code&gt;/tweets&lt;/code&gt; and the server responds with a list of tweets rendered with using HTML.&lt;/p&gt;

&lt;p&gt;Once the page has loaded, the client uses JavaScript to load new tweets, so it calls &lt;code&gt;/tweets&lt;/code&gt; again, this time it returns a &lt;code&gt;json&lt;/code&gt; result, and the client-side templating engine then renders and appends those to the top of the existing list, keeping the client up to date with the latest tweets.&lt;/p&gt;

&lt;p&gt;What's nice is no new data needed to be written on the server! &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm not going to discuss RESTful API's, that would just create too many arguments.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Need code please&lt;/h2&gt;

&lt;p&gt;Right so lets see this in action for real. When I demonstrated this in my previous post, I showed a somewhat complicated Negotiate, this time I'm going to show a super simple scenario.&lt;/p&gt;

&lt;p&gt;We have a &lt;code&gt;ProductsModule&lt;/code&gt;, it can &lt;code&gt;Get&lt;/code&gt; a single product, or it can &lt;code&gt;Get&lt;/code&gt; a list of products.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductsModule : NancyModule
{
    public ProductsModule(IProductRepository productRepository)
        :base("products")
    {
        Get["/{id}"] = _ =&amp;gt;
        {
            var product = productRepository.Get((int)_.id);

            return product;
        };

        Get["/"] = _ =&amp;gt;
        {
            var products = productRepository.List();

            return products;
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a Chrome Plugin called Postman which can be found on the &lt;a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?utm_source=chrome-ntp-launcher"&gt;Chrome Web Store&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can invoke some calls to get some data. We specify the &lt;code&gt;URL&lt;/code&gt;, the &lt;code&gt;VERB&lt;/code&gt;, and add some Headers. In this case we will add a single header. &lt;code&gt;Accept&lt;/code&gt; where we specify that we want &lt;code&gt;application/xml&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When we invoke this, we get an XML result of our products:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;When we do the same call but we specify the &lt;code&gt;Accept&lt;/code&gt; header with &lt;code&gt;application/json&lt;/code&gt; we get a JSON result. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nice right? So far we haven't written any code other than returning some data to a endpoint we specified. Lets take a look at the first route, its a Get By Id route, and all we're returning is a single Product.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now if we specify the Accept as something the browser would ask for, &lt;code&gt;text/html&lt;/code&gt; we would expect rendered HTML.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Bam we get an error, but this is only because the view doesn't exist yet. By default NancyFX looks for a view of the same name of the type returned.&lt;/p&gt;

&lt;p&gt;Since we returned a 'product', the view name that Nancy will look for is &lt;code&gt;typeof(Product).Name&lt;/code&gt; or &lt;code&gt;Product&lt;/code&gt;. So if we create a new product view to display some data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;div&amp;gt;
        Id: @Model.Id
        &amp;lt;br /&amp;gt;
        Name: @Model.Name
        &amp;lt;br /&amp;gt;
        Price: $@Model.Price
    &amp;lt;/div&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super super simple, now when we call the same route again we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we have a Single API that returns JSON, XML, or HTML. &lt;/p&gt;

&lt;h2&gt;Fiddly Issues&lt;/h2&gt;

&lt;p&gt;Here's where things get fiddly, if we want to return the collection with a view, NancyFX will attempt to convert the &lt;code&gt;List&amp;lt;Product&amp;gt;&lt;/code&gt; to it's name, and look for the view. This ends up looking for a view by the name of &lt;code&gt;List`1&lt;/code&gt;, which you may think will fail, but funnily enough you can actually create a view with the backquote.&lt;/p&gt;

&lt;p&gt;So lets create a new file called &lt;code&gt;List`1.sshtml&lt;/code&gt; and populate it with some basic HTML:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt; 
&amp;lt;html lang="en" xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    @Each
    &amp;lt;div&amp;gt;
        Id: @Current.Id
        &amp;lt;br /&amp;gt;
        Name: @Current.Name
        &amp;lt;br /&amp;gt;
        Price: $@Current.Price
    &amp;lt;/div&amp;gt;
    &amp;lt;hr&amp;gt;
    @EndEach

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; in case you're wondering, this isn't Razor, this is Nancy's Super Simple View Engine :)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now if we run up the site again and hit &lt;code&gt;/products&lt;/code&gt; we get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-conneg-updated-8.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;So far we have created a single endpoint with very little code that can respond with JSON/XML/HTML. Next I'm going to show how &lt;code&gt;Negotiate&lt;/code&gt; gives you more flexibility.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/nancyfx-implementing-your-own-routing/</guid><link>http://www.philliphaydon.com/2013/04/nancyfx-implementing-your-own-routing/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX - Implementing your own routing!</title><description>&lt;p&gt;With the up and coming release of 0.17 of NancyFX, the routing has been completely rewritten, and now it's super easy to implement your own routing. So I'm going to show you how.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;The routing works by defining a route:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Get["/products/{id}"]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The route is then broken up into segments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;products&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{id}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each segment is checked against a Node Condition in the &lt;code&gt;TrieNodeFactory&lt;/code&gt; like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (segment.StartsWith("(") &amp;amp;&amp;amp; segment.EndsWith(")"))
{
    return new RegExNode(parent, segment, this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a request comes in, the segment is compared to the node for a match and returns true/false + the captured parameter. &lt;/p&gt;

&lt;p&gt;These are a bunch of conditions for checking different nodes, currently Nancy supports out of the box the following nodes.&lt;/p&gt;

&lt;h2&gt;Existing Nodes&lt;/h2&gt;

&lt;p&gt;This is brief description of the existing nodes that currently exist in 0.17. &lt;/p&gt;

&lt;h3&gt;CaptureNode&lt;/h3&gt;

&lt;p&gt;This node captures &lt;code&gt;{foo}&lt;/code&gt;, or basically any value defined in the segment.&lt;/p&gt;

</description><pubDate>Mon, 08 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-08T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;With the up and coming release of 0.17 of NancyFX, the routing has been completely rewritten, and now it's super easy to implement your own routing. So I'm going to show you how.&lt;/p&gt;

&lt;h2&gt;How it works&lt;/h2&gt;

&lt;p&gt;The routing works by defining a route:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Get["/products/{id}"]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The route is then broken up into segments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;products&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{id}&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each segment is checked against a Node Condition in the &lt;code&gt;TrieNodeFactory&lt;/code&gt; like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (segment.StartsWith("(") &amp;amp;&amp;amp; segment.EndsWith(")"))
{
    return new RegExNode(parent, segment, this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a request comes in, the segment is compared to the node for a match and returns true/false + the captured parameter. &lt;/p&gt;

&lt;p&gt;These are a bunch of conditions for checking different nodes, currently Nancy supports out of the box the following nodes.&lt;/p&gt;

&lt;h2&gt;Existing Nodes&lt;/h2&gt;

&lt;p&gt;This is brief description of the existing nodes that currently exist in 0.17. &lt;/p&gt;

&lt;h3&gt;CaptureNode&lt;/h3&gt;

&lt;p&gt;This node captures &lt;code&gt;{foo}&lt;/code&gt;, or basically any value defined in the segment.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;CaptureNodeWithDefaultValue&lt;/h3&gt;

&lt;p&gt;Similar to &lt;code&gt;CaptureNode&lt;/code&gt;, &lt;code&gt;{foo?defaultValue}&lt;/code&gt;, allows you to capture any value, with a default value should the value not exist.&lt;/p&gt;

&lt;h3&gt;GreedyCaptureNode&lt;/h3&gt;

&lt;p&gt;This is like the be-all-end-all node &lt;code&gt;{greedy*}&lt;/code&gt;. It will capture anything in the current segment and onward. Although other segments are still checked. I would think it's rare to ever need this node.&lt;/p&gt;

&lt;h3&gt;LiteralNode&lt;/h3&gt;

&lt;p&gt;If nothing else is captured in any other node, then likely hood it's a literal value, this will just capture the segment as is, non-capturing, its just a match or non-match. &lt;/p&gt;

&lt;h3&gt;OptionalCaptureNode&lt;/h3&gt;

&lt;p&gt;This is like the &lt;code&gt;CaptureNode&lt;/code&gt; and &lt;code&gt;CaptureNodeWithDefaultValue&lt;/code&gt;, but it just makes the segment as optional. It can or cannot exist, if it exists it's captured.&lt;/p&gt;

&lt;h3&gt;RegExNode&lt;/h3&gt;

&lt;p&gt;Wooo Regular Expression support! &lt;code&gt;(?&amp;lt;foo&amp;gt;\d{2,4})&lt;/code&gt; is a named capture that will find an numeric value between 2-4 digits long, in the segment.&lt;/p&gt;

&lt;h3&gt;GreedyRegExCaptureNode&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;GreedyRegExCaptureNode&lt;/code&gt; is a little more complicated, it's a mix between the &lt;code&gt;RegExNode&lt;/code&gt; and &lt;code&gt;GreedyCaptureNode&lt;/code&gt;, and supports any number of segments in a regular expression match. i.e &lt;code&gt;^(?:(?&amp;lt;id&amp;gt;videos/\d{1,10})(?:/{0,1}(?&amp;lt;slug&amp;gt;.*)))$&lt;/code&gt; will match &lt;code&gt;videos/123&lt;/code&gt; or &lt;code&gt;videos/123/some-slug-url&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;RootNode&lt;/h3&gt;

&lt;p&gt;This node simply dictates that this is the very start of the route segments, the very root. Effectively its &lt;code&gt;/&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Implementing your own Node&lt;/h2&gt;

&lt;p&gt;So we're going to create a route constraint. Our node will look like &lt;code&gt;[foo:even]&lt;/code&gt;, we're saying that the segment will be captured, only if the value is an even number, anything else and it wont match. &lt;/p&gt;

&lt;p&gt;So we create a class and inherit &lt;code&gt;TrieNode&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CapturedOddEvenNode : TrieNode
{
    public CapturedOddEvenNode(TrieNode parent, string segment, ITrieNodeFactory nodeFactory) 
        : base(parent, segment, nodeFactory)
    {
    }

    public override SegmentMatch Match(string segment)
    {
        throw new NotImplementedException();
    }

    public override int Score
    {
        get { throw new NotImplementedException(); }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we want to do is prepare the segment, so in the ctor we are going to trim the &lt;code&gt;[]&lt;/code&gt; values off the start/end of the segment and, then split the remaining value by &lt;code&gt;:&lt;/code&gt; as the name on the left, and the condition on the right.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private string segmentName;
private bool shouldBeEven;

public CapturedOddEvenNode(TrieNode parent, string segment, ITrieNodeFactory nodeFactory)
    : base(parent, segment, nodeFactory)
{
    this.ExtractParameterName();
}

private void ExtractParameterName()
{
    var innerSegment = this.RouteDefinitionSegment.Trim('[', ']');
    var segmentSplit = innerSegment.Split(':');

    this.segmentName = segmentSplit[0];
    this.shouldBeEven = segmentSplit[1] == "even";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need to implement the match. Here we want to check the value and condition:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The value is not a number = no match&lt;/li&gt;
&lt;li&gt;The value is an odd number and the condition is it should be odd = match&lt;/li&gt;
&lt;li&gt;The value is an even number and the condition is it should be even = match&lt;/li&gt;
&lt;li&gt;Else the condition is not met so its a no match&lt;/li&gt;
&lt;/ol&gt;

&lt;!----&gt;

&lt;pre&gt;&lt;code&gt;public override SegmentMatch Match(string segment)
{
    int numericValue;

    if (!int.TryParse(segment, NumberStyles.Integer, CultureInfo.InvariantCulture, out numericValue))
    {
        return SegmentMatch.NoMatch;
    }

    if ((numericValue%2 == 0 &amp;amp;&amp;amp; shouldBeEven) ||
        (numericValue%2 != 0 &amp;amp;&amp;amp; !shouldBeEven))
    {
        var match = new SegmentMatch(true);
        match.CapturedParameters.Add(segmentName, numericValue);

        return match;
    }

    return SegmentMatch.NoMatch;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly we need to implement the Score. The score is used in the scenario when two routes have two matches, the summed total of the score for all segments becomes the weight deciding which route wins. Highest score of the two or more matches wins. &lt;/p&gt;

&lt;p&gt;We will set it to 100.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override int Score
{
    get { return 100; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our final Node looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CapturedOddEvenNode : TrieNode
{
    private string segmentName;
    private bool shouldBeEven;

    public CapturedOddEvenNode(TrieNode parent, string segment, ITrieNodeFactory nodeFactory)
        : base(parent, segment, nodeFactory)
    {
        this.ExtractParameterName();
    }

    private void ExtractParameterName()
    {
        var innerSegment = this.RouteDefinitionSegment.Trim('[', ']');
        var segmentSplit = innerSegment.Split(':');

        this.segmentName = segmentSplit[0];
        this.shouldBeEven = segmentSplit[1] == "even";
    }

    public override SegmentMatch Match(string segment)
    {
        int numericValue;

        if (!int.TryParse(segment, NumberStyles.Integer, CultureInfo.InvariantCulture, out numericValue))
        {
            return SegmentMatch.NoMatch;
        }

        if ((numericValue%2 == 0 &amp;amp;&amp;amp; shouldBeEven) ||
            (numericValue%2 != 0 &amp;amp;&amp;amp; !shouldBeEven))
        {
            var match = new SegmentMatch(true);
            match.CapturedParameters.Add(segmentName, numericValue);

            return match;
        }

        return SegmentMatch.NoMatch;
    }

    public override int Score
    {
        get { return 100; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Implementing your own factory&lt;/h2&gt;

&lt;p&gt;You're required to implement your own factory to call the new Node, this is super easy because we can just inherit the existing one.&lt;/p&gt;

&lt;p&gt;Create a new Factory called &lt;code&gt;CustomTrieNodeFactory&lt;/code&gt; and implement &lt;code&gt;TrieNodeFactory&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CustomTrieNodeFactory : TrieNodeFactory
{
    public override TrieNode GetNodeForSegment(TrieNode parent, string segment)
    {
        if (parent == null)
        {
            return new RootNode(this);
        }

        if (segment.StartsWith("[") &amp;amp;&amp;amp; segment.EndsWith("]") &amp;amp;&amp;amp; segment.Contains(":"))
        {
            return new CapturedOddEvenNode(parent, segment, this);
        }

        return base.GetNodeForSegment(parent, segment);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that the first condition is that I check that the parent is null, that's because the first segment is always the root node, all segments after that are out implementation. The condition is checked in the base call, but we want to check before we run out code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (parent == null)
{
   return new RootNode(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So by checking its null, we return a RootNode, then the call comes in the second time, it will have a parent node, and then check to see if the segment starts/ends with our criteria.&lt;/p&gt;

&lt;h2&gt;Wiring up the new factory&lt;/h2&gt;

&lt;p&gt;Lastly we need to wire up the factory in the bootstrapper, we can do this by overriding the &lt;code&gt;NancyInternalConfiguration&lt;/code&gt; property and overriding the &lt;code&gt;TrieNodeFactory&lt;/code&gt; property with our custom type like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override NancyInternalConfiguration InternalConfiguration
{
    get
    {
        return NancyInternalConfiguration.WithOverrides(config =&amp;gt; 
        {
            config.TrieNodeFactory = typeof (CustomTrieNodeFactory);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bam, that's it! &lt;/p&gt;

&lt;h2&gt;Does it work?&lt;/h2&gt;

&lt;p&gt;So if we create a new Module called &lt;code&gt;TestModule&lt;/code&gt; and implement two routes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/test/[oddNumbersRawr:odd]"] = _ =&amp;gt;
{
    return "I love odd numbers! Like: " + _.oddNumbersRawr;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running up the project and entering a with an odd number&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-new-routing-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Pretty sweet!&lt;/p&gt;

&lt;p&gt;But if we enter the URL with an even number&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancyfx-new-routing-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;BAM page not found, because it didn't match the condition!&lt;/p&gt;

&lt;p&gt;That's really all there is to it. You can create any type of custom routing you like. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/raygun-io-a-few-features-that-i-love/</guid><link>http://www.philliphaydon.com/2013/04/raygun-io-a-few-features-that-i-love/</link><a10:author><a10:name /></a10:author><category>Raygun</category><title>Raygun.io - a few features that I love</title><description>&lt;p&gt;I've been using Raygun.io for a couple of months now and seen a whole heap of new features added.&lt;/p&gt;

&lt;h3&gt;Email Spam&lt;/h3&gt;

&lt;p&gt;If you had multiple apps you would get spammed with 1 summary email each day for each app, now you get an aggregation of all apps which is much nicer. &lt;/p&gt;

&lt;p&gt;If you receive an email for an exception, and that exception keeps occurring, it will email you a little while later saying that you're still receiving the exception, the rate at which its occurring, and if it's happening more or less.&lt;/p&gt;

&lt;p&gt;These changes are great! Still the same valuable information, but more smartly distributed to the user.&lt;/p&gt;

&lt;h3&gt;Commenting&lt;/h3&gt;

&lt;p&gt;I had an error, that occurred a lot... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-features-javascript-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So after fixing it, which took a little bit of effort to figure out, I commented on it!&lt;/p&gt;

</description><pubDate>Sun, 07 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-07T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've been using Raygun.io for a couple of months now and seen a whole heap of new features added.&lt;/p&gt;

&lt;h3&gt;Email Spam&lt;/h3&gt;

&lt;p&gt;If you had multiple apps you would get spammed with 1 summary email each day for each app, now you get an aggregation of all apps which is much nicer. &lt;/p&gt;

&lt;p&gt;If you receive an email for an exception, and that exception keeps occurring, it will email you a little while later saying that you're still receiving the exception, the rate at which its occurring, and if it's happening more or less.&lt;/p&gt;

&lt;p&gt;These changes are great! Still the same valuable information, but more smartly distributed to the user.&lt;/p&gt;

&lt;h3&gt;Commenting&lt;/h3&gt;

&lt;p&gt;I had an error, that occurred a lot... &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-features-javascript-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So after fixing it, which took a little bit of effort to figure out, I commented on it!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-features-javascript-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is awesome! This is really powerful if the exception reoccurs, and becomes even more powerful if they decide to implement &lt;a href="http://raygun.io/thinktank/suggestion/1012"&gt;this suggestion&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;The fact I get exceptions, when they happen!&lt;/h3&gt;

&lt;p&gt;I submitted my app to the Windows App Store, and it got declined, multiple times... But it allowed me to identity a bug in Microsoft Advertising SDK.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-features-javascript-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So it turns out there are random scenarios where the Advert Control, doesn't work and causes the app to crash hard. The dump that Microsoft supplies is absolute rubbish, it's massively time consuming and often doesn't give you enough information. &lt;/p&gt;

&lt;p&gt;With Raygun I was able to capture the errors as they occur and know where they were occurring. In the end I ended up removing the SDK from my app and submitting a ticket with MS to hopefully fix it.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I don't think I've ever cared about exceptions in my applications in the past 8-9 years as much as I do now. Raygun just makes it so much easier to deal with that I care about whats happening in my application now.&lt;/p&gt;

&lt;p&gt;I'm a little blown away that I care about something other than myself. :P&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/my-must-have-short-list-programs-extensions-etc/</guid><link>http://www.philliphaydon.com/2013/04/my-must-have-short-list-programs-extensions-etc/</link><a10:author><a10:name /></a10:author><title>My must have (short) list of programs/extensions etc...</title><description>&lt;p&gt;It's been 1 year since I posted my &lt;a href="http://www.philliphaydon.com/2012/03/my-must-have-short-list-programs-and-extensions-etc/"&gt;list&lt;/a&gt; , well.. 1 year has come and gone, and I missed posting this on the same date. None the less its April now and here's my post.&lt;/p&gt;

&lt;h3&gt;Visual Studio 2012&lt;/h3&gt;

&lt;p&gt;I'm still a .NET Dev but ah... god it's painful going back to VS 2010... The new Black Theme makes this so much easier to use while sitting in the dark. &lt;/p&gt;

&lt;h3&gt;Still using&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jetbrains.com/resharper/"&gt;ReSharper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;Mindscape Web Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bugaidsoftware.com/"&gt;BugAid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.sharpdevelop.net/ilspy.ashx"&gt;ILSpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sublimetext.com/2"&gt;SublimeText 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Raygun.io&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://raygun.io"&gt;http://raygun.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Software as a Service for Error Handling has replaced my use of ELMAH. It's simply amazing. Been tracking errors in my applications more closely with this.&lt;/p&gt;

</description><pubDate>Mon, 01 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;It's been 1 year since I posted my &lt;a href="http://www.philliphaydon.com/2012/03/my-must-have-short-list-programs-and-extensions-etc/"&gt;list&lt;/a&gt; , well.. 1 year has come and gone, and I missed posting this on the same date. None the less its April now and here's my post.&lt;/p&gt;

&lt;h3&gt;Visual Studio 2012&lt;/h3&gt;

&lt;p&gt;I'm still a .NET Dev but ah... god it's painful going back to VS 2010... The new Black Theme makes this so much easier to use while sitting in the dark. &lt;/p&gt;

&lt;h3&gt;Still using&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.jetbrains.com/resharper/"&gt;ReSharper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;Mindscape Web Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bugaidsoftware.com/"&gt;BugAid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.sharpdevelop.net/ilspy.ashx"&gt;ILSpy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.sublimetext.com/2"&gt;SublimeText 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Raygun.io&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://raygun.io"&gt;http://raygun.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This Software as a Service for Error Handling has replaced my use of ELMAH. It's simply amazing. Been tracking errors in my applications more closely with this.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Metro Studio 2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.syncfusion.com/downloads/metrostudio"&gt;http://www.syncfusion.com/downloads/metrostudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a free program which is rather handy, it allows you to create icons for use in XAML. Been very handy while creating my Windows Store App.&lt;/p&gt;

&lt;h3&gt;MarkdownPad 2&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://markdownpad.com/"&gt;http://markdownpad.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since moving my blog to GitHub Pages, and writing everything in Markdown, this program is awesome. Great for being able to preview the parsed content before committing it.&lt;/p&gt;

&lt;h3&gt;RavenDB&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://ravendb.net/"&gt;http://ravendb.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RavenDB is now on V2 and I really wish I could use this in the workplace, it makes life so much easier and I believe using it has made me a better developer.&lt;/p&gt;

&lt;h3&gt;NancyFX&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.nancyfx.org"&gt;http://www.nancyfx.org&lt;/a&gt; / &lt;em&gt;project I currently contribute to&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;NancyFX is a micro web framework, well not so sure it's &lt;code&gt;micro&lt;/code&gt; anymore, but it's definitely smaller than MVC/WebForms. This is another framework I really wish I could use in the workplace. Makes working with the web a dream.&lt;/p&gt;

&lt;h3&gt;WorldDomination.Web.Authentication&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication/"&gt;https://github.com/PureKrom....Web.Authentication/&lt;/a&gt; / &lt;em&gt;project I currently contribute to&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This project I created with Justin Adler, is an attempt to make OAuth easier to implement, by taking away all the &lt;code&gt;magic&lt;/code&gt; and making the &lt;code&gt;magic&lt;/code&gt; straight forward and easy to understand. I think we've done a pretty good job and David Fowler has given us great input to make even better. It's currently being used by JabbR&lt;/p&gt;

&lt;h3&gt;JabbR&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://jabbr.net"&gt;https://jabbr.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a chat-room created by David Fowler, built on SignalR, NancyFX, and WD.Web.Authentication. It's a great place to get help from other .NET developers and help others. Quite a few OSS projects like Service Stack, Nuget, NancyFX, etc all have rooms there, so it's great to get direct contact with the project authors.&lt;/p&gt;

&lt;h3&gt;MightyMoose / NCrunch&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.continuoustests.com/"&gt;http://www.continuoustests.com/&lt;/a&gt; / &lt;a href="http://www.ncrunch.net/"&gt;http://www.ncrunch.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm still torn between these. Like em both...&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;And that's it, I haven't really changed much over the last year. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/04/what-i-would-like-to-see-from-microsoft-regarding-oss/</guid><link>http://www.philliphaydon.com/2013/04/what-i-would-like-to-see-from-microsoft-regarding-oss/</link><a10:author><a10:name /></a10:author><title>What I would like to see from Microsoft regarding OSS</title><description>&lt;p&gt;I had an awesome conversation on Monday with Glenn Block about Microsoft in regards to OSS, as a result Glenn asked me to write a post about what I would like to see Microsoft do.&lt;/p&gt;

&lt;p&gt;To be clear, everyone has their own opinions about what Microsoft is doing with Open Source Software, whats working, whats not, that isn't the point of this post. This is about what I would like to see, and why.&lt;/p&gt;

&lt;h3&gt;Promote itself with the community, not against it&lt;/h3&gt;

&lt;p&gt;One of the things I think Microsoft does is promote itself against the community, it has opened sourced MVC and WebAPI, but people outside the community don't know about the alternatives. &lt;/p&gt;

&lt;p&gt;I'm not suggesting that Microsoft actively promotes frameworks like FubuMVC, NancyFX, ServiceStack etc as their own, or in such a way that it overshadows their own stuff. What I would like to see is Microsoft promoting itself along side other frameworks. A lot of the guys who create these other frameworks are advisories for MVC/WebAPI, they help make Microsoft frameworks better, and there's all the people who contribute, and in my personal opinion Microsoft doesn't really give anything back to the community through its main channels.&lt;/p&gt;

</description><pubDate>Mon, 01 Apr 2013 16:00:00 Z</pubDate><a10:updated>2013-04-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I had an awesome conversation on Monday with Glenn Block about Microsoft in regards to OSS, as a result Glenn asked me to write a post about what I would like to see Microsoft do.&lt;/p&gt;

&lt;p&gt;To be clear, everyone has their own opinions about what Microsoft is doing with Open Source Software, whats working, whats not, that isn't the point of this post. This is about what I would like to see, and why.&lt;/p&gt;

&lt;h3&gt;Promote itself with the community, not against it&lt;/h3&gt;

&lt;p&gt;One of the things I think Microsoft does is promote itself against the community, it has opened sourced MVC and WebAPI, but people outside the community don't know about the alternatives. &lt;/p&gt;

&lt;p&gt;I'm not suggesting that Microsoft actively promotes frameworks like FubuMVC, NancyFX, ServiceStack etc as their own, or in such a way that it overshadows their own stuff. What I would like to see is Microsoft promoting itself along side other frameworks. A lot of the guys who create these other frameworks are advisories for MVC/WebAPI, they help make Microsoft frameworks better, and there's all the people who contribute, and in my personal opinion Microsoft doesn't really give anything back to the community through its main channels.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;People in the community help the community, we all know this stuff exists, but a lot of us are stuck in jobs where we cannot use it because it's not "Microsoft", I think if Microsoft helped promote itself with the community, people outside the community who hear of these things through the main channels would be more willing to integrate non-Microsoft technologies in their existing Microsoft solutions.&lt;/p&gt;

&lt;h3&gt;Ideas&lt;/h3&gt;

&lt;p&gt;I've often thought it would be awesome for Microsoft to accept articles on &lt;a href="http://www.asp.net"&gt;http://www.asp.net&lt;/a&gt; that weren't related to MVC / WebAPI / Web Forms, etc. I would love to see articles to do with other web technologies. In terms of web technologies, this is the go to place for a lot of companies.&lt;/p&gt;

&lt;h3&gt;A little less emphasis on Microsoft technologies&lt;/h3&gt;

&lt;p&gt;I have to admit, Microsoft has pretty much redeemed themselves on this one, when MVC 3 and 4 came out they heavily pushed their own Templates in Visual Studio which forces a LOT of technologies. EntityFramework, WebAPI, etc etc.&lt;/p&gt;

&lt;p&gt;This to me has a negative effect on the community because these are all pushed via Nuget, ever increasing the number of downloads and making it seem these technologies are more popular and a better choice than alternatives.&lt;/p&gt;

&lt;p&gt;Microsoft has since created a Truely empty Web Application project which I'm grateful for, but even their Empty MVC 4 project still contains WebAPI configuration.&lt;/p&gt;

&lt;p&gt;What I would like to see is Microsoft make creating templates MUCH easier for people, it would be great if owners of differ projects could much more easily create and maintain templates rather than throwing in the towel due to difficulty, or neglecting them because they are hard to maintain.&lt;/p&gt;

&lt;h3&gt;Your Ideas&lt;/h3&gt;

&lt;p&gt;I would love for anyone else reading this to add their own ideas on how they think Microsoft can help the Open Source Community. Either on Hacker News (linked below) or in the comments below. Or even blog your own ideas and let me know!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=5479043"&gt;Hacker News Comments&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/03/everyone-should-get-the-opportunity-to-learn-to-program-but-school-is-a-waste-of-time/</guid><link>http://www.philliphaydon.com/2013/03/everyone-should-get-the-opportunity-to-learn-to-program-but-school-is-a-waste-of-time/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Everyone should get the opportunity to learn to program, but school is a waste of time</title><description>&lt;p&gt;I just got done reading a &lt;a href="http://blog.filipekberg.se/2013/03/04/everyone-should-learn-programming/"&gt;blog post&lt;/a&gt; by &lt;a href="https://twitter.com/fekberg"&gt;@fekberg&lt;/a&gt; titled "Everyone Should Learn Programming"&lt;/p&gt;

&lt;p&gt;This idea that everyone should learn to program seems to be a growing trend. But I disagree. &lt;/p&gt;

&lt;p&gt;I don't think &lt;code&gt;everyone&lt;/code&gt; should learn to program, I think everyone should get the opportunity to learn to program. Schooling in general is a waste of time because it caters to this idea that life evolves around English, Math, Art, Science and General Knowledge. But real life doesn't, and these things don't help children figure out what they are good at or enjoy.&lt;/p&gt;

&lt;p&gt;There's an awesome TED video by Sir Ken Robinson titled "Do Schools Kill Creativity"&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=iG9CE55wbtY"&gt;http://www.youtube.com/watch?v=iG9CE55wbtY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;object width="480" height="360"&gt;&lt;param name="movie" value="https://www.youtube.com/v/iG9CE55wbtY?hl=en_US&amp;amp;version=3&amp;amp;rel=0"&gt;&lt;/param&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;embed src="https://www.youtube.com/v/iG9CE55wbtY?hl=en_US&amp;amp;version=3&amp;amp;rel=0" type="application/x-shockwave-flash" width="480" height="360" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's worth watching, awesome talk and very funny&lt;/strong&gt;&lt;/p&gt;

</description><pubDate>Sun, 03 Mar 2013 16:00:00 Z</pubDate><a10:updated>2013-03-03T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I just got done reading a &lt;a href="http://blog.filipekberg.se/2013/03/04/everyone-should-learn-programming/"&gt;blog post&lt;/a&gt; by &lt;a href="https://twitter.com/fekberg"&gt;@fekberg&lt;/a&gt; titled "Everyone Should Learn Programming"&lt;/p&gt;

&lt;p&gt;This idea that everyone should learn to program seems to be a growing trend. But I disagree. &lt;/p&gt;

&lt;p&gt;I don't think &lt;code&gt;everyone&lt;/code&gt; should learn to program, I think everyone should get the opportunity to learn to program. Schooling in general is a waste of time because it caters to this idea that life evolves around English, Math, Art, Science and General Knowledge. But real life doesn't, and these things don't help children figure out what they are good at or enjoy.&lt;/p&gt;

&lt;p&gt;There's an awesome TED video by Sir Ken Robinson titled "Do Schools Kill Creativity"&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=iG9CE55wbtY"&gt;http://www.youtube.com/watch?v=iG9CE55wbtY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;object width="480" height="360"&gt;&lt;param name="movie" value="https://www.youtube.com/v/iG9CE55wbtY?hl=en_US&amp;amp;version=3&amp;amp;rel=0"&gt;&lt;/param&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;embed src="https://www.youtube.com/v/iG9CE55wbtY?hl=en_US&amp;amp;version=3&amp;amp;rel=0" type="application/x-shockwave-flash" width="480" height="360" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's worth watching, awesome talk and very funny&lt;/strong&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;We spend so much time teaching kids they are wrong, teaching them that they are failures because they fail subjects they aren't interested in, while not allowing them to do the things they are interested in.&lt;/p&gt;

&lt;h2&gt;A little about me&lt;/h2&gt;

&lt;p&gt;I got told I had &lt;a href="http://en.wikipedia.org/wiki/Attention_deficit_disorder"&gt;ADD&lt;/a&gt; and was put on drugs, and guess what, those drugs don't do ANYTHING. It made me act no differently at school, but the doctors had no problem selling them to my parents. Yet thinking about my schooling, the times I messed around and annoyed others, was when I was stuck in classes learning stuff that I was bored of.&lt;/p&gt;

&lt;p&gt;I was forced to learn History, despite the fact I love History and I watch documentaries ALL the time, learning about New Zealand history and common events is boring, I couldn't care less, I distinctly remember asking my teacher if we got to learn Egyption history, and being told it was not part of the curriculum. &lt;/p&gt;

&lt;p&gt;I don't remember anything about 'Social Studies', another boring subject I was forced to take. I hated english class because my opinion was "I can speak English, why do I need to take an English class?". &lt;/p&gt;

&lt;p&gt;The only subjects I ever passed in school was Math, Science, and Technical Drawing (until they changed the subject to "Drawing")&lt;/p&gt;

&lt;p&gt;My time at school was SO bad, my english teacher told my parents that there was no hope for me and I was going to be a bum. &lt;/p&gt;

&lt;p&gt;The best thing that happened to me though, was my Dad bought me a Commadore 64, with 3 games, and some BASIC 2 manuals. After playing the games, I learnt to program, I finished most of the book teaching me how to build a question/answer games and other super basic things, and taking what I learnt I built a Hang Man game with ascii graphics. I was 8 years old.&lt;/p&gt;

&lt;p&gt;I'm about to turn 27, and despite the fact that I failed year 12 two years in a row and dropped out, and never went to university... I love my life, my job, and I amaze myself with how far I've come, all because my DAD gave me the opportunity to learn to program. &lt;/p&gt;

&lt;h2&gt;My opinion&lt;/h2&gt;

&lt;p&gt;So I've ranted on a little bit... what is my opinion?&lt;/p&gt;

&lt;p&gt;I think the entire schooling idea needs to be scrapped, it's not relevant by todays standards, and it needs to be re-invented to give kids the opportunity to learn not only all the things they need to learn in life, but allow them to focus on the things they are good at, and the things they enjoy. &lt;/p&gt;

&lt;p&gt;We need to STOP testing kids and telling them they aren't intelligent by grading them against other kids. Just because someone can memorize a book doesn't make them more intelligent than the kid next to them who struggled to read the book. Just because one kid is good at math and another is not, doesn't mean he should fail school.&lt;/p&gt;

&lt;p&gt;We need to develop education that allows kids to learn to the best of their ability and not force every kid to learn the same way.&lt;/p&gt;

&lt;p&gt;We hinder the progression of kids by grouping them by age rather than ability. We hinder them by making them learn the same way.&lt;/p&gt;

&lt;p&gt;We need to stop blaming kids and coming up with excuses because they don't learn the same way the rest of the kids do. &lt;/p&gt;

&lt;p&gt;We need to teach kids to think and learn, and stop indoctrinating education on them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; I posted this on Hacker News, lots of good comments on there, for and against. Enjoyed reading them. &lt;/p&gt;

&lt;p&gt;&lt;a href="http://news.ycombinator.com/item?id=5318224"&gt;http://news.ycombinator.com/item?id=5318224&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/02/windows-store-app-with-caliburn-micro-binding-converters/</guid><link>http://www.philliphaydon.com/2013/02/windows-store-app-with-caliburn-micro-binding-converters/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App with Caliburn.Micro - Binding Converters</title><description>&lt;p&gt;In my last post about &lt;a href="http://www.philliphaydon.com/2013/01/windows-store-app-with-caliburn-micro-basic-binding"&gt;Basic Binding&lt;/a&gt; we added the ability to Hide/Show a control using Viability property of the control to make it &lt;code&gt;Visible&lt;/code&gt; or &lt;code&gt;Collapsed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However the View Model shouldn't have any real knowledge of how the view works, meaning it shouldn't actually dictate the visibility using the controls properties.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I left this out of the original post because I wanted to keep it 'Basic' without confusing binding with converters and such, making the topic more complicated&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If in the future you changed from say &lt;code&gt;TextBlock&lt;/code&gt; to a 3rd party control called &lt;code&gt;BananaTextBlock&lt;/code&gt; and that 3rd party decided that they were not going to use the built in Viability enum, and instead decided to create their own naming convention, and enum etc. You would be forced to change your ViewModel, which isn't good.&lt;/p&gt;

&lt;p&gt;That's where Value Converters come in handy. &lt;/p&gt;

</description><pubDate>Mon, 25 Feb 2013 16:00:00 Z</pubDate><a10:updated>2013-02-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In my last post about &lt;a href="http://www.philliphaydon.com/2013/01/windows-store-app-with-caliburn-micro-basic-binding"&gt;Basic Binding&lt;/a&gt; we added the ability to Hide/Show a control using Viability property of the control to make it &lt;code&gt;Visible&lt;/code&gt; or &lt;code&gt;Collapsed&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However the View Model shouldn't have any real knowledge of how the view works, meaning it shouldn't actually dictate the visibility using the controls properties.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I left this out of the original post because I wanted to keep it 'Basic' without confusing binding with converters and such, making the topic more complicated&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If in the future you changed from say &lt;code&gt;TextBlock&lt;/code&gt; to a 3rd party control called &lt;code&gt;BananaTextBlock&lt;/code&gt; and that 3rd party decided that they were not going to use the built in Viability enum, and instead decided to create their own naming convention, and enum etc. You would be forced to change your ViewModel, which isn't good.&lt;/p&gt;

&lt;p&gt;That's where Value Converters come in handy. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Creating your own Converter&lt;/h2&gt;

&lt;p&gt;Value Converters are easy to implement, simply create a new class and inherit the &lt;code&gt;IValueConverter&lt;/code&gt; interface. There are two methods you need to implement, the &lt;code&gt;Convert&lt;/code&gt;, this is where you convert your object to the target type. &lt;/p&gt;

&lt;p&gt;i.e if your View Model uses a &lt;code&gt;Boolean&lt;/code&gt;, you would accept the &lt;code&gt;Boolean&lt;/code&gt; type and convert it to a &lt;code&gt;Visibility&lt;/code&gt; type. &lt;/p&gt;

&lt;p&gt;The second method is ConvertBack, where it takes the control type and converts it back to the ViewModel type. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public sealed class BooleanToVisibilityConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, string language)
    {
        if (!(value is bool))
            throw new ArgumentException("value is not type of boolean");        

        return (bool)value ? Visibility.Visible : Visibility.Collapsed;
    }

    public object ConvertBack(object value, Type targetType, object parameter, string language)
    {
        if (!(value is Visibility))
            throw new ArgumentException("value is not type of Visibility");

        return (Visibility)value == Visibility.Visible;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Registering your Value Converter&lt;/h2&gt;

&lt;p&gt;You can do this in a couple of different places, it's similar to registering any other Resource.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page.Resources&lt;/li&gt;
&lt;li&gt;Application.Resources&lt;/li&gt;
&lt;li&gt;separate Resource file. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm only going to show it at Page.Resources&lt;/p&gt;

&lt;p&gt;In the root Page node of your view, add the namespace to your converts&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xmlns:sp="using:SampleProject.Converters"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your View, add a element called &lt;code&gt;Page.Resources&lt;/code&gt; and then using the alias for the namespace just added &lt;code&gt;sp&lt;/code&gt; reference the converter we just created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Page.Resources&amp;gt;
    &amp;lt;sp:BooleanToVisibilityConverter x:Key="TrueConveter" /&amp;gt;
&amp;lt;/Page.Resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Key&lt;/code&gt; is the name we will use when referencing the converter.&lt;/p&gt;

&lt;h2&gt;Updating the ViewModel from Visibility to Boolean&lt;/h2&gt;

&lt;p&gt;The original post used the Visibility enum, but we need to update this to be a boolean&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public bool TextBlockVisibility
{
    get { return _textBlockVisibility; }
    set
    {
        if (value == _textBlockVisibility)
            return;

        _textBlockVisibility = value;

        NotifyOfPropertyChange();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The button we used to change the value is also updated&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void UpdateText()
{
    TextBlockVisibility = !TextBlockVisibility;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will just invert the existing value each time it's clicked, like before.&lt;/p&gt;

&lt;h2&gt;Using the converter&lt;/h2&gt;

&lt;p&gt;Now we need to update the &lt;code&gt;TextBlock&lt;/code&gt; from the original post&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextBlock FontSize="28" 
           Text="{Binding Message}" 
           Visibility="{Binding TextBlockVisibility}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use the converter, in the binding we simply want to add a comma at the end and specify a Converter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextBlock FontSize="28"
           Text="{Binding Message}"
           Visibility="{Binding TextBlockVisibility,
                        Converter={StaticResource TrueConveter}}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the app, and click the button, it should hide/show, and our ViewModel now no longer needs to know how to change the visibility of the control. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/02/windows-store-app-with-caliburn-micro-getting-started-updated/</guid><link>http://www.philliphaydon.com/2013/02/windows-store-app-with-caliburn-micro-getting-started-updated/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App with Caliburn.Micro - Getting Started (Updated)</title><description>&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is an update post for &lt;a href="http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/"&gt;Windows Store App with Caliburn.Micro - Getting Started&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Back in December I blogged about &lt;a href="http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/"&gt;getting started&lt;/a&gt; with Caliburn.Micro, not long after I created the post a &lt;a href="http://devlicio.us/blogs/rob_eisenberg/archive/2013/01/20/caliburn-micro-v1-4-1-released.aspx"&gt;new version&lt;/a&gt; (v1.4.1) was released.&lt;/p&gt;

&lt;p&gt;The changes in this release break my previous blog post so I'm updating here.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The original post still applies, the change is only to the setup of the App&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;App Setup&lt;/h2&gt;

&lt;p&gt;In the previous post when we configured the container, all we needed to do was Register the WinRT Services.&lt;/p&gt;

</description><pubDate>Tue, 19 Feb 2013 16:00:00 Z</pubDate><a10:updated>2013-02-19T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is an update post for &lt;a href="http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/"&gt;Windows Store App with Caliburn.Micro - Getting Started&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Back in December I blogged about &lt;a href="http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/"&gt;getting started&lt;/a&gt; with Caliburn.Micro, not long after I created the post a &lt;a href="http://devlicio.us/blogs/rob_eisenberg/archive/2013/01/20/caliburn-micro-v1-4-1-released.aspx"&gt;new version&lt;/a&gt; (v1.4.1) was released.&lt;/p&gt;

&lt;p&gt;The changes in this release break my previous blog post so I'm updating here.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The original post still applies, the change is only to the setup of the App&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;App Setup&lt;/h2&gt;

&lt;p&gt;In the previous post when we configured the container, all we needed to do was Register the WinRT Services.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;protected override void Configure()
{
    container = new WinRTContainer();
    container.RegisterWinRTServices();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the default container no longer auto creates concrete types, which causes View Models to not auto create. To fix this we do one of two things.&lt;/p&gt;

&lt;h2&gt;Manually Register Types&lt;/h2&gt;

&lt;p&gt;In the Configure method, we can manually register the View Model like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void Configure()
{
    container = new WinRTContainer();
    container.RegisterWinRTServices();
    container.PerRequest&amp;lt;MainViewModel&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the app, the View Model should now be created when you navigate to the View. The downside to this approach is that you need to do this for every view model which can be tedious.&lt;/p&gt;

&lt;h2&gt;Automate the Registration&lt;/h2&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This approach came from the samples.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Instead of manually registering, we can automate it by over-riding the &lt;code&gt;GetInstance&lt;/code&gt; method and manually registering the type if it doesn't exist.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static bool IsConcrete(Type service)
{
    var serviceInfo = service.GetTypeInfo();
    return !serviceInfo.IsAbstract &amp;amp;&amp;amp; !serviceInfo.IsInterface;
}

protected override object GetInstance(Type service, string key)
{
    var obj = container.GetInstance(service, key);

    // mimic previous behaviour of WinRT SimpleContainer
    if (obj == null &amp;amp;&amp;amp; IsConcrete(service))
    {
        container.RegisterPerRequest(service, key, service);
        obj = container.GetInstance(service, key);
    }

    return obj;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example we attempt to get the instance, if it doesn't exist, but it's a concrete type, then we register it and then Get/Return it. &lt;/p&gt;

&lt;p&gt;And that's it :) &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/02/windows-store-app-adding-advertising/</guid><link>http://www.philliphaydon.com/2013/02/windows-store-app-adding-advertising/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App - Adding Advertising</title><description>&lt;p&gt;I searched for hours trying to figure this out and I think the information is a little scarce or not obvious.&lt;/p&gt;

&lt;p&gt;Basically I wanted to add some advertising to my app, I'm trying to cover multiple different area's in order to learn what's involved, and I thought I had it all down, only to work out that the advert's that were displaying were test adverts and not the real thing.&lt;/p&gt;

&lt;p&gt;Now don't get me wrong, when you actually do find the correct URL (by searching Advertising rather than Ad) the MSDN link does have all the information, I didn't find this out until my friend actually sent it to me...&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/advertising-windows-sdk(v=msads.10).aspx"&gt;http://msdn.microsoft.com/en-us/library/advertising-windows-sdk(v=msads.10).aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's two main things you need to do (besides installing the correct SDK, I had the Beta first time around)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implement the advert into your app&lt;/li&gt;
&lt;li&gt;Setup an advertising account&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first part is easy... (well the 2nd part is too... but I didn't realise that at first)&lt;/p&gt;

</description><pubDate>Wed, 13 Feb 2013 16:00:00 Z</pubDate><a10:updated>2013-02-13T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I searched for hours trying to figure this out and I think the information is a little scarce or not obvious.&lt;/p&gt;

&lt;p&gt;Basically I wanted to add some advertising to my app, I'm trying to cover multiple different area's in order to learn what's involved, and I thought I had it all down, only to work out that the advert's that were displaying were test adverts and not the real thing.&lt;/p&gt;

&lt;p&gt;Now don't get me wrong, when you actually do find the correct URL (by searching Advertising rather than Ad) the MSDN link does have all the information, I didn't find this out until my friend actually sent it to me...&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/advertising-windows-sdk(v=msads.10).aspx"&gt;http://msdn.microsoft.com/en-us/library/advertising-windows-sdk(v=msads.10).aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's two main things you need to do (besides installing the correct SDK, I had the Beta first time around)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implement the advert into your app&lt;/li&gt;
&lt;li&gt;Setup an advertising account&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first part is easy... (well the 2nd part is too... but I didn't realise that at first)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Implementing your advert&lt;/h2&gt;

&lt;p&gt;Head on over to MSDN to download the &lt;a href="http://go.microsoft.com/?linkid=9815330"&gt;Microsoft Advertising SDK&lt;/a&gt; and install it.&lt;/p&gt;

&lt;p&gt;After installing, open up your solution and add a reference to the &lt;code&gt;Microsoft Advertising SDK for Windows 8 (Xaml)&lt;/code&gt; assembly. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/win-app-ad-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now you can use the Tools to drag/drop the advert control to your Xaml file. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ui:AdControl Name="Advert"
              Grid.Row="1"
              Width="728"
              Height="90"
              Margin="30,441,0,0"
              HorizontalAlignment="Left"
              VerticalAlignment="Top"
              AdUnitId="10042998"
              ApplicationId="d25517cb-12d4-4699-8bdc-52040c712cab" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two things that are important are the &lt;code&gt;AdUnitId&lt;/code&gt; and &lt;code&gt;ApplicationId&lt;/code&gt;, the ApplicationId should get populated automatically using the test value. (the value shown in the code above) if not, you can manually assign it.&lt;/p&gt;

&lt;p&gt;To test your advert you need to add a &lt;code&gt;AdUnitId&lt;/code&gt; specific to the dimensions you want to show, and for the type of advert you want to test.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;
        pubCenter Ad Unit Size (Width x Height)
      &lt;/th&gt;
      &lt;th&gt;
        Experience
      &lt;/th&gt;
      &lt;th&gt;
        AdUnitId
      &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        160 x 600
      &lt;/td&gt;
      &lt;td&gt;
        Windows 8 Image Ad with click to Full Screen Image
      &lt;/td&gt;
      &lt;td&gt;
        10043136
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        160 x 600
      &lt;/td&gt;
      &lt;td&gt;
        Windows 8 Video Ad with click to Full Screen Video
      &lt;/td&gt;
      &lt;td&gt;
        10043135
      &lt;/td&gt;
      &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;
        160 x 600
      &lt;/td&gt;
      &lt;td&gt;
        Windows 8 Image Ad
      &lt;/td&gt;
      &lt;td&gt;
        10043134
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You can find a full list of test modes on &lt;a href="http://msdn.microsoft.com/en-us/library/advertising-windows-test-mode-values(v=msads.10).aspx"&gt;MSDN - Test Mode Values&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find the Height/Width you want, ensure your Ad control is set to the same Height/Width, and assign the corresponding &lt;code&gt;AdUnitId&lt;/code&gt; to the control.&lt;/p&gt;

&lt;p&gt;Now when you run your app you should get something like&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/win-app-ad-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The next thing you need to do is add some error handling. To do this you just add the event to the control directly like &lt;code&gt;ErrorOccurred="AdvertErrorOccurred"&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void AdvertErrorOccurred(object sender, Microsoft.Advertising.WinRT.UI.AdErrorEventArgs e)
{
    Advert.Visibility = Visibility.Collapsed;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may want to do something more, maybe try loading a different sized advert. I've chosen to just hide the control instead.&lt;/p&gt;

&lt;h2&gt;Setup an advertising account&lt;/h2&gt;

&lt;p&gt;Head on over to &lt;a href="https://pubcenter.microsoft.com/"&gt;https://pubcenter.microsoft.com/&lt;/a&gt; and login with your Windows Live account (or signup)&lt;/p&gt;

&lt;p&gt;First you will need to head on over to the Accounts&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/win-app-ad-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Once you have created an account (you don't need to add a payout right away, you can do that in the future when you've generated some revenue), you need to head on over to Setup.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/win-app-ad-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You need to Register your application, and then you need to create an AdUnit. This stuff is really straight forward so should be easy peasy.&lt;/p&gt;

&lt;p&gt;Once you have registered your app (which gives you the &lt;code&gt;ApplicationId&lt;/code&gt;) and created an AdUnit (which gives you the &lt;code&gt;AdUnitId&lt;/code&gt;) you can replace the values in your app, and publish your app with advertising in it :D&lt;/p&gt;

&lt;p&gt;Although this information is available on the net, I initially had trouble finding it, so hopefully this helps anyone else out with confusion.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/02/x-http-method-override-with-nancyfx/</guid><link>http://www.philliphaydon.com/2013/02/x-http-method-override-with-nancyfx/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>X-Http-Method-Override with NancyFX</title><description>&lt;p&gt;Forms in HTML only allow you to use the method's POST and GET, I'm not sure if this would be classified as a limitation or not, but it does introduce a slight problem when you want to create a nice API taking advantage of verbs such as PUT and DELETE, when you can only POST and GET. &lt;/p&gt;

&lt;p&gt;This means if you want to delete something you have to use a different URL, like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/products/123/delete&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then define a route like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post["/products/{id}/delete"] = _ =&amp;gt;
{
    ... Do Something...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn't exactly ideal, what we would prefer to have is a more semantic route.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; -&gt; gets an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; -&gt; deletes an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; -&gt; modifies an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt; -&gt; modifies part of an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt; -&gt; creates an object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm no expert on this stuff so the VERBs above may not be correct wording.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This would allow us to define the same route like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Delete["/products/{id}"] = _ =&amp;gt;
{
    ... Do Something...
};
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sun, 10 Feb 2013 16:00:00 Z</pubDate><a10:updated>2013-02-10T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Forms in HTML only allow you to use the method's POST and GET, I'm not sure if this would be classified as a limitation or not, but it does introduce a slight problem when you want to create a nice API taking advantage of verbs such as PUT and DELETE, when you can only POST and GET. &lt;/p&gt;

&lt;p&gt;This means if you want to delete something you have to use a different URL, like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/products/123/delete&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then define a route like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post["/products/{id}/delete"] = _ =&amp;gt;
{
    ... Do Something...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This isn't exactly ideal, what we would prefer to have is a more semantic route.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; -&gt; gets an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; -&gt; deletes an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; -&gt; modifies an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt; -&gt; modifies part of an object&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST&lt;/code&gt; -&gt; creates an object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm no expert on this stuff so the VERBs above may not be correct wording.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This would allow us to define the same route like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Delete["/products/{id}"] = _ =&amp;gt;
{
    ... Do Something...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Since HTML forms only allow GET/POST, the web framework needs to do a little bit of trickery in order to send a request to the correct route/verb. In this case we want to use a POST but have it go to a DELETE route.&lt;/p&gt;

&lt;p&gt;MVC offers the ability to use the &lt;code&gt;HttpMethodOverride&lt;/code&gt; helper to add a hidden input field to a form&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.HttpMethodOverride(HttpVerbs.Delete)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate a hidden field like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input name="X-HTTP-Method-Override" type="hidden" value="DELETE" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NancyFX also allows you to override the Method, but the field is actually named &lt;code&gt;_method&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="hidden" name="_method" value="DELETE"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm not actually sure &lt;em&gt;why&lt;/em&gt; the NancyFX team decided to name it &lt;code&gt;_method&lt;/code&gt; rather than &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt;, though from reading it seems if you're posting a form it should be &lt;code&gt;_method&lt;/code&gt;, but if you're sending it via headers it should be &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; (turns out they followed Sinatra)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Give a super basic scenario, I defined a module&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ProductsModule() : base("products")
{
    Get["/"] = _ =&amp;gt; View["index", Products];

    Delete["/{id}"] = _ =&amp;gt;
    {
        Products.Remove(Products.Single(x =&amp;gt; x.Id == (int)_.id));

        return View["index", Products];
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Products is just a static list products. The view contains the following&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  @Each.Model
  &amp;lt;li&amp;gt;
      &amp;lt;form action="/products/@Current.Id" method="POST"&amp;gt;        
        &amp;lt;label&amp;gt;@Current.Name&amp;lt;/label&amp;gt;
        &amp;lt;input type="submit" value="Delete"/&amp;gt;
      &amp;lt;/form&amp;gt;   
  &amp;lt;/li&amp;gt; 
  @EndEach
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This demo is using the Nancy Super Simple View Engine, not Razor :)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This renders the page like&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-method-override-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the delete button&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-method-override-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it doesn't hit the Delete route, so if we update the View to contain the &lt;code&gt;_method&lt;/code&gt; field&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  @Each.Model
  &amp;lt;li&amp;gt;
      &amp;lt;form action="/products/@Current.Id" method="POST"&amp;gt;
        &amp;lt;input type="hidden" name="_method" value="DELETE"/&amp;gt;

        &amp;lt;label&amp;gt;@Current.Name&amp;lt;/label&amp;gt;
        &amp;lt;input type="submit" value="Delete"/&amp;gt;
      &amp;lt;/form&amp;gt;   
  &amp;lt;/li&amp;gt; 
  @EndEach
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now click the delete button again&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-method-override-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can see that it hits the correct route.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-method-override-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And the item (Product 4) has been removed from the list. So that's it, super simple to override the Method verb in NancyFX :)&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; At the time of writing this, version 0.15.3 only supports &lt;code&gt;_method&lt;/code&gt; on form posts, but the next version will support both &lt;code&gt;X-HTTP-Method-Override&lt;/code&gt; and &lt;code&gt;_method&lt;/code&gt; on both Headers and Forms.&lt;/span&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/02/oauth-with-asp-net-mvc-and-world-domination-authentication/</guid><link>http://www.philliphaydon.com/2013/02/oauth-with-asp-net-mvc-and-world-domination-authentication/</link><a10:author><a10:name /></a10:author><category>ASP.NET MVC</category><title>OAuth with ASP.NET MVC and WorldDomination.Web.Authentication</title><description>&lt;p&gt;This post is a follow on from my previous post &lt;a href="http://www.philliphaydon.com/2013/01/oauth-with-nancyfx-and-world-domination-authentication/"&gt;OAuth with NancyFX and WorldDomination.Web.Authentication&lt;/a&gt; except this demonstrates how you can use WorldDomination.Web.Authentication with ASP.NET MVC, writing only minimal code in the process.&lt;/p&gt;

&lt;p&gt;To save you jumping to the other post, I'll quote myself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the biggest pains of building websites, in my opinion, is implementing OAuth providers, it's often fiddly, doesn't work, and frameworks that are created to try make things easier, don't seem to make it easier. &lt;/p&gt;
  
  &lt;p&gt;So &lt;a href="https://github.com/PureKrome"&gt;PureKrome&lt;/a&gt; and myself decided to create &lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;WorldDomination: Web Authentication&lt;/a&gt;&lt;/p&gt;
  
  &lt;p&gt;The idea behind this framework is to keep it super simple to implement OAuth into your website, without the bloat. The core framework ONLY deals with Google, Twitter, and Facebook authentication. It doesn't try to create a fancy UI for you, it doesn't require you to write lots and lots of code. You simply give it some info, it redirects, it comes back and gives you the authentication info.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So without further adieu...&lt;/p&gt;

&lt;h3&gt;Installing&lt;/h3&gt;

&lt;p&gt;Installing the library for MVC requires installing the MVC specific library.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package WorldDomination.Web.Authentication.Mvc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WorldDomination.Web.Authentication.Mvc&lt;/li&gt;
&lt;li&gt;WorldDomination.Web.Authentication&lt;/li&gt;
&lt;li&gt;RestSharp&lt;/li&gt;
&lt;/ul&gt;

</description><pubDate>Mon, 04 Feb 2013 16:00:00 Z</pubDate><a10:updated>2013-02-04T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This post is a follow on from my previous post &lt;a href="http://www.philliphaydon.com/2013/01/oauth-with-nancyfx-and-world-domination-authentication/"&gt;OAuth with NancyFX and WorldDomination.Web.Authentication&lt;/a&gt; except this demonstrates how you can use WorldDomination.Web.Authentication with ASP.NET MVC, writing only minimal code in the process.&lt;/p&gt;

&lt;p&gt;To save you jumping to the other post, I'll quote myself:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the biggest pains of building websites, in my opinion, is implementing OAuth providers, it's often fiddly, doesn't work, and frameworks that are created to try make things easier, don't seem to make it easier. &lt;/p&gt;
  
  &lt;p&gt;So &lt;a href="https://github.com/PureKrome"&gt;PureKrome&lt;/a&gt; and myself decided to create &lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;WorldDomination: Web Authentication&lt;/a&gt;&lt;/p&gt;
  
  &lt;p&gt;The idea behind this framework is to keep it super simple to implement OAuth into your website, without the bloat. The core framework ONLY deals with Google, Twitter, and Facebook authentication. It doesn't try to create a fancy UI for you, it doesn't require you to write lots and lots of code. You simply give it some info, it redirects, it comes back and gives you the authentication info.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So without further adieu...&lt;/p&gt;

&lt;h3&gt;Installing&lt;/h3&gt;

&lt;p&gt;Installing the library for MVC requires installing the MVC specific library.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package WorldDomination.Web.Authentication.Mvc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WorldDomination.Web.Authentication.Mvc&lt;/li&gt;
&lt;li&gt;WorldDomination.Web.Authentication&lt;/li&gt;
&lt;li&gt;RestSharp&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The first package is the ASP.NET MVC provider, this wires up all the routes and handles the redirect and callback.&lt;/p&gt;

&lt;p&gt;The second package is the actual implementation, this has no dependency on &lt;code&gt;NancyContext&lt;/code&gt; or &lt;code&gt;System.Web&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last package is required by &lt;code&gt;WorldDomination.Web.Authentication&lt;/code&gt; to process the callback and deserialize the response.&lt;/p&gt;

&lt;h3&gt;Configuring&lt;/h3&gt;

&lt;p&gt;Now that it's installed, we need to configure it, this is done one of two ways, by adding the information to the &lt;code&gt;web.config&lt;/code&gt;, or by registering the information in the &lt;code&gt;Global.asax&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'm going to show the &lt;code&gt;web.config&lt;/code&gt; way, but you can &lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication/wiki"&gt;visit the github wiki&lt;/a&gt; for &lt;code&gt;WorldDomination.Web.Authentication&lt;/code&gt; on information to configure via the Global.asax.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;web.config&lt;/code&gt; add a config section like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section name="authenticationProviders"
         type="WorldDomination.Web.Authentication.Config.ProviderConfiguration, WorldDomination.Web.Authentication" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the &lt;code&gt;authenticationProviders&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;authenticationProviders&amp;gt;
  &amp;lt;providers&amp;gt;
    &amp;lt;add name="Facebook" key="470874...41" secret="02bb584...332fe2" /&amp;gt;
    &amp;lt;add name="Google" key="58714009...ent.com" secret="npk...ooxCEY" /&amp;gt;
    &amp;lt;add name="Twitter" key="Rb7qNNP...znFTbF6Q" secret="pP...7hu9c" /&amp;gt;
  &amp;lt;/providers&amp;gt;
&amp;lt;/authenticationProviders&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These are the key/secret you get when you register your application with the providers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can get the key/secret registering your apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook: http://developers.facebook.com/docs/howtos/login/server-side-login/&lt;/li&gt;
&lt;li&gt;Twitter: https://dev.twitter.com/&lt;/li&gt;
&lt;li&gt;Google: https://code.google.com/apis/console/?pli=1#access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&lt;strong&gt;Note:&lt;/strong&gt; Please refer to the 'Adding some buttons' section on the URLs for use when registering.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Registering the routes&lt;/h3&gt;

&lt;p&gt;Unlike Nancy, we need to tell Mvc to register the routes, if you don't mind using the built in routes you can simply call the registration, passing in the route table, and you will get the default routes described in the rest of this blog post.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WorldDominationRouteConfig.RegisterRoutes(RouteTable.Routes);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&lt;strong&gt;Note:&lt;/strong&gt; This must be registered BEFORE your own routes, otherwise your default route will override the WorldDomination specific routes and then you will end up with issues such as the controller doesn't exist.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The routes registered are two specific ones:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;routes.MapRoute(
    name: "WorldDominationAutomatedMvc-Redirect",
    url: "authentication/redirect/{providerkey}/{additionaldata}",
    defaults: new { controller = "WorldDominationAuthentication", action = "RedirectToProvider", additionaldata = UrlParameter.Optional }
);
routes.MapRoute(
    name: "WorldDominationAutomatedMvc-AuthenticateCallback",
    url: "authentication/authenticatecallback",
    defaults: new { controller = "WorldDominationAuthentication", action = "AuthenticateCallback" }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively if you want to specify your own routes, you can copy the route registration above and define your own paths.&lt;/p&gt;

&lt;h3&gt;Implementing your callback&lt;/h3&gt;

&lt;p&gt;Now you need to implement a callback, this callback is what YOU want to do with the result from a successful (or failed) authentication, you need to implement this because we don't know what you have planned, if you want to create a session, set a cookie, use form authentication, what ever, that's up to you.&lt;/p&gt;

&lt;p&gt;To do this you can create a new class and implement the interface &lt;code&gt;IAuthenticationCallbackProvider&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SampleCallbackProvider : IAuthenticationCallbackProvider
{
    public ActionResult Process(HttpContextBase context, AuthenticateCallbackData model)
    {
        return new ViewResult
        {
            ViewName = "AuthenticateCallback",
            ViewData = new ViewDataDictionary(model)
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example will simply respond with the view &lt;code&gt;AuthenticateCallback&lt;/code&gt; and pass it the model with the data returned from the provider. Ideally you would check to see if the user is new, or if you need to add him to your database, or authenticate him with your system. &lt;/p&gt;

&lt;p&gt;You can take a look at the implementation used by JabbR &lt;a href="https://github.com/davidfowl/JabbR/blob/master/JabbR/Nancy/JabbRAuthenticationCallbackProvider.cs"&gt;here&lt;/a&gt;, which I've mirrored as a &lt;a href="https://gist.github.com/4674109"&gt;gist here&lt;/a&gt; in-case it is changed or moved and the link becomes dead.&lt;/p&gt;

&lt;p&gt;Although the JabbR implementation is for NancyFX, it will give you an idea of what you can achieve. The main difference is the MVC version will pass you the HttpContext of the current controller, while the NancyFX one passes you the NancyModule. The implementation would be pretty much identical.&lt;/p&gt;

&lt;h3&gt;Adding some buttons&lt;/h3&gt;

&lt;p&gt;Last of all, you need to add some buttons to the screen. This is where you have to link to some specific URLs.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These links will be configurable in the future, but for now they are hard-coded.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The two URLs used by the system are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redirect: /authentication/redirect/&lt;em&gt;provider key&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Callback: /authentication/authenticatecallback?providerkey=&lt;em&gt;provider key&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples: The links you would add to your page would be similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href="/authentication/redirect/Twitter"&amp;gt;&amp;lt;img src="/Content/twitter_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href="/authentication/redirect/Facebook"&amp;gt;&amp;lt;img src="/Content/facebook_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href="/authentication/redirect/Google"&amp;gt;&amp;lt;img src="/Content/google_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These links are just normal hyperlinks, giving you absolute freedom and flexibility to style them any way you want. Because we have absolutely NO involvement in the generation of the links, we cannot get in the way.&lt;/p&gt;

&lt;p&gt;All you need to do is ensure that the links provided to us look like the above.&lt;/p&gt;

&lt;p&gt;Your callback urls would end up looking like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=twitter&lt;/li&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=facebook&lt;/li&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The urls are forced to be lowercase because Google is case sensitive, so when registering your app with google please make sure the url is registered all lowercase.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And you're done!&lt;/p&gt;

&lt;p&gt;Now you can run your app:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We click on Google:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we get redirected back to the website after allowing the authentication with Google:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;p&gt;The sample can be found on github here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication/tree/master/Samples/MvcAutomatedSample"&gt;https://github.com/PureKrome/WorldDomination.Web.Authentication/tree/master/Samples/MvcAutomatedSample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the source code on github: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication"&gt;https://github.com/PureKrome/WorldDomination.Web.Authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the Nuget packages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;http://www.nuget.org/packages/WorldDomination.Web.Authentication/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication.Mvc/"&gt;http://www.nuget.org/packages/WorldDomination.Web.Authentication.Mvc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/oauth-with-nancyfx-and-world-domination-authentication/</guid><link>http://www.philliphaydon.com/2013/01/oauth-with-nancyfx-and-world-domination-authentication/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>OAuth with NancyFX and WorldDomination.Web.Authentication</title><description>&lt;p&gt;One of the biggest pains of building websites, in my opinion, is implementing OAuth providers, it's often fiddly, doesn't work, and frameworks that are created to try make things easier, don't seem to make it easier. &lt;/p&gt;

&lt;p&gt;So &lt;a href="https://github.com/PureKrome"&gt;PureKrome&lt;/a&gt; and myself decided to create &lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;WorldDomination: Web Authentication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea behind this framework is to keep it super simple to implement OAuth into your website, without the bloat. The core framework ONLY deals with Google, Twitter, and Facebook authentication. It doesn't try to create a fancy UI for you, it doesn't require you to write lots and lots of code. You simply give it some info, it redirects, it comes back and gives you the authentication info.&lt;/p&gt;

&lt;p&gt;Just recently the guys contributing to JabbR decided to use the library, and with feedback we added some really awesome support for NancyFX which I will show.&lt;/p&gt;

&lt;h3&gt;Installing&lt;/h3&gt;

&lt;p&gt;Installing the libary for Nancy requires installing the Nancy specific library.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package Nancy.Authentication.WorldDomination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nancy.Authentication.WorldDomination&lt;/li&gt;
&lt;li&gt;WorldDomination.Web.Authentication&lt;/li&gt;
&lt;li&gt;RestSharp&lt;/li&gt;
&lt;/ul&gt;

</description><pubDate>Wed, 30 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One of the biggest pains of building websites, in my opinion, is implementing OAuth providers, it's often fiddly, doesn't work, and frameworks that are created to try make things easier, don't seem to make it easier. &lt;/p&gt;

&lt;p&gt;So &lt;a href="https://github.com/PureKrome"&gt;PureKrome&lt;/a&gt; and myself decided to create &lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;WorldDomination: Web Authentication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea behind this framework is to keep it super simple to implement OAuth into your website, without the bloat. The core framework ONLY deals with Google, Twitter, and Facebook authentication. It doesn't try to create a fancy UI for you, it doesn't require you to write lots and lots of code. You simply give it some info, it redirects, it comes back and gives you the authentication info.&lt;/p&gt;

&lt;p&gt;Just recently the guys contributing to JabbR decided to use the library, and with feedback we added some really awesome support for NancyFX which I will show.&lt;/p&gt;

&lt;h3&gt;Installing&lt;/h3&gt;

&lt;p&gt;Installing the libary for Nancy requires installing the Nancy specific library.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package Nancy.Authentication.WorldDomination&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This will install:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nancy.Authentication.WorldDomination&lt;/li&gt;
&lt;li&gt;WorldDomination.Web.Authentication&lt;/li&gt;
&lt;li&gt;RestSharp&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The first package is the Nancy provider, this wires up all the routes and handles the redirect and callback.&lt;/p&gt;

&lt;p&gt;The second package is the actual implementation, this has no dependency on &lt;code&gt;NancyContext&lt;/code&gt; or &lt;code&gt;System.Web&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The last package is required by &lt;code&gt;WorldDomination.Web.Authentication&lt;/code&gt; to process the callback and deserialize the response.&lt;/p&gt;

&lt;h3&gt;Configuring&lt;/h3&gt;

&lt;p&gt;Now that it's installed, we need to configure it, this is done one of two ways, by adding the information to the &lt;code&gt;web.config&lt;/code&gt;, or by registering the information in the &lt;code&gt;Bootstrapper&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'm going to show the &lt;code&gt;web.config&lt;/code&gt; way, but you can visit the github wiki for &lt;code&gt;WorldDomination.Web.Authentication&lt;/code&gt; on information to configure via the bootstrapper.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;web.config&lt;/code&gt; add a config section like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section name="authenticationProviders"
         type="WorldDomination.Web.Authentication.Config.ProviderConfiguration, WorldDomination.Web.Authentication" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now add the &lt;code&gt;authenticationProviders&lt;/code&gt; element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;authenticationProviders&amp;gt;
  &amp;lt;providers&amp;gt;
    &amp;lt;add name="Facebook" key="470874...41" secret="02bb584...332fe2" /&amp;gt;
    &amp;lt;add name="Google" key="58714009...ent.com" secret="npk...ooxCEY" /&amp;gt;
    &amp;lt;add name="Twitter" key="Rb7qNNP...znFTbF6Q" secret="pP...7hu9c" /&amp;gt;
  &amp;lt;/providers&amp;gt;
&amp;lt;/authenticationProviders&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These are the key/secret you get when you register your application with the providers.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;You can get the key/secret registering your apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook: http://developers.facebook.com/docs/howtos/login/server-side-login/&lt;/li&gt;
&lt;li&gt;Twitter: https://dev.twitter.com/&lt;/li&gt;
&lt;li&gt;Google: https://code.google.com/apis/console/?pli=1#access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&lt;strong&gt;Note:&lt;/strong&gt; Please refer to the 'Adding some buttons' section on the URLs for use when registering.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Implementing your callback&lt;/h3&gt;

&lt;p&gt;Now you need to implement a callback, this callback is what YOU want to do with the result from a successful (or failed) authentication, you need to implement this because we don't know what you have planned, if you want to create a session, set a cookie, use form authentication, what ever, that's up to you.&lt;/p&gt;

&lt;p&gt;To do this you can create a new class and implement the interface &lt;code&gt;IAuthenticationCallbackProvider&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Test : IAuthenticationCallbackProvider
{
    public dynamic Process(NancyModule nancyModule, AuthenticateCallbackData model)
    {
        return nancyModule.Negotiate.WithView("AuthenticateCallback").WithModel(model);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example will simply respond with the view &lt;code&gt;AuthenticateCallback&lt;/code&gt; and pass it the model with the data returned from the provider. Ideally you would check to see if the user is new, or if you need to add him to your database, or authenticate him with your system. &lt;/p&gt;

&lt;p&gt;You can take a look at the implementation used by JabbR &lt;a href="https://github.com/davidfowl/JabbR/blob/master/JabbR/Nancy/JabbRAuthenticationCallbackProvider.cs"&gt;here&lt;/a&gt;, which I've mirrored as a &lt;a href="https://gist.github.com/4674109"&gt;gist here&lt;/a&gt; incase it is changed or moved and the link becomes dead.&lt;/p&gt;

&lt;p&gt;If you're using Nancy with the default TinyIoC container, you don't need to register anything, it will automatically be picked up by &lt;code&gt;Nancy.Authentication.WorldDomination&lt;/code&gt; and called.&lt;/p&gt;

&lt;h3&gt;Adding some buttons&lt;/h3&gt;

&lt;p&gt;Last of all, you need to add some buttons to the screen. This is where you have to link to some specific URLs.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These links will be configurable in the future, but for now they are hard-coded.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The two URLs used by the system are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Redirect: /authentication/redirect/&lt;em&gt;provider key&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Callback: /authentication/authenticatecallback?providerkey=&lt;em&gt;provider key&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples: The links you would add to your page would be similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href="/authentication/redirect/Twitter"&amp;gt;&amp;lt;img src="/Content/twitter_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href="/authentication/redirect/Facebook"&amp;gt;&amp;lt;img src="/Content/facebook_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;a href="/authentication/redirect/Google"&amp;gt;&amp;lt;img src="/Content/google_32.png" /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These links are just normal hyperlinks, giving you absolute freedom and flexibility to style them any way you want. Because we have absolutely NO involvement in the generation of the links, we cannot get in the way.&lt;/p&gt;

&lt;p&gt;All you need to do is ensure that the links provided to us look like the above.&lt;/p&gt;

&lt;p&gt;Your callback urls would end up looking like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=twitter&lt;/li&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=facebook&lt;/li&gt;
&lt;li&gt;/authentication/authenticatecallback?providerkey=google&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The urls are forced to be lowercase because Google is case sensitive, so when registering your app with google please make sure the url is registered all lowercase.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And you're done!&lt;/p&gt;

&lt;p&gt;Now you can run your app:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We click on Google:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we get redirected back to the website after allowing the authentication with Google:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jabbr-authentication-sample-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;p&gt;The sample can be found on github here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication/tree/master/Samples/WorldDomination.Web.Authentication.Test.NancyFX2"&gt;https://github.com/PureKrome/WorldDomination.Web.Authentication/tree/master/Samples/WorldDomination.Web.Authentication.Test.NancyFX2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the source code on github: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/PureKrome/WorldDomination.Web.Authentication"&gt;https://github.com/PureKrome/WorldDomination.Web.Authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the Nuget packages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.nuget.org/packages/WorldDomination.Web.Authentication/"&gt;http://www.nuget.org/packages/WorldDomination.Web.Authentication/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.nuget.org/packages/Nancy.Authentication.WorldDomination/"&gt;http://www.nuget.org/packages/Nancy.Authentication.WorldDomination/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/introducing-raygun-and-nancy-raygun/</guid><link>http://www.philliphaydon.com/2013/01/introducing-raygun-and-nancy-raygun/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>Introducing Raygun.io and Nancy.Raygun</title><description>&lt;p&gt;So not long ago I &lt;a href="http://www.philliphaydon.com/2012/10/keep-an-eye-on-raygun-to-zap-all-your-errors-away/"&gt;posted&lt;/a&gt; about an up and coming service from &lt;a href="http://www.mindscapehq.com"&gt;http://www.mindscapehq.com&lt;/a&gt; called &lt;a href="http://www.raygun.io"&gt;Raygun&lt;/a&gt;, well last week they went into beta, and I was invited, so since early last week I've been giving their system the run around and provided a little bit of feedback. &lt;/p&gt;

&lt;p&gt;I say a little bit, because besides being a super early beta tester, and a super early product that will grow over time, the beta is quite polished. There was only a few minor issues which they corrected within a day or less. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-beta-robby-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Raygun is super easy to setup and implement into your application, in-fact it's really nothing more than creating an app, install the nuget package, and set the key, and away you go. &lt;/p&gt;

&lt;p&gt;There's a simple guide over &lt;a href="http://www.pieterg.com/2013/1/raygunio-has-launched"&gt;http://www.pieterg.com/2013/1/raygunio-has-launched&lt;/a&gt;, so I won't bore you with the same content.&lt;/p&gt;

&lt;h2&gt;Nancy.Raygun&lt;/h2&gt;

&lt;p&gt;Currently the &lt;a href="https://www.nuget.org/packages/Mindscape.Raygun4Net/"&gt;offical Nuget package&lt;/a&gt; has a dependency on System.Web which isn't very nice for Nancy, so I've created &lt;a href="https://www.nuget.org/packages/Nancy.Raygun/"&gt;Nancy.Raygun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has no dependency on &lt;code&gt;System.Web&lt;/code&gt;, and uses the &lt;code&gt;NancyContext&lt;/code&gt; rather than &lt;code&gt;HttpContext.Current&lt;/code&gt;, it also implements &lt;code&gt;IApplicationStartup&lt;/code&gt; so that it automatically wires itself up for handling errors for you.&lt;/p&gt;

&lt;p&gt;Nancy.Raygun is on &lt;a href="https://github.com/phillip-haydon/Nancy.Raygun"&gt;Github&lt;/a&gt;, installing the nuget package will add the web.config for you so all you need to do is add the key and away you go.&lt;/p&gt;

&lt;h2&gt;Why Raygun?&lt;/h2&gt;

&lt;p&gt;I've had a few people ask me why I would use Raygun over ELMAH, or AppFail. &lt;/p&gt;

</description><pubDate>Mon, 28 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So not long ago I &lt;a href="http://www.philliphaydon.com/2012/10/keep-an-eye-on-raygun-to-zap-all-your-errors-away/"&gt;posted&lt;/a&gt; about an up and coming service from &lt;a href="http://www.mindscapehq.com"&gt;http://www.mindscapehq.com&lt;/a&gt; called &lt;a href="http://www.raygun.io"&gt;Raygun&lt;/a&gt;, well last week they went into beta, and I was invited, so since early last week I've been giving their system the run around and provided a little bit of feedback. &lt;/p&gt;

&lt;p&gt;I say a little bit, because besides being a super early beta tester, and a super early product that will grow over time, the beta is quite polished. There was only a few minor issues which they corrected within a day or less. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/raygun-beta-robby-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Raygun is super easy to setup and implement into your application, in-fact it's really nothing more than creating an app, install the nuget package, and set the key, and away you go. &lt;/p&gt;

&lt;p&gt;There's a simple guide over &lt;a href="http://www.pieterg.com/2013/1/raygunio-has-launched"&gt;http://www.pieterg.com/2013/1/raygunio-has-launched&lt;/a&gt;, so I won't bore you with the same content.&lt;/p&gt;

&lt;h2&gt;Nancy.Raygun&lt;/h2&gt;

&lt;p&gt;Currently the &lt;a href="https://www.nuget.org/packages/Mindscape.Raygun4Net/"&gt;offical Nuget package&lt;/a&gt; has a dependency on System.Web which isn't very nice for Nancy, so I've created &lt;a href="https://www.nuget.org/packages/Nancy.Raygun/"&gt;Nancy.Raygun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has no dependency on &lt;code&gt;System.Web&lt;/code&gt;, and uses the &lt;code&gt;NancyContext&lt;/code&gt; rather than &lt;code&gt;HttpContext.Current&lt;/code&gt;, it also implements &lt;code&gt;IApplicationStartup&lt;/code&gt; so that it automatically wires itself up for handling errors for you.&lt;/p&gt;

&lt;p&gt;Nancy.Raygun is on &lt;a href="https://github.com/phillip-haydon/Nancy.Raygun"&gt;Github&lt;/a&gt;, installing the nuget package will add the web.config for you so all you need to do is add the key and away you go.&lt;/p&gt;

&lt;h2&gt;Why Raygun?&lt;/h2&gt;

&lt;p&gt;I've had a few people ask me why I would use Raygun over ELMAH, or AppFail. &lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;ELMAH means I have to manage all the exceptions myself, I have to specify where I log it, navigate a clunky unstyled website, besides being an awesome alternative to something like log4net or nlog, it really is out-dated by today's standards.&lt;/p&gt;

&lt;p&gt;I have no personal experience with AppFail, and their service is similar, but the main difference is I know Mindscape, they are an awesome team that produce an awesome set of tools like LightSpeed, Web Workbench, and even went out of their way to add a control to their Metro Elements for me. I know what I'm getting is an awesome and will only get more awesome as time goes on.&lt;/p&gt;

&lt;p&gt;So right now, I've ripped out ELMAH from all my projects and replaced it with Raygun, and I'm not looking back at all. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/introducing-sandra-simplevalidator-validation-reinvented-again/</guid><link>http://www.philliphaydon.com/2013/01/introducing-sandra-simplevalidator-validation-reinvented-again/</link><a10:author><a10:name /></a10:author><title>Introducing Sandra.SimpleValidation - Validation reinvented... again</title><description>&lt;p&gt;Yup, I decided to reinvent the wheel, don't hate on me :)&lt;/p&gt;

&lt;p&gt;So I grew a little fustrated, theres quite a few serverside validation libraries around, but I feel they do too much, are hard to test, yada yada yada...&lt;/p&gt;

&lt;p&gt;So I came up with Sandra.SimpleValidation&lt;/p&gt;

&lt;p&gt;The idea is that it's dead simple, it requires 0 up front configuration, it doesn't allow you to inject stuff into the validators, validators are newed up once and only once, there's no client-side validation.&lt;/p&gt;

&lt;p&gt;I don't believe validation should allow you to do things like inject a repository and query the database, those begin to become Business Rules and should be handled seperately. All it does is validate a model you give it. &lt;/p&gt;

&lt;p&gt;So what do you need to do?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package Sandra.SimpleValidator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First up, install the package. It requires 4.0 or above, it could probably work on 3.5 but who uses that anymore?&lt;/p&gt;

</description><pubDate>Thu, 24 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-24T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Yup, I decided to reinvent the wheel, don't hate on me :)&lt;/p&gt;

&lt;p&gt;So I grew a little fustrated, theres quite a few serverside validation libraries around, but I feel they do too much, are hard to test, yada yada yada...&lt;/p&gt;

&lt;p&gt;So I came up with Sandra.SimpleValidation&lt;/p&gt;

&lt;p&gt;The idea is that it's dead simple, it requires 0 up front configuration, it doesn't allow you to inject stuff into the validators, validators are newed up once and only once, there's no client-side validation.&lt;/p&gt;

&lt;p&gt;I don't believe validation should allow you to do things like inject a repository and query the database, those begin to become Business Rules and should be handled seperately. All it does is validate a model you give it. &lt;/p&gt;

&lt;p&gt;So what do you need to do?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PM&gt; Install-Package Sandra.SimpleValidator&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First up, install the package. It requires 4.0 or above, it could probably work on 3.5 but who uses that anymore?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Once installed, you can create a validator&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserValidator : ValidateThis&amp;lt;User&amp;gt;
{
    public UserValidator()
    {
        For(x =&amp;gt; x.Username)
            .Ensure(new Required());

        For(x =&amp;gt; x.Email)
            .Ensure(new Required())
            .Ensure(new Email());

        For(x =&amp;gt; x.Locale)
            .Ensure(new Required());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don't like the default messages you can change those by chaining the rule like so&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserValidator : ValidateThis&amp;lt;User&amp;gt;
{
    public UserValidator()
    {
        For(x =&amp;gt; x.Username)
            .Ensure(new Required().WithMessage("Username is required");

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can inject (or create an instance of) the &lt;code&gt;ValidationService&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Using Nancy with the default &lt;code&gt;TinyIoC&lt;/code&gt; container, you can just include this in the module constructor. If you're using MVC you may need to register it depending on the container you're using. In any case it can be a singleton since it only needs to be created once.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeModule : NancyModule
{
    public HomeModule(ValidationService validate)
    {
        Get["/"] = _ =&amp;gt;
        {
            var user = this.Bind&amp;lt;User&amp;gt;();
            var validationResult = validate.This(user);

            if (validationResult.IsInvalid)
            {
                //Handle errors with
                //validationResult.Messages

                return "Validation has fails :(";
            }

            return "Validation was successful :)";
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you've injected the service, you simply call &lt;code&gt;This(...)&lt;/code&gt; passing in the object you want to validate. With the result you can then call &lt;code&gt;IsValid&lt;/code&gt; or &lt;code&gt;IsInvalid&lt;/code&gt; and handle the errors.&lt;/p&gt;

&lt;p&gt;What's nice about the validator class is that because it's so simple, it's simple to test. Given the example above, we can write a unit test like so.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Fact]
public void Given_Valid_Model_Should_Return_IsValid_As_True()
{
    var validator = new UserValidator();
    var model = new User
    {
        Username = "HelloWorld",
        Email = "test@banana.com",
        Locale = "en-AU"
    };

    var result = validator.Validate(model);

    Assert.True(result.IsValid);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all there is to it. Currently as of writing this it only supports &lt;code&gt;Required&lt;/code&gt;, &lt;code&gt;MinimumLength&lt;/code&gt;, &lt;code&gt;MaximumLength&lt;/code&gt;, &lt;code&gt;Between&lt;/code&gt;, and &lt;code&gt;Email&lt;/code&gt; rules. Since that's all I require for my current project. If you want to create your own simply implement &lt;code&gt;IRule&lt;/code&gt; and new them up in the &lt;code&gt;Ensure&lt;/code&gt; method of the validators.&lt;/p&gt;

&lt;p&gt;In the future I hope to get Nancy intergration so the validation can be invoked on &lt;code&gt;this.Bind&amp;lt;T&amp;gt;()&lt;/code&gt;, but for now you can find the github repo, and nuget&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/Sandra.SimpleValidator"&gt;https://github.com/phillip-haydon/Sandra.SimpleValidator&lt;/a&gt;
&lt;a href="https://www.nuget.org/packages/Sandra.SimpleValidator"&gt;https://www.nuget.org/packages/Sandra.SimpleValidator&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/windows-store-app-with-caliburn-micro-basic-binding/</guid><link>http://www.philliphaydon.com/2013/01/windows-store-app-with-caliburn-micro-basic-binding/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App with Caliburn.Micro - Basic Databinding</title><description>&lt;p&gt;Continuing on with the SampleProject for a Windows Store App, we will look at binding, this is where we will finally make use of the ViewModel. &lt;/p&gt;

&lt;p&gt;In the previous example we output the text 'Hello World' to the screen, but rather than put it on the screen directly we can load it when we load the view.&lt;/p&gt;

&lt;p&gt;First we need to create a ViewModel, Caliburn works on a naming convention so if your view is named &lt;code&gt;MainView&lt;/code&gt;, your view model needs to be naned &lt;code&gt;MainViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In our class we want to inherit from &lt;code&gt;Screen&lt;/code&gt;, this is a Caliburn class that is used to represent a single screen, your application may have many screens but for now we are only dealing with a single screen. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Caliburn.Micro;

namespace SampleProject.ViewModels
{
    public class MainViewModel : Screen
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Wed, 16 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-16T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Continuing on with the SampleProject for a Windows Store App, we will look at binding, this is where we will finally make use of the ViewModel. &lt;/p&gt;

&lt;p&gt;In the previous example we output the text 'Hello World' to the screen, but rather than put it on the screen directly we can load it when we load the view.&lt;/p&gt;

&lt;p&gt;First we need to create a ViewModel, Caliburn works on a naming convention so if your view is named &lt;code&gt;MainView&lt;/code&gt;, your view model needs to be naned &lt;code&gt;MainViewModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;In our class we want to inherit from &lt;code&gt;Screen&lt;/code&gt;, this is a Caliburn class that is used to represent a single screen, your application may have many screens but for now we are only dealing with a single screen. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Caliburn.Micro;

namespace SampleProject.ViewModels
{
    public class MainViewModel : Screen
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Screen doesn't require us to implement anything, but it does handle a few things for us, it implements &lt;code&gt;INotifyPropertyChangedEx&lt;/code&gt;, which inherits from &lt;code&gt;INotifyPropertyChanged&lt;/code&gt;, which is great because this is exactly what we need!&lt;/p&gt;

&lt;p&gt;Next we need to add a new property, but this can't be an autoproperty, we need a backing field so we can invoke &lt;code&gt;NotifyOfPropertyChange&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private string _message;
public string Message
{
    get { return _message; }
    set
    {
        if (value == _message) 
            return;
        _message = value;
        NotifyOfPropertyChange();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is basically what Resharper generates for us, if we create an autoproperty, we can convert it to a property with backing field that calls &lt;code&gt;NotifyOfPropertyChange&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to set our message, we are going to do this when the ViewModel is initialized. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void OnInitialize()
{
    base.OnInitialize();

    Message = "Saying: Hello World! :)";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Last of all we need to wire up the &lt;code&gt;TextBlock&lt;/code&gt; control to the property, there's a few different ways you can do this, but generally you want to use the &lt;code&gt;{Binding *property*}&lt;/code&gt; syntax. &lt;/p&gt;

&lt;p&gt;We can update our button to add the binding to the Text Field.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextBlock Text="{Binding Message}" FontSize="28"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run our app we get the message written in the OnInitialize.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we want to update the text, when we set the &lt;code&gt;Message&lt;/code&gt; property, the &lt;code&gt;NotifyOfPropertyChange&lt;/code&gt; will be fired and the screen will update with the new text. To show you I've added a button to the screen which invokes a method on the ViewModel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void UpdateText()
{
    Message = "This text was updated";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don't worry about how this button event is wired up, I'll get to that in future posts.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When we view the screen we get the default text.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And when we hit the button, the text is updated.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Bindings can be added to pretty much any property you want, for example if we updated the button to change the visibility of the text we can add a new property to the ViewModel.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private Visibility _textBlockVisibility;
public Visibility TextBlockVisibility
{
    get { return _textBlockVisibility; }
    set
    {
        if (value == _textBlockVisibility) 
            return;
        _textBlockVisibility = value;
        NotifyOfPropertyChange();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then update the button to alternate the visibility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void UpdateText()
{
    var isVisible = TextBlockVisibility == Visibility.Visible;

    TextBlockVisibility = isVisible ? Visibility.Collapsed : Visibility.Visible;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally add the binding to the TextBlock.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;TextBlock FontSize="28" Text="{Binding Message}" Visibility="{Binding TextBlockVisibility}" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we view the page we get the default message.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we hit the button, the message disappears...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-binding-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Next I hope to look into a collection of data.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/it-communities-like-hacker-news-are-full-of-assholes/</guid><link>http://www.philliphaydon.com/2013/01/it-communities-like-hacker-news-are-full-of-assholes/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>IT-Communities like Hacker News are full of assholes</title><description>&lt;p&gt;I only found out about hacker news maybe... 6 months ago? This place is like 4chan for the IT-Community, and it's not the only place. The entire internet is full of assholes.&lt;/p&gt;

&lt;p&gt;Filip Ekberg wrote an opinionated &lt;a href="http://blog.filipekberg.se/2013/01/11/c-is-the-past-the-present-and-the-future/"&gt;blog post&lt;/a&gt; a few days ago, about how he thinks C# is the past, present and future. After &lt;a href="http://news.ycombinator.com/item?id=5042055"&gt;self promotion&lt;/a&gt; on Hacker News, I'm sure a lot of people do, such as &lt;a href="http://news.ycombinator.com/submitted?id=philliphaydon"&gt;myself&lt;/a&gt;. He got an out pour of comments. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"I am a Software Engineer working with various techniques such as C#, WPF, WCF, ASP.NET MVC, ASP.NET and much more"&lt;br&gt;
  "I spend most of my days working with the latest technologies from Microsoft."&lt;br&gt;
  "In the darkest alley-ways we still have the people not wanting to touch C# with a pitch-fork because it's behind Microsoft"&lt;br&gt;
  In my opinion he lacks enough neutrality to make that statements(how he know MS tech is so great if he is totally ignorant of other options?).&lt;br&gt;
  Instead of telling people to learn only Microsoft tech he could take his own advise and learn non Microsoft tech too. The world is much bigger than a single company.&lt;br&gt;
  In my work as a software engineer I had to use what was good for my company, not what was good for Microsoft, Apple, or any religion(GNU or whatever).&lt;br&gt;
  I had to use Java, C#, objective C, python, (and lisp and c and c++). We will never be in the hands of a single company ever.&lt;/p&gt;
&lt;/blockquote&gt;

</description><pubDate>Sun, 13 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-13T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I only found out about hacker news maybe... 6 months ago? This place is like 4chan for the IT-Community, and it's not the only place. The entire internet is full of assholes.&lt;/p&gt;

&lt;p&gt;Filip Ekberg wrote an opinionated &lt;a href="http://blog.filipekberg.se/2013/01/11/c-is-the-past-the-present-and-the-future/"&gt;blog post&lt;/a&gt; a few days ago, about how he thinks C# is the past, present and future. After &lt;a href="http://news.ycombinator.com/item?id=5042055"&gt;self promotion&lt;/a&gt; on Hacker News, I'm sure a lot of people do, such as &lt;a href="http://news.ycombinator.com/submitted?id=philliphaydon"&gt;myself&lt;/a&gt;. He got an out pour of comments. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"I am a Software Engineer working with various techniques such as C#, WPF, WCF, ASP.NET MVC, ASP.NET and much more"&lt;br&gt;
  "I spend most of my days working with the latest technologies from Microsoft."&lt;br&gt;
  "In the darkest alley-ways we still have the people not wanting to touch C# with a pitch-fork because it's behind Microsoft"&lt;br&gt;
  In my opinion he lacks enough neutrality to make that statements(how he know MS tech is so great if he is totally ignorant of other options?).&lt;br&gt;
  Instead of telling people to learn only Microsoft tech he could take his own advise and learn non Microsoft tech too. The world is much bigger than a single company.&lt;br&gt;
  In my work as a software engineer I had to use what was good for my company, not what was good for Microsoft, Apple, or any religion(GNU or whatever).&lt;br&gt;
  I had to use Java, C#, objective C, python, (and lisp and c and c++). We will never be in the hands of a single company ever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--excerpt--&gt;

&lt;blockquote&gt;
  &lt;p&gt;He clearly works for MS and probably on the team that works on C#, which is why I find it odd that he touts Mono as a feature. If MS was serious about .NET everywhere, they'd sponsor Mono/Xamarin, or offer native .NET support for OSX and Linux instead of using the Mono community's hard work to toot their own horn.&lt;br&gt;
  C# is a great language and has evolved beautifully, but many people will still continue to avoid it because it's owned by MS and stuck on Windows (without the help of Mono). The next Google, Facebook or Twitter won't be written with C#.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
  &lt;p&gt;I would like to try it out but I'm not on Windows obviously, and I won't work to become a second class citizen ("What do you use? Mono? That's not supported").&lt;br&gt;
  Also, most of tooling seems to be proprietary, Windows-only too.&lt;br&gt;
  So I'd stick to JVM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;

&lt;blockquote&gt;
  &lt;p&gt;He's a junior MVP, of course it has to look like an ad :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These are just some of the comments that appeared on Hacker News.&lt;/p&gt;

&lt;p&gt;The IT-Community is a joke, that we as a collective community spanning 100's or 1000's or more, platforms, languages, frameworks etc, have to resort to personal attacks, and the same old generic bullshit arguments despite how far anything progresses.&lt;/p&gt;

&lt;p&gt;I don't think I'm immune to all this, as a .NET Developer I rant against Microsoft for the stupid things I think they do, I don't like ASP.NET MVC after playing with other frameworks that the .NET Community has some up with, and I'm always ranting about how shit Entity Framework is, but I'm not personally attacking someone or singling out an entire framework just because it was developed by a single company. &lt;/p&gt;

&lt;p&gt;Everything has it's pros and cons, but a con isn't "OH it's developed by Apple" or "Oh it's created by Microsoft", a con isn't "It's a clone of Java" that's all just your ignorance bleeding through. &lt;/p&gt;

&lt;p&gt;Yes C# is created by Microsoft, does that make C# bad? No. Does it mean you shouldn't learn it? No.&lt;/p&gt;

&lt;p&gt;People need to stop being so negative towards others in the community, if someone has an opinion like Filip, and you disagree, come up with a constructive argument about why you disagree. You may teach Filip and the community something! Hell, someone might respond to you and you may learn something in return!&lt;/p&gt;

&lt;p&gt;The good in the community is when we learn from each others ideas and discussions, whether it's Microsoft creating LINQ and everyone mimics it in other languages the best they can, or the Ruby community coming up with Sinatra and it being the inspiration for NancyFX in the .NET community. &lt;/p&gt;

&lt;p&gt;Stop being an asshole just because you can be anonymous on the internet. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/using-publish-to-deploy-azure-cloud-service/</guid><link>http://www.philliphaydon.com/2013/01/using-publish-to-deploy-azure-cloud-service/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Using publish to deploy Azure Cloud Service</title><description>&lt;p&gt;In my previous &lt;a href="http://www.philliphaydon.com/2013/01/creating-an-azure-cloud-service"&gt;post&lt;/a&gt; I created an Azure Cloud Service from scratch and deployed it, however I manually logged into Azure Portal and uploaded the packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/cloudnick"&gt;@cloudnick&lt;/a&gt; commented saying that I could that you can use publish directly from Visual Studio. So!&lt;/p&gt;

&lt;h2&gt;Publishing from Visual Studio directly to Azure&lt;/h2&gt;

&lt;p&gt;Using the exact same setup as yesterday, rightclick the MyWorker project and select Publish.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Sign in to download crentials&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will take you to a webpage where you can sign into your Windows Live account that has your Azure Subscriptions, with some instructions. The file will download automatically.&lt;/p&gt;

</description><pubDate>Wed, 09 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-09T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In my previous &lt;a href="http://www.philliphaydon.com/2013/01/creating-an-azure-cloud-service"&gt;post&lt;/a&gt; I created an Azure Cloud Service from scratch and deployed it, however I manually logged into Azure Portal and uploaded the packages.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://twitter.com/cloudnick"&gt;@cloudnick&lt;/a&gt; commented saying that I could that you can use publish directly from Visual Studio. So!&lt;/p&gt;

&lt;h2&gt;Publishing from Visual Studio directly to Azure&lt;/h2&gt;

&lt;p&gt;Using the exact same setup as yesterday, rightclick the MyWorker project and select Publish.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;code&gt;Sign in to download crentials&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will take you to a webpage where you can sign into your Windows Live account that has your Azure Subscriptions, with some instructions. The file will download automatically.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now go back to Visual Studio and import the file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will open a new screen with some options, it will pre-select any existing cloud service you have, or you can create a new one by dropping down the menu and selecting 'Create New...' if you don't already have one created you can create a new one.&lt;/p&gt;

&lt;p&gt;I'm going to select the existing one.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;View the summary to save the profile, that way you can re-use it for future deployments. If you press save and want to rename it, you can drop the menu down and select Manage, then you can modify the name.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If all is successful, Visual Studio will open up a Windows Azure Acvitity Log which will show you the deployment process.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This process takes a little while, I guess it depends on your internet connection, I'm on a pretty fast connection but I'm in Singapore, so latency is quite a bit to the US.&lt;/p&gt;

&lt;p&gt;Infact it took a about 3 minutes to deploy, for most of that time it looked like.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But don't worry, if you leave it long enough, eventually it will end up like.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it, now checking RavenHQ again.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-service-update-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So to avoid ever even having to login to Azure Portal, you can Create and Publish a Cloud Service all from within Visual Studio.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/creating-an-azure-cloud-service/</guid><link>http://www.philliphaydon.com/2013/01/creating-an-azure-cloud-service/</link><a10:author><a10:name /></a10:author><category>Azure</category><title>Azure - Creating an Azure Cloud Service</title><description>&lt;p&gt;I've been investigating setting up a Worker Role to do something similar to a Windows Service and it seems that the Worker Role is best suited for this purpose. &lt;/p&gt;

&lt;p&gt;You might create a Worker Role to Poll a Message Queue, or process some data in a database, or scrape some data and persist it, etc. I'm going to throw some data in &lt;a href="http://www.ravenhq.com"&gt;http://www.ravenhq.com&lt;/a&gt; every minute, for this blog post, nothing exciting, but demonstrates how to create a WorkerRole and get it up and running on Azure.&lt;/p&gt;

&lt;p&gt;I suspect that you could use NancyFX Self-Hosting here and host a basic Nancy website, that would be cool :)&lt;/p&gt;

&lt;h2&gt;Building the Service (Worker / Role)&lt;/h2&gt;

&lt;p&gt;If you haven't already you will need to install the Azure SDK, so head on over to &lt;a href="http://www.windowsazure.com/en-us/develop/net/"&gt;http://www.windowsazure.com/en-us/develop/net/&lt;/a&gt; and click "Install SDK" which will give you the option for 2012 or 2010. I picked 2012 because I don't know what 2010 is, I stopped living in the past.&lt;/p&gt;

&lt;p&gt;The installer actually uses Web Platform Installer, not sure if there's any other way to install it.&lt;/p&gt;

</description><pubDate>Mon, 07 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-07T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've been investigating setting up a Worker Role to do something similar to a Windows Service and it seems that the Worker Role is best suited for this purpose. &lt;/p&gt;

&lt;p&gt;You might create a Worker Role to Poll a Message Queue, or process some data in a database, or scrape some data and persist it, etc. I'm going to throw some data in &lt;a href="http://www.ravenhq.com"&gt;http://www.ravenhq.com&lt;/a&gt; every minute, for this blog post, nothing exciting, but demonstrates how to create a WorkerRole and get it up and running on Azure.&lt;/p&gt;

&lt;p&gt;I suspect that you could use NancyFX Self-Hosting here and host a basic Nancy website, that would be cool :)&lt;/p&gt;

&lt;h2&gt;Building the Service (Worker / Role)&lt;/h2&gt;

&lt;p&gt;If you haven't already you will need to install the Azure SDK, so head on over to &lt;a href="http://www.windowsazure.com/en-us/develop/net/"&gt;http://www.windowsazure.com/en-us/develop/net/&lt;/a&gt; and click "Install SDK" which will give you the option for 2012 or 2010. I picked 2012 because I don't know what 2010 is, I stopped living in the past.&lt;/p&gt;

&lt;p&gt;The installer actually uses Web Platform Installer, not sure if there's any other way to install it.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Once installed you can create a brand new project in Visual Studio.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After hitting OK you're presented with a new screen to pick your Cloud Service.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I'm not sure what that 'Visual Basic' thing is, and I don't know F# so from the Visual C# list, pick Worker Role and throw that to the right hand side, then right click it and rename it (or click the little pen icon)&lt;/p&gt;

&lt;p&gt;Once you press ok your project is created and ready:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MyFirstWorker&lt;/code&gt; is the Azure configuration stuff, I'll get to that when we deploy. For now we will work in &lt;code&gt;MyFirstRole&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The project comes with a WorkerRole file which stubs out the code we need&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace MyFirstRole
{
    public class WorkerRole : RoleEntryPoint
    {
        public override void Run()
        {
            // This is a sample worker implementation. Replace with your logic.
            Trace.WriteLine("MyFirstRole entry point called", "Information");

            while (true)
            {
                Thread.Sleep(10000);
                Trace.WriteLine("Working", "Information");
            }
        }

        public override bool OnStart()
        {
            // Set the maximum number of concurrent connections 
            ServicePointManager.DefaultConnectionLimit = 12;

            // For information on handling configuration changes
            // see the MSDN topic at http://go.microsoft.com/fwlink/?LinkId=166357.

            return base.OnStart();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;OnStart&lt;/code&gt; returns bool, and from my understanding the worker role hasn't started until it has returned true. This allows you to run any initialization tasks, and while you're setting up it will tell the Worker or Load Balancer that it's busy, until you're done and have returned true.&lt;/p&gt;

&lt;p&gt;So I'm going to configure the RavenDB Document Store at this point.&lt;/p&gt;

&lt;p&gt;I'm using RavenHQ, so this sort of needs prior knowledge of RavenDB / HQ to setup, but if you swapped this code for any other task the rest of the post should still apply.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override bool OnStart()
{
    // Set the maximum number of concurrent connections 
    ServicePointManager.DefaultConnectionLimit = 12;

    _documentStore = (new DocumentStore
    {
        ApiKey = "*api key removed*",
        Url = "https://aeo.ravenhq.com/databases/philliphaydon-TestDatabase",
        DefaultDatabase = "philliphaydon-TestDatabase"
    }).Initialize();

    return base.OnStart();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also an &lt;code&gt;OnStop&lt;/code&gt; method that you can override which gives you 30 seconds to clean up and persist any state etc. If you don't manage to clean up in 30 seconds, you're stuffed, it will terminate and you've lost anything you wanted to do... But 30 seconds is a LONG time...&lt;/p&gt;

&lt;p&gt;The second method is &lt;code&gt;Run&lt;/code&gt; is the task the role is going to run, it contains a while loop with the condition true to make it an infinite loop. This is really important because if you exit out of the loop, your role will terminate. Then it wouldn't really be a background service that is always running!&lt;/p&gt;

&lt;p&gt;I'm not going to abstract anything out I'm going to write my code directly in the while loop for the purpose of this post :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void Run()
{
    // This is a sample worker implementation. Replace with your logic.
    Trace.WriteLine("MyFirstRole entry point called", "Information");

    var count = 0;

    while (true)
    {
        try
        {
            using (var session = _documentStore.OpenSession())
            {
                session.Store(new Banana
                {
                    Colour = "Yellow " + count
                });

                session.SaveChanges();
            }
        }
        catch (Exception ex)
        {
            //TODO: Implement www.raygun.io
        }
        finally
        {
            count++;
        }

        Thread.Sleep(60000);

        Trace.WriteLine("Working", "Information");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point if we hit F5 we can debug the role and make sure it's doing what we want to do. &lt;/p&gt;

&lt;p&gt;A Windows Azure Emulator is started in your system tray, much like working with websites:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So right click and select 'Show Compute Emulator UI'&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And you will be presented with a nice UI that shows your services running. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see it's pumping out "Working" into the console and if I swap over to RavenHQ Management Studio:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I have some banana's being persisted.&lt;/p&gt;

&lt;p&gt;GREAT. Now lets get this up and running on Azure!&lt;/p&gt;

&lt;h2&gt;Deployment Package&lt;/h2&gt;

&lt;p&gt;First up, we need to create a package, right click the project 'MyFirstWorker' and select 'Package', this will give you the an option to package up a configuration, we will select Cloud since we are going to be putting it on Azure now.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-8.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This results in two files being created.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-9.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The Package itself, and a cloud configuration file. These will be needed when we upload it to Azure next.&lt;/p&gt;

&lt;h2&gt;Deployement on Azure&lt;/h2&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I've created a new blog post on how to &lt;a href="http://www.philliphaydon.com/2013/01/using-publish-to-deploy-azure-cloud-service"&gt;Publish from Visual Studio&lt;/a&gt; for those who don't want to deploy from Azure Portal.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now we need to create the Cloud Service and upload the package. Head on over to the Azure portal, and sign up if you haven't already. Click on Cloud Services:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-10.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Then create a new cloud service, This will pop-up a small work-flow at the bottom of the page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-11.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-12.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;After you've pressed Create at the bottom, a status will popup.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-13.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now you can go back to the Cloud Services tab and your new service will be visible.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-14.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Click the first cell to navigate to the service, and select Upload a new production deployment (or staging, I'm doing production)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-15.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now you can upload the package.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-16.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I selected the option &lt;code&gt;Deploy even if one or more roles contain a single instance.&lt;/code&gt; since we don't need to worry about scaling. If it's a critical service you may want to deploy more than 1 instance to increase your availability.&lt;/p&gt;

&lt;p&gt;Now your service is deployed.&lt;/p&gt;

&lt;p&gt;Before deploying I reset my RavenDB database to have no data, so I wrote the rest of this blog post and it's been able 7 minutes...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/azure-worker-17.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And we have 7 documents :)&lt;/p&gt;

&lt;p&gt;That's it, easy peasy setting up a Azure Cloud Service from scratch to production.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/windows-store-app-tiled-background/</guid><link>http://www.philliphaydon.com/2013/01/windows-store-app-tiled-background/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App - Tiled Background using Mindscape Metro Elements</title><description>&lt;p&gt;Apparently WinRT XAML lacks the ability to tile a background image, and surfing the net seems to come to the conclusion that the only way is to just create a large tiled image in photoshop...&lt;/p&gt;

&lt;p&gt;I want to pick a Tile image from &lt;a href="http://subtlepatterns.com/"&gt;http://subtlepatterns.com/&lt;/a&gt; and just use it, but I &lt;em&gt;can't&lt;/em&gt;. So I tried photoshop... (creating a benehoth of an image that is) I tried that, and it... crashed the Simulator, over and over... So I flagged it, instead I decided to put in a feature request over at Mindscape for their Metro Elements:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/thinktank/suggestion/505262"&gt;http://www.mindscapehq.com/thinktank/suggestion/505262&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I asked them to include a TiledBackground, and they delivered! &lt;/p&gt;

&lt;p&gt;Currently in the nightly build is the makings of a TiledBackground element.&lt;/p&gt;

&lt;p&gt;(To get access to the Nightly builds you will need to purchase a license for Metro Elements, which is well worth it, so go buy a license!)&lt;/p&gt;

&lt;p&gt;After installing the Metro Elements, in your app you want to add a reference to Metro Elements:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-app-tiled-bg-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now in the page attributes you need to include an alias for the MetroElements:&lt;/p&gt;

</description><pubDate>Wed, 02 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Apparently WinRT XAML lacks the ability to tile a background image, and surfing the net seems to come to the conclusion that the only way is to just create a large tiled image in photoshop...&lt;/p&gt;

&lt;p&gt;I want to pick a Tile image from &lt;a href="http://subtlepatterns.com/"&gt;http://subtlepatterns.com/&lt;/a&gt; and just use it, but I &lt;em&gt;can't&lt;/em&gt;. So I tried photoshop... (creating a benehoth of an image that is) I tried that, and it... crashed the Simulator, over and over... So I flagged it, instead I decided to put in a feature request over at Mindscape for their Metro Elements:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/thinktank/suggestion/505262"&gt;http://www.mindscapehq.com/thinktank/suggestion/505262&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I asked them to include a TiledBackground, and they delivered! &lt;/p&gt;

&lt;p&gt;Currently in the nightly build is the makings of a TiledBackground element.&lt;/p&gt;

&lt;p&gt;(To get access to the Nightly builds you will need to purchase a license for Metro Elements, which is well worth it, so go buy a license!)&lt;/p&gt;

&lt;p&gt;After installing the Metro Elements, in your app you want to add a reference to Metro Elements:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-app-tiled-bg-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now in the page attributes you need to include an alias for the MetroElements:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;xmlns:ms="using:Mindscape.MetroElements"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can add the TileBackground element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ms:TileBackground ImageSource="/Assets/debut_dark.png" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that's all there is to it! How simple is that?&lt;/p&gt;

&lt;p&gt;Now when you run the app, you should end up with the Hello World looking like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-app-tiled-bg-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It may be a little hard to see on the screen shot, but we now have a tiled background. The background used here is this image:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-app-tiled-bg-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently the tiled-background is not viewable in the designer, it can only be viewed when debugging. This may be fixed in the future, but it's a minor issue.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Thanks a lot to the Mindscape team for implementing this feature so quickly. I love you guys!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2013/01/microsoft-surface-so-awesome-with-issues/</guid><link>http://www.philliphaydon.com/2013/01/microsoft-surface-so-awesome-with-issues/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Microsoft Surface... So awesome, with issues...</title><description>&lt;p&gt;Shortly after the Microsoft Surface was released I got my hands on one, which wasn't exactly easy since they aren't available in Singapore yet. I had to pay $240 extra to get mine shipped from Hong Kong via &lt;a href="http://www.expansys.com.sg"&gt;http://www.expansys.com.sg&lt;/a&gt; and then an extra $70 for import tax... &lt;/p&gt;

&lt;p&gt;But it was 110% worth it. I use the thing ALL the damn time, and dispite it being limited in functionality due to Windows RT, I don't regret the purchase at all. &lt;/p&gt;

&lt;p&gt;There's HEAPS of good reviews on the internet about it so I'm not going to bore you with how amazingly awesome the thing is. &lt;/p&gt;

&lt;p&gt;What I want to discuss is 3 issues I have.&lt;/p&gt;

&lt;h2&gt;Surface Charger&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The Surface Charger has a Magnetic Power Plug, similar to the old L-shaped MagSafe &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-2.png" alt="" /&gt;&lt;/p&gt;

</description><pubDate>Tue, 01 Jan 2013 16:00:00 Z</pubDate><a10:updated>2013-01-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Shortly after the Microsoft Surface was released I got my hands on one, which wasn't exactly easy since they aren't available in Singapore yet. I had to pay $240 extra to get mine shipped from Hong Kong via &lt;a href="http://www.expansys.com.sg"&gt;http://www.expansys.com.sg&lt;/a&gt; and then an extra $70 for import tax... &lt;/p&gt;

&lt;p&gt;But it was 110% worth it. I use the thing ALL the damn time, and dispite it being limited in functionality due to Windows RT, I don't regret the purchase at all. &lt;/p&gt;

&lt;p&gt;There's HEAPS of good reviews on the internet about it so I'm not going to bore you with how amazingly awesome the thing is. &lt;/p&gt;

&lt;p&gt;What I want to discuss is 3 issues I have.&lt;/p&gt;

&lt;h2&gt;Surface Charger&lt;/h2&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The Surface Charger has a Magnetic Power Plug, similar to the old L-shaped MagSafe &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-2.png" alt="" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The problem is, just like the old L-shaped MagSafe, it's a PILE OF SHIT. It's the most fiddly thing to try and connect up, and this isn't helped by the fact the Surface has a tappered edge so you need to angle it right for it to snap in. &lt;/p&gt;

&lt;p&gt;Unlike the keyboard cover which snaps on and positions itself, the charger tries to snap itself out of the hole, then you end up wriggling it around to try get it in.&lt;/p&gt;

&lt;p&gt;With the amazing build quality, how they cheaped out on the charger, I have no idea.&lt;/p&gt;

&lt;p&gt;This leads me onto #2&lt;/p&gt;

&lt;h2&gt;Windows Store - Unavailable to certain regions.&lt;/h2&gt;

&lt;p&gt;Ok so I completely understand that MS doesn't want to ship Surfaces to some countries like Singapore. So on their website I can't purchase a Surface...&lt;/p&gt;

&lt;p&gt;But they could atleast allow me to ship a new charger to Singapore. I can't walk into a store, I can't ship one here. I have to use a 3rd party to order it from the MS website, have it shipped to a US address and forwarded to my address.&lt;/p&gt;

&lt;p&gt;Just ship it to me directly. It's 2013 and we still can't ship stuff anywhere. &lt;/p&gt;

&lt;p&gt;Last up is my biggest peeve. &lt;/p&gt;

&lt;h2&gt;Microsoft restricting drivers...&lt;/h2&gt;

&lt;p&gt;Over Christmas I went to Penang in Malaysia, this country is so 3rd world it's the first time I've ever stayed in a hotel that did not have wifi. &lt;/p&gt;

&lt;p&gt;The hotel room DID have ethernet however, but the Surface lacks a LAN port. So in order to setup the internet so I could surf the net while my friends sleep. (I don't sleep much) I decided to buy a USB to LAN adapter. &lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I own both of these, the first one (black) is an Asus USB Lan Adapter, it came with my Asus UX31 Laptop, the 2nd one is some weird brand called VZTEC.&lt;/p&gt;

&lt;p&gt;The thing you can't tell about both these is they are IDENTICAL. When you plug the devices in:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/surface-issues-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The first image is using the White, random brand adapter. The second image is using the Asus one, both have the exact same chipset. So the drivers can be used for both. From googling it seems there's a lot of USB to LAN Adapters that sport this chipset.&lt;/p&gt;

&lt;p&gt;However, if you plug these into Windows 8 (Not Windows RT) windows will automatically find and install the drivers for you. If you attempt to do the same on Windows RT, it fails to install and you are unable to use it.&lt;/p&gt;

&lt;p&gt;Apparently these drivers are removed from ASIX's website at the request of Microsoft. &lt;/p&gt;

&lt;p&gt;This REALLY pisses me off, seriously what the fuck is Microsoft thinking, asking for drivers to be REMOVED so principles don't work on Windows Surface / Windows RT? &lt;/p&gt;

&lt;p&gt;One has to wonder what the hell goes on in Redmond, Microsoft constantly makes really stupid choices. Look at their fragmentated Windows Live ID, lack of support for multiple Live accounts on devices like Windows 8 / Windows Phone which prevent you from signing out of Metro Skype or messaging contacts that exist on different Windows Live account.&lt;/p&gt;

&lt;p&gt;I'm so sick of Microsoft doing stupid things like this, soooo here's the drivers for &lt;a href="http://www.philliphaydon.com/stuffz/AX88772B_772A_772_WinRT_Driver_v3.16.0.1807.zip"&gt;AX88772B / 772A / 772 for Windows RT&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/stuffz/AX88772B_772A_772_WinRT_Driver_v3.16.0.1807.zip"&gt;Right Click and Save&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use the drivers, unzip the above file onto your desktop or somewhere.&lt;/p&gt;

&lt;p&gt;Plugin the adapter, and go into Device Manager, find the device shown in the pictures above. (will have a weird icon since it's not working) go into properties / drivers and then manually browse to the driver folder. &lt;/p&gt;

&lt;p&gt;This will install the Windows RT driver and the adapter will now be usable.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This concludes my rant with Microsoft Surface.&lt;/p&gt;

&lt;p&gt;It truely is an amazing product. Just wish Microsoft would stop doing such silly things.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/12/configuring-multiple-forms-authentication-sections-with-nancyfx/</guid><link>http://www.philliphaydon.com/2012/12/configuring-multiple-forms-authentication-sections-with-nancyfx/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>Configuring multiple Forms Authentication sections with NancyFX</title><description>&lt;p&gt;So Phil Jones posted on twitter recently his desire to have multiple Forms Auth's for different area's in a website.&lt;/p&gt;

&lt;p&gt;The most common scenario is having an Administration and Member with completely separated logins.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image35.png" /&gt;&lt;/p&gt;

&lt;p&gt;This is actually really easy in NancyFX. Expanding on my previous post:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/"&gt;http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm going to include a new area and a couple of new modules:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image36.png" /&gt;&lt;/p&gt;

&lt;p&gt;I've added a folder called 'Admin' this is to act as an Area as described in my post about Nancy &amp;amp; Areas.&lt;/p&gt;

</description><pubDate>Wed, 19 Dec 2012 16:00:00 Z</pubDate><a10:updated>2012-12-19T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So Phil Jones posted on twitter recently his desire to have multiple Forms Auth's for different area's in a website.&lt;/p&gt;

&lt;p&gt;The most common scenario is having an Administration and Member with completely separated logins.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image35.png" /&gt;&lt;/p&gt;

&lt;p&gt;This is actually really easy in NancyFX. Expanding on my previous post:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/"&gt;http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm going to include a new area and a couple of new modules:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image36.png" /&gt;&lt;/p&gt;

&lt;p&gt;I've added a folder called 'Admin' this is to act as an Area as described in my post about Nancy &amp;amp; Areas.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;There are now two Secure modules, both these are really 'dumb' modules that, for the purpose of this sample, do nothing more than manage the authentication for the Main/Admin areas.&lt;/p&gt;

&lt;h3&gt;SecureAdminModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SecureAdminModule : NancyModule
{
    public SecureAdminModule() : this(string.Empty)
    {
    }
    public SecureAdminModule(string path) : base("admin/" + path.TrimStart('/'))
    {
        this.RequiresAuthentication();
        this.RequiresClaims(new[] { "Admin" });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Admin module passes in 'admin' for the module path, this means all module routes will be within the admin path.&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;SecureMemberModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SecureMemberModule : NancyModule
{
    public SecureMemberModule() : this(string.Empty)
    {
    }
    public SecureMemberModule(string modulePath) : base(modulePath)
    {
        this.RequiresAuthentication();
        this.RequiresClaims(new[] {"Member"});
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Both Modules call RequiresAuthentication. This is not actually required since RequiresClaims actually calls RequiresAuthentication.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Security/ModuleSecurity.cs#L27"&gt;https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Security/ModuleSecurity.cs#L27&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both modules call RequiresClaims passing in a specific parameter. Admin or Member. This means when we login we can add the specific claim to each user so that they can only access certain portions of the website.&lt;/p&gt;

&lt;p&gt;Now that these modules are implemented, we can use these in our modules that we create. So lets add two modules to both area's that will require authentication.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image37.png" /&gt;&lt;/p&gt;

&lt;p&gt;Here's two new Modules, both named OrderModule. One is used for the members to view their orders and order details. And one for the admin to see pending orders and such so he can process them. Basic ecommerce type scenario.&lt;/p&gt;

&lt;p&gt;Now if we view each of these pages in a browser:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image38.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image39.png" /&gt;&lt;/p&gt;

&lt;p&gt;You can see both pages end up at the same login  maybe we want to have a different login page for admin. So I'll create a new login, setup just the same as one from the previous post. But now I need to configure them both.&lt;/p&gt;

&lt;p&gt;This is where Nancy Bootstrapper comes in handy.&lt;/p&gt;

&lt;p&gt;First up - In the ConfigureRequestContainer method, we need to include a second class implementing IUserMapper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void ConfigureRequestContainer(TinyIoCContainer container, NancyContext context)
{
    base.ConfigureRequestContainer(container, context);
    container.Register&amp;lt;IUserMapper, MemberDBUserMapper&amp;gt;("Member");
    container.Register&amp;lt;IUserMapper, AdminDBUserMapper&amp;gt;("Admin");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've included a new class called AdminDBUserMapper, and renamed the old one to avoid confusion. These classes are what authenticate the user in your system, and map it to an object that NancyFX can handle. In this case an IUserIdentity.&lt;/p&gt;

&lt;p&gt;Also, when both classes are registered, I gave them specific names. These are Keyed so that when we want to authenticate an Admin, we can resolve the Admin Mapper.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MemberDBUserMapper : IUserMapper
{
    public IDocumentStore DocumentStore { get; set; }
    public MemberDBUserMapper(IDocumentStore documentStore)
    {
        DocumentStore = documentStore;
    }

    public IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context)
    {
        using (var session = DocumentStore.OpenSession())
        {
            var member = session.Query&amp;lt;Member&amp;gt;().SingleOrDefault(x =&amp;gt; x.Identifier == identifier);

            if (member == null)
                return null;

            return new AuthenticatedUser
            {
                UserName = member.Username,
                Claims = new[] { "Member" }
            };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The MemberDBUserMapper is the same as the previous post, it pulls the user from RavenDB, and it add's a single claim. 'Member' this it the claim we used in the SecureMemberModule.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AdminDBUserMapper : IUserMapper
{
    public IDocumentStore DocumentStore { get; set; }
    public static readonly ConcurrentDictionary&amp;lt;Guid, dynamic&amp;gt; Admins = new ConcurrentDictionary&amp;lt;Guid, dynamic&amp;gt;();

    static AdminDBUserMapper()
    {
        Admins.GetOrAdd(Guid.NewGuid(), new { Username = "admin", Password = "test" });
        Admins.GetOrAdd(Guid.NewGuid(), new { Username = "admin2", Password = "test" });
        Admins.GetOrAdd(Guid.NewGuid(), new { Username = "admin3", Password = "test" });
    }

    public AdminDBUserMapper(IDocumentStore documentStore)
    {
        DocumentStore = documentStore;
    }

    public IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context)
    {
        if (!Admins.ContainsKey(identifier))
            return null;

        var member = Admins[identifier];

        if (member == null)
            return null;

        return new AuthenticatedUser
        {
            UserName = member.Username,
            Claims = new[] { "Admin" }
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The AdminDBUserMapper is slightly different, rather than pulling from RavenDB, it uses a static in-memory collection of admins/passwords.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm not suggesting you do something like this in your system, it's purely for demoing that there are two different ways of getting Users. In a more realistic scenario the Admin would be pulled from RavenDB from a different collection, or from a different Database table when using SQL Server or the likes of.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our mapping implemented, we can configure when these are called. In the previous post I implemented the Bootstrapper method: RequestStartup&lt;/p&gt;

&lt;p&gt;This time we will extend it with a little bit of if/else logic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)
{
    base.RequestStartup(container, pipelines, context);
    if (context.Request.Url.Path.StartsWith("/admin"))
    {
        var formsAuthConfiguration = new FormsAuthenticationConfiguration
        {
            RedirectUrl = "~/admin/login",
            UserMapper = container.Resolve&amp;lt;IUserMapper&amp;gt;("Admin"),
        };

        FormsAuthentication.Enable(pipelines, formsAuthConfiguration);
    }
    else
    {
        var formsAuthConfiguration = new FormsAuthenticationConfiguration
        {
            RedirectUrl = "~/login",
            UserMapper = container.Resolve&amp;lt;IUserMapper&amp;gt;("Member"),
        };

        FormsAuthentication.Enable(pipelines, formsAuthConfiguration);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method is called for each request, so for each request we will do a quick check to see what the path is, and then wire up the FormsAuthentication for the request.&lt;/p&gt;

&lt;p&gt;If the path happens to start with /admin, then we want the user to be sent to the admin login page, if it's anywhere else, we want it to go to the normal login page.&lt;/p&gt;

&lt;p&gt;Now if we visit the same two pages again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image40.png" /&gt;&lt;/p&gt;

&lt;p&gt;The normal orders page goes to the normal login page.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image41.png" /&gt;&lt;/p&gt;

&lt;p&gt;But the Admin order page goes to the Admin login page!&lt;/p&gt;

&lt;h2&gt;Login as normal user&lt;/h2&gt;

&lt;p&gt;If we login to the normal website, and we try visit the secure page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image42.png" /&gt;&lt;/p&gt;

&lt;p&gt;Great! But if we visit the Admin page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image43.png" /&gt;&lt;/p&gt;

&lt;p&gt;BAM Right back to the login page, access DENIED! Exactly what we wanted.&lt;/p&gt;

&lt;h2&gt;Login as Admin&lt;/h2&gt;

&lt;p&gt;Now after logging out and logging back in as an Admin. Visit the Admin page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image44.png" /&gt;&lt;/p&gt;

&lt;p&gt;WOOOHOO! We have Orders! Now if we try the normal page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image45.png" /&gt;&lt;/p&gt;

&lt;p&gt;DENIED!&lt;/p&gt;

&lt;p&gt;And there you have it. With a little bit of extra configuration you can setup custom Forms Authentication for different area's of your website.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/</guid><link>http://www.philliphaydon.com/2012/12/forms-authentication-with-nancyfx/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>Forms Authentication with NancyFX</title><description>&lt;p&gt;There's already quite a bit of documentation on the Nancy wiki about forms authentication, but I wanted to write about it anyway.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is written with Nancy 0.14.1 - this may be subject to change in future versions.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nancy supports a module for forms authentication, it works some-what similar to the way forms auth works in ASP.NET, except it's abstracted away and is not part of the core Nancy engine, which is great. It means that if you don't like the way forms authentication works, you can rip it out and write your own from scratch, or download the project and modify it to your hearts content.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nuget.org/packages/Nancy.Authentication.Forms"&gt;http://nuget.org/packages/Nancy.Authentication.Forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Authentication.Forms"&gt;https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Authentication.Forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the GitHub project, you can see that the implementation is actually really small. So should you want to poke around, there's not much to look at.&lt;/p&gt;

</description><pubDate>Mon, 17 Dec 2012 16:00:00 Z</pubDate><a10:updated>2012-12-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There's already quite a bit of documentation on the Nancy wiki about forms authentication, but I wanted to write about it anyway.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is written with Nancy 0.14.1 - this may be subject to change in future versions.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Nancy supports a module for forms authentication, it works some-what similar to the way forms auth works in ASP.NET, except it's abstracted away and is not part of the core Nancy engine, which is great. It means that if you don't like the way forms authentication works, you can rip it out and write your own from scratch, or download the project and modify it to your hearts content.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nuget.org/packages/Nancy.Authentication.Forms"&gt;http://nuget.org/packages/Nancy.Authentication.Forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Authentication.Forms"&gt;https://github.com/NancyFx/Nancy/tree/master/src/Nancy.Authentication.Forms&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the GitHub project, you can see that the implementation is actually really small. So should you want to poke around, there's not much to look at.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Packages&lt;/h3&gt;

&lt;p&gt;First up we need to install the packages, Nancy, Nancy.Hosting.Aspnet, and Nancy.Authentication.Forms&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PM&amp;gt; install-package Nancy 
Successfully installed "Nancy 0.14.1". 
Successfully added "Nancy 0.14.1" to Nancy.FormsAuth.

PM&amp;gt; install-package Nancy.Authentication.Forms 
Attempting to resolve dependency "Nancy (= 0.14.1)". 
Successfully installed "Nancy.Authentication.Forms 0.14.1". 
Successfully added "Nancy.Authentication.Forms 0.14.1" to Nancy.FormsAuth.

PM&amp;gt; install-package Nancy.Hosting.Aspnet 
Attempting to resolve dependency "Nancy (= 0.14.1)". 
Successfully installed "Nancy.Hosting.Aspnet 0.14.1". 
Successfully added "Nancy.Hosting.Aspnet 0.14.1" to Nancy.FormsAuth.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Configuring Forms Auth&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class Bootstrapper : DefaultNancyBootstrapper
{
    protected override void ConfigureRequestContainer(TinyIoCContainer container, NancyContext context)
    {
        base.ConfigureRequestContainer(container, context);
        container.Register&amp;lt;IUserMapper, DatabaseUser&amp;gt;();
    }

    protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)
    {
        base.RequestStartup(container, pipelines, context);

        var formsAuthConfiguration = new FormsAuthenticationConfiguration
        {
            RedirectUrl = "~/login",
            UserMapper = container.Resolve&amp;lt;IUserMapper&amp;gt;(),
        };

        FormsAuthentication.Enable(pipelines, formsAuthConfiguration);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all I've done to the bootstrapper. The first method ConfigureRequestContainer registers a class for IUserMapper. Currently it's in red because it doesn't exist yet, we need to create it :)&lt;/p&gt;

&lt;p&gt;The second method configures the Forms Authentication plugin. All we need to define is the redirect URL for unauthenticated requests. That means if the user attempts to go to a page that requires authentication, they will be redirected here instead. Using the IoC container we resolve the registered IUserMapper class which is what is used to retrieve the user from the Database (or where ever you persist your users)&lt;/p&gt;

&lt;h3&gt;Creating a class implementing IUserMapper&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class DatabaseUser : IUserMapper
{
    public IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context)
    {
        throw new NotImplementedException();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The IUserMapper interface only requires you to implement 1 method. This method is used to authenticate the user on each request and return some basic data of the user.&lt;/p&gt;

&lt;p&gt;So we need to create a user to return that implements IUserIdentity.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class AuthenticatedUser : IUserIdentity
{
    public string UserName { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Claims { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That's all we need for the user. Now we need to implement the DatabaseUser class.&lt;/p&gt;

&lt;p&gt;The method GetUserFromIdentifier takes a Guid. This is what's used to identify the user, it's a Guid because it's a good idea to not use an identifier that is easily guessable.&lt;/p&gt;

&lt;p&gt;It does mean that your persisted user needs to have an identifier that's a Guid. This doesn't mean the PrimaryKey needs to be a Guid, you can leave it as an INT or what ever your database currently uses. But add a new field to the table or document etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class DatabaseUser : IUserMapper
{
    public IDocumentStore DocumentStore { get; set; }
    public DatabaseUser(IDocumentStore documentStore)
    {
        DocumentStore = documentStore;
    }

    public IUserIdentity GetUserFromIdentifier(Guid identifier, NancyContext context)
    {
        using (var session = DocumentStore.OpenSession())
        {
            var member = session.Query&amp;lt;Member&amp;gt;().SingleOrDefault(x =&amp;gt; x.Identifier == identifier);

            if (member == null)
                return null;

            return new UserIdentity
            {
                UserName = member.DisplayName,
                Claims = new []
                {
                    "NewUser",
                    "CanComment"
                }
            };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is using RavenDB for data access, it's pulling the Member based on an Identifier property, but same applies to any persistence you use, SQL Server, MongoDB, etc.&lt;/p&gt;

&lt;p&gt;Now we have configured everything, now we just need to Login, and visit a page we can't access. Lets create two modules:&lt;/p&gt;

&lt;h3&gt;HomeModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class HomeModule : NancyModule
{
    public HomeModule()
    {
        Get["/"] = _ =&amp;gt;
        {
            return "Hello World";
        };
        Get["/login"] = _ =&amp;gt;
        {
            return View["login.html"];
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;SecureModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class SecureModule : NancyModule
{
    public SecureModule()
    {
        this.RequiresAuthentication();
        Get["/secure"] = _ =&amp;gt;
        {
            return "I'm secure!";
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two Modules are really simple, for the purpose of demoing :) as you can see the Secure module calls RequiresAuthentication, this calls the extension method defined in the Nancy's security, this as a result, calls the the Forms Authentication plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Security/ModuleSecurity.cs"&gt;https://github.com/NancyFx/Nancy/blob/master/src/Nancy/Security/ModuleSecurity.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when we visit the webpage /secure we end up at the login page.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image31.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to implement the login. So on the HomeModule I'll add a POST handler.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post["/login"] = _ =&amp;gt;
{
    var loginParams = this.Bind&amp;lt;LoginParams&amp;gt;();
    Member member;

    using (var session = store.OpenSession())
    {
        member = session.Query&amp;lt;Member&amp;gt;().SingleOrDefault(x =&amp;gt; x.Username == loginParams.Username);
        if (member != null &amp;amp;&amp;amp; member.Password != loginParams.Password)
        {
            return "username and/or password was incorrect";
        }
    }

    return this.LoginAndRedirect(member.Identifier, fallbackRedirectUrl: "/");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we verify that the user has successfully logged in, we call LoginAndRedirect extension method, passing in the Identifier. This makes a cookie which is sent back on each request to authenticate.&lt;/p&gt;

&lt;p&gt;Now that's implemented, we can login and visit the Secure page:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image32.png" /&gt;&lt;/p&gt;

&lt;p&gt;So when we hit the secure module, and put a break point on the DatabaseUser:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image33.png" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see Nancy has invoked it, passing in the identifier which is then used to find the user in the database and return it.&lt;/p&gt;

&lt;p&gt;This also populates the CurrentUser on the context:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image34.png" /&gt;&lt;/p&gt;

&lt;p&gt;To log a user out again, all you need to do is call the Logout() extension method inside your own module and you're done :)&lt;/p&gt;

&lt;p&gt;That's the basic use of Forms Authentication using Nancy.&lt;/p&gt;

&lt;p&gt;One thing people get concerned about is the DatabaseUser class querying the database on every request. For 99% of the scenarios you ever face this is perfectly fine, this is a select by Id, and should be fast even if you have a few million records in the table.&lt;/p&gt;

&lt;p&gt;If your table is slow to query then you have much bigger issues to worry about, and you should be fixing those issues!&lt;/p&gt;

&lt;p&gt;Next post I'm going to explain how you can run two Forms Authentications for two different sections of the website. i.e Normal users and Admin users. I'll also explain how this identifier is beneficial to make it so users can only be logged on in 1 location at a time.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/12/windows-store-app-and-remote-debugging-on-a-surface-rt/</guid><link>http://www.philliphaydon.com/2012/12/windows-store-app-and-remote-debugging-on-a-surface-rt/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App and Remote Debugging on a Surface RT</title><description>&lt;p&gt;In order to run your app from Visual Studio on your remote device, in my case I want to run it on my Surface... but you can do this with any remote device such as another desktop, a laptop, a tablet running Windows Pro or RT etc, all you really need to do is install the Remote Debugging tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.microsoft.com/visualstudio/eng/downloads#remote-tools"&gt;http://www.microsoft.com/visualstudio/eng/downloads#remote-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the Surface you just need to download and install:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.microsoft.com/visualstudio/eng/downloads#remote-tools"&gt;&lt;img src="http://www.philliphaydon.com/images/image17.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is installed you will get a little icon on your Start Screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/images/image7.png"&gt;&lt;img src="http://www.philliphaydon.com/images/image7.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the Green Arrow:&lt;/p&gt;

</description><pubDate>Mon, 17 Dec 2012 16:00:00 Z</pubDate><a10:updated>2012-12-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;In order to run your app from Visual Studio on your remote device, in my case I want to run it on my Surface... but you can do this with any remote device such as another desktop, a laptop, a tablet running Windows Pro or RT etc, all you really need to do is install the Remote Debugging tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.microsoft.com/visualstudio/eng/downloads#remote-tools"&gt;http://www.microsoft.com/visualstudio/eng/downloads#remote-tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the Surface you just need to download and install:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.microsoft.com/visualstudio/eng/downloads#remote-tools"&gt;&lt;img src="http://www.philliphaydon.com/images/image17.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once this is installed you will get a little icon on your Start Screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/images/image7.png"&gt;&lt;img src="http://www.philliphaydon.com/images/image7.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the Green Arrow:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image18.png" /&gt;&lt;/p&gt;

&lt;p&gt;When you run this for the first time it will ask you to configure some stuff, mainly for the firewall:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image19.png" /&gt;&lt;/p&gt;

&lt;p&gt;You only need to do this once. Once this is done you will get the following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image20.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now you're all ready for some awesome remote debugging!&lt;/p&gt;

&lt;p&gt;In Visual Studio you need to select 'Remote Machine' in the debug list:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image21.png" /&gt;&lt;/p&gt;

&lt;p&gt;This opens up a remote debug connection:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image22.png" /&gt;&lt;/p&gt;

&lt;p&gt;Enter in the IP for the Surface. (You can get this by calling 'ipconfig' in command line) After pressing select the window will close, and you will be ready!&lt;/p&gt;

&lt;p&gt;Now you just need to debug the app. Using the same app from the previous post I've put a break point on the MainView constructor:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image23.png" /&gt;&lt;/p&gt;

&lt;p&gt;When I begin debugging makes a request to the device and authenticates:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image24.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're debugging on a device that is logged in with a different user, then Visual Studio will prompt you for credentials. Because I'm using the same LiveID on both my Desktop and Surface, it doesn't prompt me to login.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once connected, it will install the app just like it does on your desktop, and then automatically runs and debugs the app:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image25.png" /&gt;&lt;/p&gt;

&lt;p&gt;And as you can see:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/image26.png" /&gt;&lt;/p&gt;

&lt;p&gt;My shinny Surface screen running the Hello World sample from the previous post.&lt;/p&gt;

&lt;p&gt;Debugging allows you to step through code just the same as doing it locally :)&lt;/p&gt;

&lt;p&gt;Hopefully this helps anyone who has had difficulty or confusion debugging on remote devices.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/</guid><link>http://www.philliphaydon.com/2012/12/windows-store-app-with-caliburn-micro-getting-started/</link><a10:author><a10:name /></a10:author><category>Windows 8 App</category><title>Windows Store App with Caliburn.Micro - Getting Started</title><description>&lt;p&gt;So I've been learning Windows 8 development recently, specifically with C#/XAML, and Caliburn.Micro for the MVVM goodness. This is all brand new stuff for me, never done any WPF, Silverlight or Windows Phone dev. So I figured it's a good chance to blog what I'm learning.&lt;/p&gt;

&lt;p&gt;In this post I want to show you how to get up and running.&lt;/p&gt;

&lt;p&gt;I started by reading the blog posts over at Mindscape.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/01/12/caliburn-micro-part-1-getting-started/"&gt;http://www.mindscapehq.com/blog/index.php/2012/01/12/caliburn-micro-part-1-getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(great series by &lt;a href="https://twitter.com/QuantumNgtmare"&gt;@Jason&lt;/a&gt;, list of links at bottom of this post)&lt;/p&gt;

&lt;p&gt;The downside is they were very WPF centric, and a few things getting started have changed. There's no bootstrapper for example.&lt;/p&gt;

&lt;p&gt;So, here's my blog series.&lt;/p&gt;

</description><pubDate>Thu, 13 Dec 2012 16:00:00 Z</pubDate><a10:updated>2012-12-13T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So I've been learning Windows 8 development recently, specifically with C#/XAML, and Caliburn.Micro for the MVVM goodness. This is all brand new stuff for me, never done any WPF, Silverlight or Windows Phone dev. So I figured it's a good chance to blog what I'm learning.&lt;/p&gt;

&lt;p&gt;In this post I want to show you how to get up and running.&lt;/p&gt;

&lt;p&gt;I started by reading the blog posts over at Mindscape.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/01/12/caliburn-micro-part-1-getting-started/"&gt;http://www.mindscapehq.com/blog/index.php/2012/01/12/caliburn-micro-part-1-getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(great series by &lt;a href="https://twitter.com/QuantumNgtmare"&gt;@Jason&lt;/a&gt;, list of links at bottom of this post)&lt;/p&gt;

&lt;p&gt;The downside is they were very WPF centric, and a few things getting started have changed. There's no bootstrapper for example.&lt;/p&gt;

&lt;p&gt;So, here's my blog series.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Before getting started&lt;/h2&gt;

&lt;p&gt;The most important thing to note about building Windows Store App's is that you can't just reference any old assembly, it has to be either developed for Windows Store, or be created as a portable library. This is because WinRT (Windows Runtime) doesn't contain all the same namespaces as the .NET framework.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Create a new Blank App (XAML)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next you're going to need to install Caliburn.Micro, I use Nuget for this, but you can download the package and reference it manually from codeplex.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Your solution should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;The first thing we can do is delete the MainPage.xaml, and add a couple of folder, Views and ViewModels. You can also add your own Styles file too. While you're at it, add a MainView.xaml and MainViewModel.cs to their respected folders.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Let's start writing/fixing code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.xaml&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This file is the entry point to your application. It's the very first file that is executed, it's best to leave the file name as is, but if you wish to change it. Then you need to open your Package.appxmanifest file and modify the entry point.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;For now, don't worry about changing this, I'll try cover this in future posts.&lt;/p&gt;

&lt;p&gt;First thing we want to do is open up the XAML file, not the code file. We can strip back the comments and include our custom styles resource.&lt;/p&gt;

&lt;p&gt;Next we want to add in a namespace attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xmlns:caliburn="using:Caliburn.Micro"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is like adding custom controls to a web.config file or declaring the custom controls in your page, then accessing them via the prefix you define.&lt;/p&gt;

&lt;p&gt;This allows us to modify the root Element and make it a Caliburn Application.&lt;/p&gt;

&lt;p&gt;What you should end up with is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;caliburn:CaliburnApplication
    x:Class="SampleProject.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SampleProject"
    xmlns:caliburn="using:Caliburn.Micro"&amp;gt;
    &amp;lt;Application.Resources&amp;gt;
        &amp;lt;ResourceDictionary&amp;gt;
            &amp;lt;ResourceDictionary.MergedDictionaries&amp;gt;
                &amp;lt;ResourceDictionary Source="Common/StandardStyles.xaml"/&amp;gt;
                &amp;lt;ResourceDictionary Source="Common/CustomStyles.xaml"/&amp;gt;
            &amp;lt;/ResourceDictionary.MergedDictionaries&amp;gt;
        &amp;lt;/ResourceDictionary&amp;gt;
    &amp;lt;/Application.Resources&amp;gt;
&amp;lt;/caliburn:CaliburnApplication&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing you want to do is open up the code file for the App.xaml file. By default this has a LOT of stuff in it, that we don't need at all.&lt;/p&gt;

&lt;p&gt;Below is the recommendation sample from Caliburn.Micro documentation, it does quite a bit including having a basic IoC container for WinRT, and handles View or ViewModel first approach.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Caliburn.Micro 1.4.1 has a breaking change, please read the &lt;a href="http://www.philliphaydon.com/2013/02/windows-store-app-with-caliburn-micro-getting-started-updated/"&gt;updated post&lt;/a&gt; for info on updating the code below to be compatiable with v1.4.1&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using System;
using System.Collections.Generic;
using Caliburn.Micro;
using SampleProject.Views;
using Windows.ApplicationModel.Activation;
using Windows.UI.Xaml.Controls;
namespace SampleProject
{
    sealed partial class App
    {
        private WinRTContainer container;

        public App()
        {
            InitializeComponent();
        }

        protected override void Configure()
        {
            container = new WinRTContainer();
            container.RegisterWinRTServices();
        }

        protected override object GetInstance(Type service, string key)
        {
            return container.GetInstance(service, key);
        }

        protected override IEnumerable&amp;lt;object&amp;gt; GetAllInstances(Type service)
        {
            return container.GetAllInstances(service);
        }

        protected override void BuildUp(object instance)
        {
            container.BuildUp(instance);
        }

        protected override void PrepareViewFirst(Frame rootFrame)
        {
            container.RegisterNavigationService(rootFrame);
        }

        protected override void OnLaunched(LaunchActivatedEventArgs args)
        {
            DisplayRootView&amp;lt;MainView&amp;gt;();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The very last method 'OnLaunched' has the class to our Main View, this tells the application that the first thing we will see will be the MainView.&lt;/p&gt;

&lt;p&gt;Next lets look at the ViewModel.&lt;/p&gt;

&lt;h3&gt;MainViewModel.cs&lt;/h3&gt;

&lt;p&gt;In this file, strip everything back and inherit 'Screen'&lt;/p&gt;

&lt;p&gt;Although this file will be loaded, it's not going to do anything just yet. At least not for this sample.&lt;/p&gt;

&lt;h3&gt;MainView.xaml&lt;/h3&gt;

&lt;p&gt;Now lets look at the view, open up the xaml file. This file should have been created with as a Blank page, once open, add a TextBlock with the text Hello World.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Page x:Class="SampleProject.Views.MainView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:SampleProject.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d"&amp;gt;
    &amp;lt;Grid Background="{StaticResource ApplicationPageBackgroundThemeBrush}"&amp;gt;
        &amp;lt;TextBlock Text="Hello World" /&amp;gt;
    &amp;lt;/Grid&amp;gt;
&amp;lt;/Page&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We don't need to modify the code file for this.&lt;/p&gt;

&lt;p&gt;Now we should be able to run app. There is 3 possible ways to run:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h4&gt;Local Machine&lt;/h4&gt;

&lt;p&gt;Using a Local Machine means the application will be loaded into your Start Screen and automatically be run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Simulator&lt;/h4&gt;

&lt;p&gt;The simulator will open up a simulation app which resembles a tablet, this gives a bunch of options to simulate different gestures such as using touch and pinch etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;h4&gt;Remote Machine&lt;/h4&gt;

&lt;p&gt;The remote machine option requires the Remote SDK to be installed and running on a remote machine. This is handy for testing on an actual device. I'll cover this next week when I explain how to setup remote debugging.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I suggest selecting Simulator and pressing F5. Assuming you've followed along you should get this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-store-start-6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I increased the font size for the purpose of taking a screen grab :)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And that's it, so far all we've done is configure Caliburn and tell it to load a view, we aren't really utilizing it yet but we will in the future!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As mentioned here's Jason's post over at Mindscape:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/01/12/caliburn-micro-part-1-getting-started/"&gt;Caliburn Micro Part 1: Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/01/16/caliburn-micro-part-2-data-binding-and-events/"&gt;Caliburn Micro Part 2: Data Binding and Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/01/24/caliburn-micro-part-3-more-about-events-and-parameters/"&gt;Caliburn Micro Part 3: More About Events and Parameters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/02/01/caliburn-micro-part-4-the-event-aggregator/"&gt;Caliburn Micro Part 4: The Event Aggregator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2012/03/13/caliburn-micro-part-5-the-window-manager/"&gt;Caliburn Micro Part 5: The Window Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/11/using-partial-renders-with-nancy-rather-than-render-actions-like-mvc/</guid><link>http://www.philliphaydon.com/2012/11/using-partial-renders-with-nancy-rather-than-render-actions-like-mvc/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>Using Partial Renders with Nancy rather than Render Actions like MVC</title><description>&lt;p&gt;Today on twitter, &lt;a href="http://blog.orangelightning.co.uk/"&gt;Phil Jones&lt;/a&gt; (&lt;a href="http://twitter.com/philjones88"&gt;@philjones88&lt;/a&gt;) asked how you would do RenderAction (ASP.NET MVC extension)&lt;/p&gt;

&lt;p&gt;I personally don't like RenderAction in MVC, that's not to say it's bad, I just think it hides away important implementation of a page render. I think RenderAction is a bad abstraction. But this is my personal opinion. So don't hate me for it :)&lt;/p&gt;

&lt;p&gt;Rather than using RenderAction I prefer to use Partial views.&lt;/p&gt;

&lt;p&gt;Lets look at a youtube site for an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/partial-renders-nancy-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side is main content, while on the right hand side is related videos. In ASP.NET MVC we might use something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.RenderAction("Related", "Videos");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or something similar, I forget the syntax :)&lt;/p&gt;

</description><pubDate>Thu, 29 Nov 2012 16:00:00 Z</pubDate><a10:updated>2012-11-29T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Today on twitter, &lt;a href="http://blog.orangelightning.co.uk/"&gt;Phil Jones&lt;/a&gt; (&lt;a href="http://twitter.com/philjones88"&gt;@philjones88&lt;/a&gt;) asked how you would do RenderAction (ASP.NET MVC extension)&lt;/p&gt;

&lt;p&gt;I personally don't like RenderAction in MVC, that's not to say it's bad, I just think it hides away important implementation of a page render. I think RenderAction is a bad abstraction. But this is my personal opinion. So don't hate me for it :)&lt;/p&gt;

&lt;p&gt;Rather than using RenderAction I prefer to use Partial views.&lt;/p&gt;

&lt;p&gt;Lets look at a youtube site for an example:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/partial-renders-nancy-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;On the left hand side is main content, while on the right hand side is related videos. In ASP.NET MVC we might use something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.RenderAction("Related", "Videos");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or something similar, I forget the syntax :)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;This would use the Query String to get the Video Id and pull all related videos and display them.&lt;/p&gt;

&lt;p&gt;In Nancy if I was building the same page, I would push down a dynamic model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@inherits Nancy.ViewEngines.Razor.NancyRazorViewBase&amp;lt;dynamic&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the Module, query for the video + the recommended data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class VideosModule : RavenModule
{
    public VideosModule(IDocumentStore documentStore) : base(documentStore)
    {
        Get["/videos/{id}"] = _ =&amp;gt;
        {
            Model.Videos = DocumentSession.Load&amp;lt;Video&amp;gt;(_.id);
            Model.Recommended = DocumentSession.Query&amp;lt;Video, Videos_Recommended&amp;gt;().Where(x =&amp;gt; x.VideoId == _.id);
            return View["display-video", Model];
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Model is implemented as an ExpandoObject on the RavenModule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class RavenModule : NancyModule
{
    protected dynamic Model = new ExpandoObject();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now on my display-video view, I add:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Html.Partial("recommended", Model.Recommended)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This 'recommended' view is the same as the 'display-video' view, in that it uses dynamic also.&lt;/p&gt;

&lt;p&gt;That's all there is to it.&lt;/p&gt;

&lt;p&gt;In regards to information displayed on the Master Page (or master layout, what ever you want to call it) Because the 'Model' is defined on the base module, you can implement properties for menu, footer, member details, etc. And still use Partials to render those also.&lt;/p&gt;

&lt;p&gt;I'll add a Git Repo for this project in the near future.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation/</guid><link>http://www.philliphaydon.com/2012/11/nancy-and-content-negotiation/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX and Content Negotiation</title><description>&lt;p&gt;This has to be one of the most awesome features of Nancy, Content Negotiation. Recently added in 0.12, it gives you the ability to implement a single route that responds with different versions of the same document, without having to mess up your code with duplicate methods or conditional statements.&lt;/p&gt;

&lt;p&gt;When doing this in ASP.NET MVC I would have to check the content type and decide how I want to respond to the request.&lt;/p&gt;

&lt;p&gt;This ended up making duplicate methods, one which would be used by a normal GET request, while the 2nd would be for an AJAX request. Or if it was similar, use conditional logic in the single method to decide how the action should respond...&lt;/p&gt;

&lt;p&gt;Nancy on the other hand supports Content Negotiation out of the box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/negotiated"] = parameters =&amp;gt; {
    return Negotiate
        .WithModel(new RatPack {FirstName = "Nancy "})
        .WithMediaRangeModel("text/html", new RatPack {FirstName = "Nancy fancy pants"})
        .WithView("negotiatedview")
        .WithHeader("X-Custom", "SomeValue");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sample taken from Nancy GitHub Repo&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;What is content negotiation?&lt;/h2&gt;

&lt;p&gt;In short, it's the ability to serve different versions of a document to the same URI.&lt;/p&gt;

</description><pubDate>Wed, 07 Nov 2012 16:00:00 Z</pubDate><a10:updated>2012-11-07T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This has to be one of the most awesome features of Nancy, Content Negotiation. Recently added in 0.12, it gives you the ability to implement a single route that responds with different versions of the same document, without having to mess up your code with duplicate methods or conditional statements.&lt;/p&gt;

&lt;p&gt;When doing this in ASP.NET MVC I would have to check the content type and decide how I want to respond to the request.&lt;/p&gt;

&lt;p&gt;This ended up making duplicate methods, one which would be used by a normal GET request, while the 2nd would be for an AJAX request. Or if it was similar, use conditional logic in the single method to decide how the action should respond...&lt;/p&gt;

&lt;p&gt;Nancy on the other hand supports Content Negotiation out of the box.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get["/negotiated"] = parameters =&amp;gt; {
    return Negotiate
        .WithModel(new RatPack {FirstName = "Nancy "})
        .WithMediaRangeModel("text/html", new RatPack {FirstName = "Nancy fancy pants"})
        .WithView("negotiatedview")
        .WithHeader("X-Custom", "SomeValue");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Sample taken from Nancy GitHub Repo&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;What is content negotiation?&lt;/h2&gt;

&lt;p&gt;In short, it's the ability to serve different versions of a document to the same URI.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;To read more you can visit &lt;a href="http://en.wikipedia.org/wiki/Content_negotiation"&gt;Wikipedia&lt;/a&gt; or &lt;a href="http://www.soapatterns.org/content_negotiation.php"&gt;SOA Patterns&lt;/a&gt;... or... &lt;a href="http://www.bing.com/"&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Why should I care?&lt;/h2&gt;

&lt;p&gt;Well lets assume we're building a website and we have a shopping cart, we get to the checkout page and there's a button to delete the item from your cart.&lt;/p&gt;

&lt;p&gt;You want to give a really nice user experience by not posting back the entire page. You would rather just tell the server to delete the item from the cart, and do a quick update on the screen, and avoid the whole page reloading.&lt;/p&gt;

&lt;p&gt;However what if the page is taking a long time to load, and as a result, the JavaScript hasn't been executed and wired up all the events to the buttons to delete items from your cart, you still want to be able to post the entire page and maintain the usability of the page.&lt;/p&gt;

&lt;p&gt;The same scenario occurs if the user has (unlikely) turned JavaScript off.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;So using the example above, deleting an item from a cart and updating the page, using JavaScript verses a full postback of the page, using the exact same route.&lt;/p&gt;

&lt;p&gt;Let's create a really basic module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class HomeModule : NancyModule
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }
    public static IList&amp;lt;Product&amp;gt; Products = new List&amp;lt;Product&amp;gt;()
    {
        new Product {Id = 1, Name = "Surface", Price = 499},
        new Product {Id = 2, Name = "iPad", Price = 899},
        new Product {Id = 3, Name = "Nexus 10", Price = 599},
        new Product {Id = 4, Name = "Think Pad", Price = 499},
        new Product {Id = 5, Name = "Yoga", Price = 699},
    };

    public dynamic Model = new ExpandoObject();

    public HomeModule()
    {
        Model.Deleted = false;

        Get["/"] = _ =&amp;gt;
        {
            Model.Products = Products;

            return View["index", Model];
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've nested a Product class in there, and created a static list of products for demo.&lt;/p&gt;

&lt;p&gt;We need a View to go with this to display the Products:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;Products&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;Posted back using: &amp;lt;span class="status"&amp;gt;@if ((bool)Model.Deleted) { @Html.Raw("Full Postback"); }&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;table&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th style="width: 50px;"&amp;gt;Id&amp;lt;/th&amp;gt;
      &amp;lt;th style="width: 90px;"&amp;gt;Name&amp;lt;/th&amp;gt;
      &amp;lt;th style="width: 50px;"&amp;gt;Price&amp;lt;/th&amp;gt;
      &amp;lt;th style="width: 150px;"&amp;gt;&amp;amp;nbsp;&amp;lt;/th&amp;gt;
      &amp;lt;th style="width: 160px;"&amp;gt;&amp;amp;nbsp;&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;

  @foreach (var product in Model.Products)
  {
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;@product.Id&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;@product.Name&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;@product.Price.ToString("c")&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;a href="/delete/@product.Id"&amp;gt;Delete With JavaScript&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;&amp;lt;a href="/delete/@product.Id"&amp;gt;Delete Without JavaScript&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;  
  }
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This rendered will display the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-conneg-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;So when we press the 'Delete Without JavaScript' button we want it to remove the item, so we can add a new route:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get[@"/delete/{id}"] = _ =&amp;gt;
{
    var id      = (int) _.id;
    var item    = Products.Single(x =&amp;gt; x.Id == id);

    Products.Remove(item);
    Model.Products = Products;
    Model.Deleted = true;

    return View["index", Model];
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if we press the button:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-conneg-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;We can see the URL has updated, and the 3rd item was deleted from the list. It also updated the text to day it used a full postpack. We can see that a full postback has occurred since the URL changed.&lt;/p&gt;

&lt;p&gt;Now we want to make the 'Delete With JavaScript' button work.&lt;/p&gt;

&lt;p&gt;So we can add some JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src="/Scripts/jquery-1.8.2.min.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
  (function ($) {
    $(document).on("click", 'a:contains(Delete With JavaScript)', function (e) {

      e.preventDefault();

      var that = $(this),
          tr = that.closest('tr');

      $.ajax({
        url: this.href,
        type: 'GET',
        dataType: 'JSON',
        contentType: 'application/json; charset=utf-8'
      }).success(function (data) {
        if (data.Deleted === true) {
          tr.remove();
          $('.status').text("Using JavaScript");
        }
      });

    });

  })(jQuery);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this just looks for an anchor tag with the text 'Delete With JavaScript' since we don't want to stop the other buttons from working.&lt;/p&gt;

&lt;p&gt;Now we need to update the Route to handle content negotiation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Get[@"/delete/{id}"] = _ =&amp;gt;
{
    var id      = (int) _.id;
    var item    = Products.Single(x =&amp;gt; x.Id == id);

    Products.Remove(item);
    Model.Products = Products;
    Model.Deleted = true;

    return Negotiate
        .WithModel((object) Model)
        .WithMediaRangeModel("application/json", new
        {
            Model.Deleted
        })
        .WithView("index");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implementation is identical to before, the only difference is we replaced 'View' with 'Negotiate'.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Model being returned is Dynamic, this allows me to just add the properties to it without having to define a static class. As a result I have to cast the Model to an object when passing it into the method 'WithModel', if I was using a static class I wouldn't need to do this.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;If the type if different, in this case the request was for application/json, then we pass back only the data we need, rather than everything.&lt;/p&gt;

&lt;p&gt;Now if we run the same page again but we click on 'Delete With JavaScript'&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-conneg-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This time when we delete item 4, the URL hasn't changed, but it's removed the item and said it was done using the JavaScript.&lt;/p&gt;

&lt;p&gt;Now when we click either link, both scenarios are handled by the one route.&lt;/p&gt;

&lt;h2&gt;Also...&lt;/h2&gt;

&lt;p&gt;This isn't limited to just this use case, if you're building an API and you want the route to respond with XML or JSON, or maybe even your own content type, this is an awesome feature that you can use to handle these scenarios so your consumers can get what they want, in the format they want, with no effort from you.&lt;/p&gt;

&lt;p&gt;Content Negotiation - Is Awesome.&lt;/p&gt;

&lt;p&gt;The demo for this project can be found &lt;a href="https://github.com/phillip-haydon/NancyConnegDemo"&gt;here on github&lt;/a&gt;.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/11/sinatra-book-review/</guid><link>http://www.philliphaydon.com/2012/11/sinatra-book-review/</link><a10:author><a10:name /></a10:author><category>Book Review</category><title>Sinatra Book Review</title><description>&lt;p&gt;For a while I've been wanting to pick-up Ruby, but not rails, every man and his dog is doing rails and everything I read I feel like it tries to do too much, much in the same way I feel ASP.NET MVC get's in the way too much by trying to do too much for me. I think I've written 'too much' too much. :)&lt;/p&gt;

&lt;p&gt;So I'm learning Ruby + Sinatra.&lt;/p&gt;

&lt;p&gt;Currently I'm reading &lt;a href="http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/"&gt;Programming Ruby 1.9&lt;/a&gt; but I just went on holiday, and figured a smaller book was a better idea to take with me.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.amazon.com/Sinatra-Up-Running-Alan-Harris/dp/1449304230"&gt;Sinatra Up and Running&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book, written by &lt;a href="https://twitter.com/anachronistic"&gt;Alan Harris&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/konstantinhaase"&gt;Konstantin Haase&lt;/a&gt;, is brilliant. Clocking in at 103 pages (less than the 122 Amazon states), this book is everything you need to get your feet off the ground with Sinatra and get building applications.&lt;/p&gt;

</description><pubDate>Fri, 02 Nov 2012 16:00:00 Z</pubDate><a10:updated>2012-11-02T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;For a while I've been wanting to pick-up Ruby, but not rails, every man and his dog is doing rails and everything I read I feel like it tries to do too much, much in the same way I feel ASP.NET MVC get's in the way too much by trying to do too much for me. I think I've written 'too much' too much. :)&lt;/p&gt;

&lt;p&gt;So I'm learning Ruby + Sinatra.&lt;/p&gt;

&lt;p&gt;Currently I'm reading &lt;a href="http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/"&gt;Programming Ruby 1.9&lt;/a&gt; but I just went on holiday, and figured a smaller book was a better idea to take with me.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="http://www.amazon.com/Sinatra-Up-Running-Alan-Harris/dp/1449304230"&gt;Sinatra Up and Running&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book, written by &lt;a href="https://twitter.com/anachronistic"&gt;Alan Harris&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/konstantinhaase"&gt;Konstantin Haase&lt;/a&gt;, is brilliant. Clocking in at 103 pages (less than the 122 Amazon states), this book is everything you need to get your feet off the ground with Sinatra and get building applications.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;It tells you about Sinatra, the fundamentals, what's happening behind the scenes for you, and then building your own application. At no point does the book divert away to dribble and get boring, it keeps itself simple and concise.&lt;/p&gt;

&lt;p&gt;It doesn't go too in depth that the book is confusing, and it's not too basic that an advanced rubist would get bored.&lt;/p&gt;

&lt;p&gt;If you're considering learning Sinatra I highly recommend picking up this book.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/10/keep-an-eye-on-raygun-to-zap-all-your-errors-away/</guid><link>http://www.philliphaydon.com/2012/10/keep-an-eye-on-raygun-to-zap-all-your-errors-away/</link><a10:author><a10:name /></a10:author><category>Raygun</category><title>Keep an eye on Raygun to zap all your errors away.</title><description>&lt;p&gt;Mindscape, creator of the awesome &lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;Web Workbench&lt;/a&gt; tool for visual studio as well as other awesome products, made an &lt;a href="https://twitter.com/MindscapeHQ/status/260851721230761985"&gt;announcement&lt;/a&gt; today on twitter of a new up coming product they are working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://raygun.io/?ref=1QWEy"&gt;Raygun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Little is currently known about this since trying to find out more from Mindscape is like squeezing blood from a stone, but what I do know is it's a online error tracking and reporting service, that will allow you to track errors that occur on both the serverside &lt;em&gt;and&lt;/em&gt; the clientside.&lt;/p&gt;

&lt;p&gt;This looks awesome and quite possible be a great &lt;a href="http://raygun.io/?ref=1QWEy"&gt;Elmah Replacement&lt;/a&gt; for my projects, since it will have the ability to track clientside issues that usually go unnoticed.&lt;/p&gt;

&lt;p&gt;Not only that but the community will be able to contribute their own plugins and extensions to the service!&lt;/p&gt;

&lt;p&gt;Apparently Alpha invites will start going out in the next 2 weeks, so head on over to &lt;a href="http://raygun.io/?ref=1QWEy"&gt;http://raygun.io/?ref=1QWEy&lt;/a&gt; and signup!&lt;/p&gt;
</description><pubDate>Tue, 23 Oct 2012 16:00:00 Z</pubDate><a10:updated>2012-10-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Mindscape, creator of the awesome &lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;Web Workbench&lt;/a&gt; tool for visual studio as well as other awesome products, made an &lt;a href="https://twitter.com/MindscapeHQ/status/260851721230761985"&gt;announcement&lt;/a&gt; today on twitter of a new up coming product they are working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://raygun.io/?ref=1QWEy"&gt;Raygun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Little is currently known about this since trying to find out more from Mindscape is like squeezing blood from a stone, but what I do know is it's a online error tracking and reporting service, that will allow you to track errors that occur on both the serverside &lt;em&gt;and&lt;/em&gt; the clientside.&lt;/p&gt;

&lt;p&gt;This looks awesome and quite possible be a great &lt;a href="http://raygun.io/?ref=1QWEy"&gt;Elmah Replacement&lt;/a&gt; for my projects, since it will have the ability to track clientside issues that usually go unnoticed.&lt;/p&gt;

&lt;p&gt;Not only that but the community will be able to contribute their own plugins and extensions to the service!&lt;/p&gt;

&lt;p&gt;Apparently Alpha invites will start going out in the next 2 weeks, so head on over to &lt;a href="http://raygun.io/?ref=1QWEy"&gt;http://raygun.io/?ref=1QWEy&lt;/a&gt; and signup!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/10/running-2-queries-is-fine-you-dont-need-to-always-eager-load/</guid><link>http://www.philliphaydon.com/2012/10/running-2-queries-is-fine-you-dont-need-to-always-eager-load/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Running 2 queries is fine, you don't need to ALWAYS eager load!</title><description>&lt;p&gt;Every now-n-then someone comes into JabbR or messages me asking about the best way to load a relationship. Often enough what the person is trying to do is Eager load some reference/relational data.&lt;/p&gt;

&lt;p&gt;For example, Order / Customer.&lt;/p&gt;

&lt;p&gt;If we want to load an Order and get the Customer information at the same time, we can eagerly fetch this information using an ORM, in RavenDB we can Include the results so that when we query them, the session already has the information and doesn't need to round-trip to the database.&lt;/p&gt;

&lt;h3&gt;You don't need to!&lt;/h3&gt;

&lt;p&gt;There really is nothing wrong with executing two separate queries in this scenario.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var order = Session.Load&amp;lt;Order&amp;gt;(123); 
var customer = Session.Load&amp;lt;Customer&amp;gt;(order.CustomerId);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These queries are fast to execute, and there really is nothing wrong with it! You can add some complexity in your NHibernate mappings by creating a reference so you can Eagerly fetch the reference and have 1 trip to the database etc. But this really isn't where eager fetching is beneficial!&lt;/p&gt;

</description><pubDate>Fri, 05 Oct 2012 16:00:00 Z</pubDate><a10:updated>2012-10-05T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Every now-n-then someone comes into JabbR or messages me asking about the best way to load a relationship. Often enough what the person is trying to do is Eager load some reference/relational data.&lt;/p&gt;

&lt;p&gt;For example, Order / Customer.&lt;/p&gt;

&lt;p&gt;If we want to load an Order and get the Customer information at the same time, we can eagerly fetch this information using an ORM, in RavenDB we can Include the results so that when we query them, the session already has the information and doesn't need to round-trip to the database.&lt;/p&gt;

&lt;h3&gt;You don't need to!&lt;/h3&gt;

&lt;p&gt;There really is nothing wrong with executing two separate queries in this scenario.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var order = Session.Load&amp;lt;Order&amp;gt;(123); 
var customer = Session.Load&amp;lt;Customer&amp;gt;(order.CustomerId);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These queries are fast to execute, and there really is nothing wrong with it! You can add some complexity in your NHibernate mappings by creating a reference so you can Eagerly fetch the reference and have 1 trip to the database etc. But this really isn't where eager fetching is beneficial!&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Your database is located off-site&lt;/h3&gt;

&lt;p&gt;A good reason to want to eager fetch to avoid hitting the database again, is because your database server isn't sitting next to your web server.&lt;/p&gt;

&lt;p&gt;Most website's are so small you have the database and website on the same server, these are small little hobby sites.&lt;/p&gt;

&lt;p&gt;Then you grow and you have:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/running-two-queries-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;These are sitting next to each other. Latency is low, you've probably got gigabit connection between the two, and sending 2 queries is very fast.&lt;/p&gt;

&lt;p&gt;However if you're using something like RavenHQ where the database isn't right next to each other:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/running-two-queries-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now we have to deal with hops and latency and all sorts of issues, being able to issue 1 query and get 2 results back is now beneficial!&lt;/p&gt;

&lt;h3&gt;The problem with not eager fetching&lt;/h3&gt;

&lt;p&gt;If you're not careful, then you can end up in scenarios where you have SelectN+1. For example if I was listing ALL orders, and fetching the Customer for each Order I displayed to the screen.&lt;/p&gt;

&lt;p&gt;This could end up issuing LOTS of queries.&lt;/p&gt;

&lt;p&gt;Being able to say:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = Session.Query&amp;lt;Order&amp;gt;().Fetch(x =&amp;gt; x.Customer).Eager;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Means when we can issue 1 query, and avoid ending up in a SelectN+1 scenario that might severely hurt performance.&lt;/p&gt;

&lt;p&gt;RavenDB allows you to include results, but it does one thing most (if not all) ORMs don't allow you to do. &lt;code&gt;Load&amp;lt;T&amp;gt;&lt;/code&gt; has an overload which takes an array of Ids.&lt;/p&gt;

&lt;p&gt;This allows you to do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var orders = Session.Query&amp;lt;Order&amp;gt;().ToList(); 
var customers = Session.Load&amp;lt;Customer&amp;gt;(orders.Select(x =&amp;gt; x.CustomerId).ToArray());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can compose your results together on the screen.&lt;/p&gt;

&lt;h3&gt;Note:&lt;/h3&gt;

&lt;p&gt;I'm not against eager loading, all I'm saying is you don't ALWAYS have to eager load, there are times when it's far more beneficial to eager load than others.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/10/raven-dynamicsession-for-ravendb/</guid><link>http://www.philliphaydon.com/2012/10/raven-dynamicsession-for-ravendb/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>Raven.DynamicSession for RavenDB</title><description>&lt;p&gt;&lt;em&gt;Just a word of warning before you read this. I currently don't recommend using this project. MAYBE in the future you could use it, but for now I think it's just a cool proof of concept or something handy for rapid prototyping.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last week I had a discussion with &lt;a href="https://twitter.com/@PrabirShrestha"&gt;@PrabirShrestha&lt;/a&gt; in &lt;a href="https://jabbr.net/"&gt;JabbR&lt;/a&gt; about APIs for MongoDB to achieve something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.posts.insert({title: ''first''}, function(err, doc){})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example from: &lt;a href="http://alexeypetrushin.github.com/mongo-lite/docs/index.html"&gt;http://alexeypetrushin.github.com/mongo-lite/docs/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_db.Users.Insert(Name: "Steve", Age: 50);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example from: &lt;a href="http://simplefx.org/simpledata/docs/pages/Modify/AddingData.html"&gt;http://simplefx.org/simpledata/docs/pages/Modify/AddingData.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the syntax and thinking about C#'s DynamicObject I decided to see what I could come up with. I spent the better part of the next 2-3 hours messing around in Visual Studio, chatting and coming back to it, and came up with this gist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/3798206"&gt;https://gist.github.com/3798206&lt;/a&gt;&lt;/p&gt;

</description><pubDate>Mon, 01 Oct 2012 16:00:00 Z</pubDate><a10:updated>2012-10-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;em&gt;Just a word of warning before you read this. I currently don't recommend using this project. MAYBE in the future you could use it, but for now I think it's just a cool proof of concept or something handy for rapid prototyping.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last week I had a discussion with &lt;a href="https://twitter.com/@PrabirShrestha"&gt;@PrabirShrestha&lt;/a&gt; in &lt;a href="https://jabbr.net/"&gt;JabbR&lt;/a&gt; about APIs for MongoDB to achieve something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db.posts.insert({title: ''first''}, function(err, doc){})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example from: &lt;a href="http://alexeypetrushin.github.com/mongo-lite/docs/index.html"&gt;http://alexeypetrushin.github.com/mongo-lite/docs/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_db.Users.Insert(Name: "Steve", Age: 50);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Example from: &lt;a href="http://simplefx.org/simpledata/docs/pages/Modify/AddingData.html"&gt;http://simplefx.org/simpledata/docs/pages/Modify/AddingData.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking at the syntax and thinking about C#'s DynamicObject I decided to see what I could come up with. I spent the better part of the next 2-3 hours messing around in Visual Studio, chatting and coming back to it, and came up with this gist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/3798206"&gt;https://gist.github.com/3798206&lt;/a&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I basically came up with a really rough working prototype. Currently it doesn't do much, but what it allows you to do is wrap RavenDB's IDocumentSession in what I've called 'DynamicSession' inside this class is a nested class called Chainer, which is/will be responsible for all the method/property chaining that occurs to make the API completely dynamic.&lt;/p&gt;

&lt;p&gt;Rather than creating a normal session, you create OpenDynamicSession. All it really does is save you the hassle of having to write two using statements.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class DynamicSessionExtension
{
    public static DynamicSession OpenDynamicSession(this IDocumentStore store)
    {
        return new DynamicSession(store.OpenSession());
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just opens the normal RavenDB session and passes it in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (dynamic session = store.OpenDynamicSession())
{
    session.Bananas.insert(new
    {
        Colour = "Yellow",
        Bunch = 14
    }, 1);
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code snippet allows you to call a dynamic property, 'Bananas', this refers to the collection. (Word of warning, RavenDB is case sensitive, I don't know what to do in this scenario)&lt;/p&gt;

&lt;p&gt;Then the next part is the command, which takes in an anonymous type as the first parameter, and an id as the second parameter. I haven't figured out how to let RavenDB generate the Id yet, not sure if it's possible but will see :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (dynamic session = documentStore.OpenDynamicSession())
{
    dynamic post1 = session.Posts.load(123);
    Console.WriteLine(post1.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this scenario. I'm just calling Load which returns a dynamic type, which you can call all the properties you want off.&lt;/p&gt;

&lt;p&gt;I've created no POCOs :)&lt;/p&gt;

&lt;p&gt;So far the two obstacles I've had to overcome have been:&lt;/p&gt;

&lt;h2&gt;Collection Names&lt;/h2&gt;

&lt;p&gt;RavenDB uses meta data to put the document into a collection. When inserting, RavenDB doesn't know what the collection is since there's no class name to infer it from. To get around this I worked out that when you have an object from RavenDB, you can access the meta data. This is done like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var metadata = Session.Advanced.GetMetadataFor(objectToStore);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows me to use the collection named accessed previously to assign it to the RavenDB Entity Name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;metadata["Raven-Entity-Name"] = CollectionName;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows all the documents to be grouped together and be placed under the correct collection.&lt;/p&gt;

&lt;p&gt;As I mentioned before RavenDB is case sensitive, so if you insert:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;session.Posts&lt;/code&gt; then &lt;code&gt;session.posts&lt;/code&gt;, these will be stored in two different collections  (this is a feature of RavenDB I personally don't like, yes I LOVE RavenDB, but even it has things I don't like, nothing is perfect)&lt;/p&gt;

&lt;p&gt;Meta data brings me to the 2nd issue...&lt;/p&gt;

&lt;h2&gt;CLR Type&lt;/h2&gt;

&lt;p&gt;RavenDB persists the CLR Type in the meta data, this is so when it uses Newtonsoft.Json it can use that data to create the object you want, and return it.&lt;/p&gt;

&lt;p&gt;The problem with inserting anonymous types, is there is no real CLR Type information to persist, so what you end up with is all your entities being persisted as:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"Raven-Clr-Type": "&amp;lt;&gt;f__AnonymousType11[[System.String, mscorlib]], Raven.DynamicSession.TestConsole"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This prevents us from doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = store.OpenSession())
{
    result = session.Load&amp;lt;Post&amp;gt;("posts/123");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since RavenDB is unable to convert the type. This happens to be another rather annoying thing I find in RavenDB. When using Index's you can get away with casting them using As&lt;T&gt; or calling AsProjection&lt;T&gt; when the type differs in terms of properties. But when accessing a specific document via the Id, you can't return your own specified type, regardless if the properties match.&lt;/p&gt;

&lt;p&gt;I got around this by using a convention, first of all I persist MY OWN information to the meta data :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;metadata[DynamicClrTypePlaceHolder] = CollectionName;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which persists to the document like so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;"Raven.DynamicSession.DynamicClrTypePlaceHolder": "People"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then I setup the store with a convention.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;store.Conventions.FindClrType = (id, doc, metadata) =&amp;gt;
{
    var clrType = metadata.Value&amp;lt;string&amp;gt;(DynamicSession.DynamicClrTypePlaceHolder);
    if (clrType.Equals(clrPlaceHolder, StringComparison.OrdinalIgnoreCase))
        return type.FullName;

    return metadata.Value&amp;lt;string&amp;gt;(Constants.RavenClrType);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This checks to see if it matches and then returns the type I define rather than what RavenDB has set.&lt;/p&gt;

&lt;p&gt;Here's a working test: &lt;a href="https://github.com/phillip-haydon/Raven.DynamicSession/blob/master/src/Raven.DynamicSession.Tests/QueryGetFixture.cs"&gt;https://github.com/phillip-haydon/Raven.DynamicSession/blob/master/src/Raven.DynamicSession.Tests/QueryGetFixture.cs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the moment this convention is hard-coded to handle one type but I plan on expanding it out and putting it into some configuration you can setup once.&lt;/p&gt;

&lt;p&gt;This project can be found on GitHub:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/phillip-haydon/Raven.DynamicSession"&gt;https://github.com/phillip-haydon/Raven.DynamicSession&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I plan to continue expanding on it and trying to cover all the basics of RavenDB, some of it's not easy and the hacks I have to put in place to handle POCOs makes me feel that this can never be used in the real world.&lt;/p&gt;

&lt;p&gt;But as a prototype I think it's pretty cool!&lt;/p&gt;

&lt;p&gt;Interested in hearing anyone's feedback. It's still changing, I've spent maybe 4 hours total playing around with this. So there hasn't been a LOT of work involved. I did have some help from StackOverflow, around wanting to know if it's possible to chain dynamic methods, but turns out you need to create new objects with information and chain those.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/12634250/possible-to-get-chained-value-of-dynamicobject"&gt;http://stackoverflow.com/questions/12634250/possible-to-get-chained-value-of-dynamicobject&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/09/nancy-and-areas/</guid><link>http://www.philliphaydon.com/2012/09/nancy-and-areas/</link><a10:author><a10:name /></a10:author><category>NancyFX</category><title>NancyFX and Areas</title><description>&lt;p&gt;A while back &lt;a href="https://twitter.com/ayende"&gt;@ayende&lt;/a&gt; wrote a &lt;a href="http://ayende.com/blog/156609/reviewing-dinner-party-ndash-nerd-dinner-ported-to-ravendb-on-ravenhq"&gt;blog post&lt;/a&gt; about &lt;a href="https://github.com/NancyFx/DinnerParty"&gt;DinnerParty&lt;/a&gt; in which he mentioned &lt;a href="http://nancyfx.org/"&gt;NancyFX&lt;/a&gt;, a lightweight web framework. &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt; recently wrote about a &lt;a href="http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me/"&gt;blog post about NancyFX RavenDB and himself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I've spent the better part of the last few months learning it, and needless to say, it's awesome. So I got asked a question, how would I handle 'Areas' with Nancy, like we would with ASP.NET MVC?&lt;/p&gt;

&lt;p&gt;Well it's pretty simple, all it really consists of is... a module containing a root path.&lt;/p&gt;

&lt;p&gt;Lets begin with the following folder structure defining a 'HomeModule' for both the Root Website, and the Admin section.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-areas-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Both these HomeModule classes are identical, with the small exception that the Admin one specifies a Root Path.&lt;/p&gt;

</description><pubDate>Fri, 28 Sep 2012 16:00:00 Z</pubDate><a10:updated>2012-09-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A while back &lt;a href="https://twitter.com/ayende"&gt;@ayende&lt;/a&gt; wrote a &lt;a href="http://ayende.com/blog/156609/reviewing-dinner-party-ndash-nerd-dinner-ported-to-ravendb-on-ravenhq"&gt;blog post&lt;/a&gt; about &lt;a href="https://github.com/NancyFx/DinnerParty"&gt;DinnerParty&lt;/a&gt; in which he mentioned &lt;a href="http://nancyfx.org/"&gt;NancyFX&lt;/a&gt;, a lightweight web framework. &lt;a href="https://twitter.com/jchannon"&gt;@jchannon&lt;/a&gt; recently wrote about a &lt;a href="http://blog.jonathanchannon.com/2012/09/21/nancyfx-ravendb-nerddinner-and-me/"&gt;blog post about NancyFX RavenDB and himself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I've spent the better part of the last few months learning it, and needless to say, it's awesome. So I got asked a question, how would I handle 'Areas' with Nancy, like we would with ASP.NET MVC?&lt;/p&gt;

&lt;p&gt;Well it's pretty simple, all it really consists of is... a module containing a root path.&lt;/p&gt;

&lt;p&gt;Lets begin with the following folder structure defining a 'HomeModule' for both the Root Website, and the Admin section.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-areas-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Both these HomeModule classes are identical, with the small exception that the Admin one specifies a Root Path.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h3&gt;Root &gt; HomeModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;namespace NancyAreasDemo.Modules
{
    public class HomeModule : NancyModule
    {
        public HomeModule()
        {
            Get["/"] = _ =&amp;gt;
            {
                return "Website Home";
            };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Root &gt; Admin &gt; HomeModule&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;namespace NancyAreasDemo.Modules.Admin
{
    public class HomeModule : NancyModule  
    {
        public HomeModule() : base("admin")
        {
            Get["/"] = _ =&amp;gt;
            {
                return "Admin Home";
            };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this in a browser now we can get both the Main Website and the Admin section:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-areas-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now let's add some Views.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-areas-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;So for the Area 'Admin' has it's own folder under the Views folder, with it's own 'Home' folder matching the Module name.&lt;/p&gt;

&lt;p&gt;This is very similar to using Area's in ASP.NET MVC.&lt;/p&gt;

&lt;p&gt;Now we need to add some ViewLocationConventions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void ConfigureConventions(NancyConventions nancyConventions)
{
    nancyConventions.ViewLocationConventions.Insert(0, (viewName, model, context) =&amp;gt;
    {
        if (string.IsNullOrWhiteSpace(context.ModulePath))
            return null;
        return string.Concat("views/", context.ModulePath, "/", context.ModuleName, "/", viewName);
    });

    base.ConfigureConventions(nancyConventions);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is configured in the Bootstrapper (&lt;a href="https://github.com/NancyFx/Nancy/wiki/Bootstrapper"&gt;read Nancy Bootstrapper docs here&lt;/a&gt;) (&lt;a href="https://github.com/NancyFx/Nancy/wiki/View-location-conventions"&gt;read the Nancy View Location Convention docs here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Hoping to get this convention included into Nancy :) if &lt;a href="https://twitter.com/thecodejunkie"&gt;@TheCodeJunkie&lt;/a&gt; will accept the PR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; The PR was accepted into 0.13, but you can still create your own conventions.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This convention basically tells Nancy to look firstly, for the View in:&lt;/p&gt;

&lt;p&gt;views/&lt;strong&gt;&lt;em&gt;module path&lt;/em&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;em&gt;module name&lt;/em&gt;&lt;/strong&gt;/&lt;strong&gt;&lt;em&gt;view name&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't use this convention then you will need to remove the 'Home' directory from the 'Admin' folder and place all your views in there. Which isn't convenient when you have multiple modules in that area.&lt;/p&gt;

&lt;p&gt;Now in the views we can put some sample content:&lt;/p&gt;

&lt;h3&gt;Admin HTML Page&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    This comes from Admin view.
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Root HTML Page&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns="http://www.w3.org/1999/xhtml"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    This comes from the root view.
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we run the pages:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nancy-areas-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it. Nice quick simple Area's using Nancy!&lt;/p&gt;

&lt;p&gt;You can view the &lt;a href="https://github.com/phillip-haydon/NancyAreasDemo"&gt;GitHub repository&lt;/a&gt; for the demo used to write this blog post.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/09/my-volume-gets-lowered-reduced-when-swapping-applications-solution/</guid><link>http://www.philliphaydon.com/2012/09/my-volume-gets-lowered-reduced-when-swapping-applications-solution/</link><a10:author><a10:name /></a10:author><category>Windows</category><title>My volume gets lowered/reduced when swapping applications (solution)</title><description>&lt;p&gt;I have absolutely no idea who made this retarded feature but if I met them, I would like to think I would punch them in the face for all the pain they have caused me, of making me reformat my computer thinking I had somehow stuffed up my installation of the OS.&lt;/p&gt;

&lt;p&gt;Windows 7 and 8 have this feature which allows an application to take priority of the speakers. Meaning if you're in Application A, and you're playing music, and you swap to Application B, then B will reduce the volume of A so that itself can have louder volume.&lt;/p&gt;

&lt;p&gt;This is really annoying when you want to play music, and then you load up a game, and the music is drowned out by game sounds.&lt;/p&gt;

&lt;p&gt;The solution? Disable that shit!&lt;/p&gt;

&lt;p&gt;1) Go into your Playback devices:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;2) Select the device properties:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-2.png" /&gt;&lt;/p&gt;

</description><pubDate>Mon, 24 Sep 2012 16:00:00 Z</pubDate><a10:updated>2012-09-24T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I have absolutely no idea who made this retarded feature but if I met them, I would like to think I would punch them in the face for all the pain they have caused me, of making me reformat my computer thinking I had somehow stuffed up my installation of the OS.&lt;/p&gt;

&lt;p&gt;Windows 7 and 8 have this feature which allows an application to take priority of the speakers. Meaning if you're in Application A, and you're playing music, and you swap to Application B, then B will reduce the volume of A so that itself can have louder volume.&lt;/p&gt;

&lt;p&gt;This is really annoying when you want to play music, and then you load up a game, and the music is drowned out by game sounds.&lt;/p&gt;

&lt;p&gt;The solution? Disable that shit!&lt;/p&gt;

&lt;p&gt;1) Go into your Playback devices:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;2) Select the device properties:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-2.png" /&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;3) Untick Exclusive Mode:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;4) Repeat the same steps for Recording Devices:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-volume-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Save it all, and reboot. &lt;em&gt;(Windows 7 seems to work without rebooting, it didn't take affect in Windows 8 for me until I rebooted)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bam, no more windows taking over my Audio!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/</guid><link>http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB... What am I persisting, what am I querying? (part 3)</title><description>&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;In part 3 I want to show you how to query References.&lt;/p&gt;

&lt;p&gt;In the previous post I showed you three basic classes that demonstrate a Relationship between Order and OrderLine, and a Reference to User from Order using the UserId.&lt;/p&gt;

&lt;p&gt;I've setup some really basic test data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = store.OpenSession())
{
    session.Store(new User
    {
        FirstName = "Phillip",
        Surname = "Haydon",
        Username = "phillip.haydon",
        Password = "somepassword"
    });
    session.Store(new User
    {
        FirstName = "Edward",
        Surname = "Norton",
        Username = "edward.norton",
        Password = "somepassword"
    });
    session.Store(new Order
    {
        UserId = "users/1",
        DateOrdered = DateTime.Now,
        DateUpdated = DateTime.Now,
        Status = "Ordered",
        Lines = new List&amp;lt;OrderLine&amp;gt;
        {
            new OrderLine
            {
                Discount = 0m,
                PricePerUnit = 13.95m,
                Quantity = 5,
                SkuCode = "SN78"
            },
            new OrderLine
            {
                Discount = 0m,
                PricePerUnit = 13.95m,
                Quantity = 5,
                SkuCode = "SN78"
            }
        }
    });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates two collections:&lt;/p&gt;

</description><pubDate>Wed, 18 Jul 2012 16:00:00 Z</pubDate><a10:updated>2012-07-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;In part 3 I want to show you how to query References.&lt;/p&gt;

&lt;p&gt;In the previous post I showed you three basic classes that demonstrate a Relationship between Order and OrderLine, and a Reference to User from Order using the UserId.&lt;/p&gt;

&lt;p&gt;I've setup some really basic test data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = store.OpenSession())
{
    session.Store(new User
    {
        FirstName = "Phillip",
        Surname = "Haydon",
        Username = "phillip.haydon",
        Password = "somepassword"
    });
    session.Store(new User
    {
        FirstName = "Edward",
        Surname = "Norton",
        Username = "edward.norton",
        Password = "somepassword"
    });
    session.Store(new Order
    {
        UserId = "users/1",
        DateOrdered = DateTime.Now,
        DateUpdated = DateTime.Now,
        Status = "Ordered",
        Lines = new List&amp;lt;OrderLine&amp;gt;
        {
            new OrderLine
            {
                Discount = 0m,
                PricePerUnit = 13.95m,
                Quantity = 5,
                SkuCode = "SN78"
            },
            new OrderLine
            {
                Discount = 0m,
                PricePerUnit = 13.95m,
                Quantity = 5,
                SkuCode = "SN78"
            }
        }
    });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates two collections:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;With our Order document looking like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "UserId": "users/1",
  "DateOrdered": "2012-07-13T23:34:40.5542680",
  "DateUpdated": "2012-07-13T23:34:40.5542680",
  "Status": "Ordered",
  "Lines": [
    {
      "PricePerUnit": 13.95,
      "Quantity": 5,
      "Discount": 0.0,
      "SkuCode": "SN78"
    },
    {
      "PricePerUnit": 13.95,
      "Quantity": 5,
      "Discount": 0.0,
      "SkuCode": "SN78"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What's cool about RavenDB Studio is that it shows us that the UserId is a reference.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;RavenDB links the reference up for you as well so you can click it and it will navigate you directly to the document that is being referenced.&lt;/p&gt;

&lt;p&gt;There are three ways that we can load this data in code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Roundtrip to the store&lt;/li&gt;
&lt;li&gt;Include&lt;/li&gt;
&lt;li&gt;Transform&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Roundtrip to the store&lt;/h2&gt;

&lt;p&gt;This method is easy peasy, and it's pretty similar to something you would do when working with a relational database.&lt;/p&gt;

&lt;p&gt;We do this by calling Load on the Order, then using the value from &lt;code&gt;Order.UserId&lt;/code&gt; to load the User.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = store.OpenSession())
{
    var order = session.Load&amp;lt;Order&amp;gt;("orders/1");
    var user = session.Load&amp;lt;User&amp;gt;(order.UserId);
    Console.WriteLine("Lines: " + order.Lines.Count());
    Console.WriteLine("FirstName: " + user.FirstName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this we get an output like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The problem with this approach is that we have to go to RavenDB twice, shown here:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But it achieves the desired result.&lt;/p&gt;

&lt;h2&gt;Include&lt;/h2&gt;

&lt;p&gt;The include method is very similar, the only difference is we tell RavenDB to include the User when we fetch the Order.&lt;/p&gt;

&lt;p&gt;This can be done like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = store.OpenSession())
{
    var order = session.Include&amp;lt;Order&amp;gt;(x =&amp;gt; x.UserId)
                       .Load&amp;lt;Order&amp;gt;("orders/1");
    var user = session.Load&amp;lt;User&amp;gt;(order.UserId);
    Console.WriteLine("Lines: " + order.Lines.Count());
    Console.WriteLine("FirstName: " + user.FirstName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see all we have done is add the Include method to our initial query.&lt;/p&gt;

&lt;p&gt;When we run this we get the exact same output, the difference this time is that RavenDB will issue 1 query for data.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So the first query for Order, includes the User. This User object is now part of the current RavenDB Session, so now when we load the User on the next line it doesn't need to go to RavenDB to fetch it, it already has it.&lt;/p&gt;

&lt;h2&gt;Transform&lt;/h2&gt;

&lt;p&gt;This last method is quite different to the last two, it involves writing an index and implementing TransformResults.&lt;/p&gt;

&lt;p&gt;First we start by defining an index, which basically just grabs the UserId in the map, then looks up the user in the transform.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order_WithUser : AbstractIndexCreationTask&amp;lt;Order&amp;gt;
{
    public Order_WithUser()
    {
        Map = o =&amp;gt; from s in o
                   select new
                   {
                       s.UserId
                   };
        TransformResults = (database, results) =&amp;gt;
            from s in results
            let user = database.Load&amp;lt;User&amp;gt;(s.UserId)
            select new
            {
                s.Id,
                s.UserId,
                s.DateOrdered,
                s.DateUpdated,
                s.Status,
                s.Lines,
                User = user
            };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can query it and return it as a new model that includes the User &lt;em&gt;(this could also be added to the Order and not persisted but I've made it a separate model for demonstration)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class OrderResult
{
    public string Id { get; set; }
    public string UserId { get; set; }
    public DateTime DateOrdered { get; set; }
    public DateTime DateUpdated { get; set; }
    public string Status { get; set; }
    public IEnumerable&amp;lt;OrderLine&amp;gt; Lines { get; set; }
    public User User { get; set; }
}

using (var session = store.OpenSession())
{
    var order = session.Query&amp;lt;Order, Order_WithUser&amp;gt;()
                       .Where(x =&amp;gt; x.Id == "orders/1")
                       .AsProjection&amp;lt;OrderResult&amp;gt;()
                       .SingleOrDefault();
    Console.WriteLine("Lines: " + order.Lines.Count());
    Console.WriteLine("FirstName: " + order.User.FirstName);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this again we get the same results, however in RavenDB we have had to query against an index, rather than just grabbing the document as is.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-3-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That concludes part 3. Any questions, leave a comment or join the &lt;a href="http://jabbr.net/#/rooms/RavenDB"&gt;JabbR RavenDB&lt;/a&gt; chat room.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/</guid><link>http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB... What am I persisting, what am I querying? (part 2)</title><description>&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt; I want to discuss Relationships &amp;amp; References, and the difference between the two.&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/"&gt;Part 3&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Taking from part 1's example, lets add a User to the mix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
    public string Id { get; set; }
    public string UserId { get; set; }
    public string DateOrdered { get; set; }
    public string DateUpdated { get; set; }
    public string Status { get; set; }
    // Other properties...
    public IEnumerable&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
    public int Quantity { get; set; }
    public decimal Price { get; set; }
    public decimal Discount { get; set; }
    public string SkuCode { get; set; }
    // Other Properties
}

public class User
{
    public string Id { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public string FirstName { get; set; }
    public string Surname { get; set; }
    // Other Properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I've added 'UserId' to the Order, not a 'User' just the Id part. This is because I don't want direct access to the User. &lt;em&gt;(It is possible to map a User in RavenDB, but I don't believe that is always a good idea. Save it for special occasions.)&lt;/em&gt;&lt;/p&gt;

</description><pubDate>Mon, 16 Jul 2012 16:00:00 Z</pubDate><a10:updated>2012-07-16T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt; I want to discuss Relationships &amp;amp; References, and the difference between the two.&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/"&gt;Part 3&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;Taking from part 1's example, lets add a User to the mix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
    public string Id { get; set; }
    public string UserId { get; set; }
    public string DateOrdered { get; set; }
    public string DateUpdated { get; set; }
    public string Status { get; set; }
    // Other properties...
    public IEnumerable&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
    public int Quantity { get; set; }
    public decimal Price { get; set; }
    public decimal Discount { get; set; }
    public string SkuCode { get; set; }
    // Other Properties
}

public class User
{
    public string Id { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }
    public string FirstName { get; set; }
    public string Surname { get; set; }
    // Other Properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see I've added 'UserId' to the Order, not a 'User' just the Id part. This is because I don't want direct access to the User. &lt;em&gt;(It is possible to map a User in RavenDB, but I don't believe that is always a good idea. Save it for special occasions.)&lt;/em&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;If we were modelling this in a Relational Database, we would have a relationship between Order and User, add some foreign keys, and if we threw an ORM into the mix we would probably have an Order object looking like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-2-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Where we wire up the User object inside the Order. This in the long run lets to all sorts of problem. Then we would eager load the User when we fetch the order, maybe on the order we need to fetch the product, so on and so forth. It just gets messy and complicated.&lt;/p&gt;

&lt;p&gt;So rather than adding the User object to the Order, in RavenDB we would just add the UserId. But why are we doing this? Below I have modelled the Relational Database Table Structure.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-what-am-i-persisting-part-2-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see I've highlighted two Foreign Keys. But I've named them both differently, one is a reference and one is a relationship.&lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;p&gt;The reference has no real purpose other than to maintain referential integrity in the database. Not for our sake, but mainly because we want to keep our DBAs happy. The problem with this however, is we don't actually need it. An order can still exist in the system without a User. We still know who paid for it by the billing information, and we know who it was shipped to from the shipping information.&lt;/p&gt;

&lt;p&gt;Maybe the user wanted to specify what email or phone number to contact them. This information isn't information that belongs to the user. The only reason we have 'UserId' is to so when that user logs into the application, we know which orders belong to him, the information on those orders don't relate to the User other. This is not a relationship, it's a reference. A reference to the User.&lt;/p&gt;

&lt;h2&gt;Relationship&lt;/h2&gt;

&lt;p&gt;The next one is the Relationship, and it has a real purpose beyond referential integrity. An OrderLine really can't exist without an Order. Without an order it has no meaning or purpose. The problem is because there are multiple Lines to a single Order, we need to persist them in their own table.&lt;/p&gt;

&lt;p&gt;An OrderLine might have a &lt;em&gt;Reference&lt;/em&gt; to Product, but an OrderLine can exist without the Product. Since an OrderLine relates back to an Order, you don't have a real need to ever load an OrderLine by itself. You may edit/delete lines, but that will always be done via the Order.&lt;/p&gt;

&lt;p&gt;This ultimately creates a Root Aggregate, the Order becomes the Root while the Lines become the children, and an OrderLine is always loaded with an Order, but never on it's own.&lt;/p&gt;

&lt;h2&gt;User/Product Data Duplication&lt;/h2&gt;

&lt;p&gt;First thing you may think by having the First/Last name of the User on the Addresses, or the Addresses data copied into the Order's Billing/Delivery Address, is duplicating data. Same with taking a Products Price/Name/SKUCode and putting it on the OrderLine.&lt;/p&gt;

&lt;p&gt;This isn't data duplication.&lt;/p&gt;

&lt;p&gt;If a user changes his name, you have a Reference to the user still, but at the time he billed his order, he was John Doe, not John Snow. His address may have changed but we captured it at the point of ordering. This is information that belongs to the Order, not to the User. The fact we have the same name in both the User and Order is a mute point, because visually they are the same, but from a business perspective, they are not the same.&lt;/p&gt;

&lt;h2&gt;Benefit of Duplicating&lt;/h2&gt;

&lt;p&gt;So we are copying data now. Is this a good thing? Well lets think about it in an Order History screen.&lt;/p&gt;

&lt;p&gt;If a user logged in, went to their account history and viewed their previous order:&lt;/p&gt;

&lt;h3&gt;Using a relational database, no copying data.&lt;/h3&gt;

&lt;p&gt;In the scenario using a relational database, we would use the selected OrderId to load the Order, eager load the OrderLine. Fetch the User, Addresses, Product.&lt;/p&gt;

&lt;p&gt;Fetching all this data could be done multiple different ways, but already we are asking for a lot of data. A lot of which we aren't using.&lt;/p&gt;

&lt;p&gt;Then we have to compose a lot of that data together, or maybe we joined it and created a new object for displaying it all.&lt;/p&gt;

&lt;h3&gt;Using a document database, copying the data.&lt;/h3&gt;

&lt;p&gt;In the scenario of using a document database, we would query for the Order using the OrderId. And begin displaying all the data.&lt;/p&gt;

&lt;p&gt;We already knew the Product name that was captured and used at the time of purchase, but we would have the ProductId to reference it back to the Product in the system.&lt;/p&gt;

&lt;p&gt;We already know who it was shipped to, and who it was billed to.&lt;/p&gt;

&lt;p&gt;We don't need to find the User or the Product or the Addresses or anything like that. We have all the information for that Order.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In my next post I'll talk about loading References. This one is already long.&lt;/p&gt;

&lt;p&gt;Again I hope this makes sense, feel free to comment and ask questions :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/</guid><link>http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB... What am I persisting, what am I querying? (part 1)</title><description>&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/"&gt;Part 3&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;A couple of questions that pop's up a lot in the &lt;a href="https://jabbr.net/#/rooms/RavenDB"&gt;#RavenDB&lt;/a&gt; &lt;a href="https://jabbr.net/"&gt;JabbR&lt;/a&gt; chat room by people picking up RavenDB for the first time are; &lt;em&gt;what am I persisting?, and how do I query relationships?.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we use relational databases we often de-normalize our data into multiple tables, usually this is done to get rid of duplication of data. We do this by adding 100's of foreign keys to our tables relating things all over the place, we had a CountryId to our Address, a UserId to our Order, an OrderId to our OrderLine.&lt;/p&gt;

&lt;p&gt;There's many reasons why this was done, some of which Oren describes in his &lt;a href="http://ayende.com/blog/153026/embracing-ravendb"&gt;Embracing RavenDB post.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then when we go to query those relationships we have to join data, when we have an entity with multiple relationships we end up getting into complex queries with cartesian joins, performance starts to degrade, and things just get messy.&lt;/p&gt;

&lt;p&gt;When working with Document Databases we throw all that out the window and we deal with Root Aggregates. These are objects that are responsible for their child objects, you don't load the child objects individually, they are loaded with the root or parent object.&lt;/p&gt;

</description><pubDate>Tue, 10 Jul 2012 16:00:00 Z</pubDate><a10:updated>2012-07-10T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying/"&gt;Part 1&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-2/"&gt;Part 2&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://www.philliphaydon.com/2012/07/ravendb-what-am-i-persisting-what-am-i-querying-part-3/"&gt;Part 3&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;A couple of questions that pop's up a lot in the &lt;a href="https://jabbr.net/#/rooms/RavenDB"&gt;#RavenDB&lt;/a&gt; &lt;a href="https://jabbr.net/"&gt;JabbR&lt;/a&gt; chat room by people picking up RavenDB for the first time are; &lt;em&gt;what am I persisting?, and how do I query relationships?.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we use relational databases we often de-normalize our data into multiple tables, usually this is done to get rid of duplication of data. We do this by adding 100's of foreign keys to our tables relating things all over the place, we had a CountryId to our Address, a UserId to our Order, an OrderId to our OrderLine.&lt;/p&gt;

&lt;p&gt;There's many reasons why this was done, some of which Oren describes in his &lt;a href="http://ayende.com/blog/153026/embracing-ravendb"&gt;Embracing RavenDB post.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then when we go to query those relationships we have to join data, when we have an entity with multiple relationships we end up getting into complex queries with cartesian joins, performance starts to degrade, and things just get messy.&lt;/p&gt;

&lt;p&gt;When working with Document Databases we throw all that out the window and we deal with Root Aggregates. These are objects that are responsible for their child objects, you don't load the child objects individually, they are loaded with the root or parent object.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The most common example I see is Blog/Posts/Comments, but I'm going to explain an easier scenario.&lt;/p&gt;

&lt;h2&gt;Order/OrderLine&lt;/h2&gt;

&lt;p&gt;The Order/Orderline is much easier to understand since it's a scenario would probably always end up being the same in every system.&lt;/p&gt;

&lt;p&gt;It also easier to understand because when displaying an OrderLine in any system, it's always displayed with the Order details, and never by itself. So when we query for the Order it makes sense to always get the OrderLine at the same time.&lt;/p&gt;

&lt;p&gt;When working with Business Rules applied to an Order, they almost always apply to the OrderLines also, so again you're working with the entire Order, not a portion of it.&lt;/p&gt;

&lt;p&gt;When starting out it's hard to imagine, but the OrderLine is actually part of the Order, it's not a separate entity, it's just when we persist it in two tables since that makes more sense in a relational database, and it ends up feeling like two separate things, when in reality, it's still the same object.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Order
{
    public string Id { get; set; }
    // Other properties...

    public IEnumerable&amp;lt;OrderLine&amp;gt; Lines { get; set; }
}

public class OrderLine
{
    public int Quantity { get; set; }
    public decimal Price { get; set; }
    public decimal Discount { get; set; }
    public string SkuCode { get; set; }

    // Other Properties
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So when we persist this with a Relational Database these would go into two different tables. Order and OrderLine tables, joined by a foreign key.&lt;/p&gt;

&lt;p&gt;But now that we are thinking about the Root Aggregate, the Order, when we persist this with RavenDB we persist just the Order. When we persist 'just the order' that means we persist the ENTIRE Order object, &lt;em&gt;including the OrderLines, since they are the Order&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When persisted to RavenDB we end up with a JSON document that looks similar to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    Id: 'orders/123',
    Lines: [
        { Quantity: 1, Price: 12.95, Discount: null, SkuCode: 'N1C3' },
        { Quantity: 3, Price: 6.23, Discount: null, SkuCode: 'F4K21' }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I purposely left out other properties for now.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;As you can see we are persisting the entire root object itself. We don't put OrderLines into a separate document or collection.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I do realise I've mentioned persisting the entire object multiple times, but it's something that some people find hard to wrap their head around at first. It confused me when I first started messing around with MongoDB.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When we query for the Order: &lt;code&gt;session.Load&amp;lt;Order&amp;gt;("orders/123");&lt;/code&gt; we end up fetching all the OrderLines at the same time. No joins, no separate queries, just the entire order.&lt;/p&gt;

&lt;p&gt;In a relational database we would have had to issue 2 separate queries, or join the tables together, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM [Order] o
LEFT JOIN [OrderLine] ol
    ON o.Id = Ol.OrderId
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes querying the database more complicated than it needs to be. There are other ways around this in a relational database, you can &lt;a href="http://www.philliphaydon.com/2012/03/ormlite-blobbing-done-with-nhibernate-and-serialized-json/"&gt;blob the OrderLines&lt;/a&gt;. But then you lose the ability to search against OrderLines.&lt;/p&gt;

&lt;h2&gt;Why this example and not Post/Comments?&lt;/h2&gt;

&lt;p&gt;I don't think Post/Comments is a good example to work from, Comment's can be displayed with a Post, and without a Post, they can be paged, displayed on an individual page, in a 'latest comments' column on your blog, etc.&lt;/p&gt;

&lt;p&gt;Some of these scenarios may justify putting Comments into their own collection.&lt;/p&gt;

&lt;p&gt;However, more often than not, non-popular blogs such as my own only occur a few comments, so there's no real reason to put them in their own collection, you can easily get away with putting them on the Post document.&lt;/p&gt;

&lt;p&gt;I think this comes down to personal preference and the business problem you're trying to solve, but for a learning exercise it makes it harder to understand. My personal preference is to store Comment's in a separate collection, because you click through from the post listing screen to the post and load the comment's, and if there are &gt; x number of comments then I would page them and only display the latest comments, or high rated comments if they were rated voted up/down.&lt;/p&gt;

&lt;p&gt;I hope that clear's up what's being persisted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In part 2 I'm going to go over References &lt;em&gt;(Relationships)&lt;/em&gt;, and in part 3 MapReduce &lt;em&gt;(doing all those fancy SQL queries inside RavenDB and what is happening)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/06/multiple-iisexpress-sites-profiled-with-dottrace/</guid><link>http://www.philliphaydon.com/2012/06/multiple-iisexpress-sites-profiled-with-dottrace/</link><a10:author><a10:name /></a10:author><title>Multiple IISExpress Sites profiled with DotTrace</title><description>&lt;p&gt;Yesterday (14th of June) I had a need to run more than one website while running &lt;a href="http://www.jetbrains.com/"&gt;JetBrain's&lt;/a&gt; &lt;a href="http://www.jetbrains.com/profiler/"&gt;DotTrace&lt;/a&gt;, to give a bit of background, Website A needs to redirect to Website B in order to simulate a single sign on.&lt;/p&gt;

&lt;p&gt;Website B can't be accessed without using the SSO, so in order to profile Website B I need to run Website A.&lt;/p&gt;

&lt;p&gt;The problem is when using DotTrace, I have to select the website I wish to profile:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The problem with that, is that when you run the profiler it only starts up one of the websites. I need it to start both.&lt;/p&gt;

&lt;p&gt;This would be easy to profile if the Standard Version came with Attach To Process feature. But unfortunately that only comes with Professional.&lt;/p&gt;

&lt;p&gt;That way, when I debug using Visual Studio I could pick the process to profile:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Information can be found by right clicking the system try and selecting 'show all applications')&lt;/em&gt;&lt;/p&gt;

</description><pubDate>Sun, 17 Jun 2012 16:00:00 Z</pubDate><a10:updated>2012-06-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Yesterday (14th of June) I had a need to run more than one website while running &lt;a href="http://www.jetbrains.com/"&gt;JetBrain's&lt;/a&gt; &lt;a href="http://www.jetbrains.com/profiler/"&gt;DotTrace&lt;/a&gt;, to give a bit of background, Website A needs to redirect to Website B in order to simulate a single sign on.&lt;/p&gt;

&lt;p&gt;Website B can't be accessed without using the SSO, so in order to profile Website B I need to run Website A.&lt;/p&gt;

&lt;p&gt;The problem is when using DotTrace, I have to select the website I wish to profile:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The problem with that, is that when you run the profiler it only starts up one of the websites. I need it to start both.&lt;/p&gt;

&lt;p&gt;This would be easy to profile if the Standard Version came with Attach To Process feature. But unfortunately that only comes with Professional.&lt;/p&gt;

&lt;p&gt;That way, when I debug using Visual Studio I could pick the process to profile:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Information can be found by right clicking the system try and selecting 'show all applications')&lt;/em&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;However that isn't an option.&lt;/p&gt;

&lt;p&gt;I had a few idea's of trying to get it to work such as having multiple start-up projects, in VS and using the 'Profile Startup Project' feature.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The solution was to run IISExpress with the parameters to startup the sites. The problem with this approach is that you cannot specify an array of website's to start.&lt;/p&gt;

&lt;p&gt;IISExpress gives you the following options when you run /?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/config:config-file&lt;/strong&gt;&lt;br /&gt;
The full path to the applicationhost.config file. The default value is the IISExpressconfigapplicationhost.config file that is located in the user"s Documents folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/site:site-name&lt;/strong&gt;&lt;br /&gt;
The name of the site to launch, as described in the applicationhost.config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/siteid:site-id *&lt;/em&gt;&lt;br /&gt;
The ID of the site to launch, as described in the applicationhost.config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/path:app-path *&lt;/em&gt;&lt;br /&gt;
The full physical path of the application to run. You cannot combine this option with the /config and related options.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/port:port-number *&lt;/em&gt;&lt;br /&gt;
The port to which the application will bind. The default value is 8080. You must also specify the /path option.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/clr:clr-version *&lt;/em&gt;&lt;br /&gt;
The .NET Framework version (e.g. v2.0) to use to run the application. The default value is v4.0. You must also specify the /path option.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/systray:true|false *&lt;/em&gt;&lt;br /&gt;
Enables or disables the system tray application. The default value is true.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*/trace:trace-level *&lt;/em&gt;&lt;br /&gt;
Valid values are "none", "n", "info", "i", "warning", "w", "error", and "e". The default value is none.&lt;/p&gt;

&lt;p&gt;If we look at the applicationhost.config file for the site entries we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;sites&amp;gt;
  &amp;lt;site name="TestProjectOne" id="1"&amp;gt;
    &amp;lt;application path="/" applicationPool="Clr4IntegratedAppPool"&amp;gt;
      &amp;lt;virtualDirectory path="/" physicalPath="C:\Users\phillip\Documents\Visual Studio 2010\Projects\TestProjectOne\TestProjectOne" /&amp;gt;
    &amp;lt;/application&amp;gt;
    &amp;lt;bindings&amp;gt;
      &amp;lt;binding protocol="http" bindingInformation="*:7946:localhost" /&amp;gt;
    &amp;lt;/bindings&amp;gt;
  &amp;lt;/site&amp;gt;
  &amp;lt;site name="TestProjectTwo" id="2"&amp;gt;
    &amp;lt;application path="/" applicationPool="Clr4IntegratedAppPool"&amp;gt;
      &amp;lt;virtualDirectory path="/" physicalPath="C:\Users\phillip\Documents\Visual Studio 2010\Projects\TestProjectOne\TestProjectTwo" /&amp;gt;
    &amp;lt;/application&amp;gt;
    &amp;lt;bindings&amp;gt;
      &amp;lt;binding protocol="http" bindingInformation="*:8921:localhost" /&amp;gt;
    &amp;lt;/bindings&amp;gt;
  &amp;lt;/site&amp;gt;
  &amp;lt;siteDefaults&amp;gt;
    &amp;lt;logFile logFormat="W3C" directory="%IIS_USER_HOME%\Logs" /&amp;gt;
    &amp;lt;traceFailedRequestsLogging directory="%IIS_USER_HOME%\TraceLogFiles" enabled="true" maxLogFileSizeKB="1024" /&amp;gt;
  &amp;lt;/siteDefaults&amp;gt;
  &amp;lt;applicationDefaults applicationPool="Clr4IntegratedAppPool" /&amp;gt;
  &amp;lt;virtualDirectoryDefaults allowSubDirConfig="true" /&amp;gt;
&amp;lt;/sites&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there's nothing special in the website's. Except for one thing!&lt;/p&gt;

&lt;p&gt;This attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;applicationPool="Clr4IntegratedAppPool"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What IISExpress doesn't tell you is that you can start an application pool.&lt;/p&gt;

&lt;p&gt;Running the command &lt;code&gt;/AppPool:Clr4IntegratedAppPool&lt;/code&gt; gives us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\IIS Express&amp;gt;iisexpress.exe /AppPool:Clr4IntegratedAppPool  

Starting IIS Express ...   
Successfully registered URL "http://localhost:7946/" for site "TestProjectOne" application "/"   
Successfully registered URL "http://localhost:8921/" for site "TestProjectTwo" application "/"   
Registration completed   
IIS Express is running.   
Enter "Q" to stop IIS Express 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To get this working with DotTrace, we just need to select &gt; Profile Application&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Running this will run IISExpress and all the website's under the same process id:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/images/multiple-iis-4.png"&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-4.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(click to enlarge)&lt;/p&gt;

&lt;p&gt;Bam, not we're now able to run multiple sites at once, and even profile them all at once!&lt;/p&gt;

&lt;h2&gt;The Catch&lt;/h2&gt;

&lt;p&gt;There is one gotcha with this approach, if you work on multiple sites, you end up running those up as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\IIS Express&amp;gt;iisexpress.exe /AppPool:Clr4IntegratedAppPool  

Starting IIS Express ...   
Successfully registered URL "http://localhost:7946/" for site "TestProjectOne" application "/"   
Successfully registered URL "http://localhost:8921/" for site "TestProjectTwo" application "/"   
Successfully registered URL "http://localhost:16207/" for site "JabbR" application "/"   
Registration completed   
IIS Express is running.   
Enter "Q" to stop IIS Express
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be fixed easily, to get around this, simply open up your applicationhost.config file located in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:Users\\*user\*\DocumentsIIS\Expressconfig\applicationhost.config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Locate the application pools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;applicationPools&amp;gt;
  &amp;lt;add name="Clr4IntegratedAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" /&amp;gt;
  &amp;lt;add name="Clr4ClassicAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" /&amp;gt;
  &amp;lt;add name="Clr2IntegratedAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" /&amp;gt;
  &amp;lt;add name="Clr2ClassicAppPool" managedRuntimeVersion="v2.0" managedPipelineMode="Classic" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" /&amp;gt;
  &amp;lt;add name="UnmanagedClassicAppPool" managedRuntimeVersion="" managedPipelineMode="Classic" autoStart="true" /&amp;gt;
  &amp;lt;applicationPoolDefaults managedRuntimeLoader="v4.0"&amp;gt;
    &amp;lt;processModel /&amp;gt;
  &amp;lt;/applicationPoolDefaults&amp;gt;
&amp;lt;/applicationPools&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a new entry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;add name="TestProjectAppPool" managedRuntimeVersion="v4.0" managedPipelineMode="Integrated" CLRConfigFile="%IIS_USER_HOME%\config\aspnet.config" autoStart="true" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And update your website's to use this new application pool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;site name="TestProjectOne" id="1"&amp;gt;
  &amp;lt;application path="/" applicationPool="TestProjectAppPool"&amp;gt;
    &amp;lt;virtualDirectory path="/" physicalPath="C:\Users\phillip\Documents\Visual Studio 2010\Projects\TestProjectOne\TestProjectOne" /&amp;gt;
  &amp;lt;/application&amp;gt;
  &amp;lt;bindings&amp;gt;
    &amp;lt;binding protocol="http" bindingInformation="*:7946:localhost" /&amp;gt;
  &amp;lt;/bindings&amp;gt;
&amp;lt;/site&amp;gt;
&amp;lt;site name="TestProjectTwo" id="2"&amp;gt;
  &amp;lt;application path="/" applicationPool="TestProjectAppPool"&amp;gt;
    &amp;lt;virtualDirectory path="/" physicalPath="C:\Users\phillip\Documents\Visual Studio 2010\Projects\TestProjectOne\TestProjectTwo" /&amp;gt;
  &amp;lt;/application&amp;gt;
  &amp;lt;bindings&amp;gt;
    &amp;lt;binding protocol="http" bindingInformation="*:8921:localhost" /&amp;gt;
  &amp;lt;/bindings&amp;gt;
&amp;lt;/site&amp;gt;
&amp;lt;site name="JabbR" id="3"&amp;gt;
  &amp;lt;application path="/" applicationPool="Clr4IntegratedAppPool"&amp;gt;
    &amp;lt;virtualDirectory path="/" physicalPath="D:\Development\phillip-haydon\JabbR\JabbR" /&amp;gt;
  &amp;lt;/application&amp;gt;
  &amp;lt;bindings&amp;gt;
    &amp;lt;binding protocol="http" bindingInformation="*:16207:localhost" /&amp;gt;
  &amp;lt;/bindings&amp;gt;
&amp;lt;/site&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run our new application pool:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Program Files (x86)\IIS Express&amp;gt;iisexpress.exe /AppPool:TestProjectAppPool  

Starting IIS Express ...  
Successfully registered URL "http://localhost:7946/" for site "TestProjectOne" application "/"  
Successfully registered URL "http://localhost:8921/" for site "TestProjectTwo" application "/"  
Registration completed  
IIS Express is running.  
Enter "Q" to stop IIS Express  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now when we profile we only get the two websites we want, running.&lt;/p&gt;

&lt;p&gt;Even though DotTrace Standard Edition doesn't allow you to attach to process, you can easily debug across multiple sites, without the need of upgrading to the Pro edition.&lt;/p&gt;

&lt;p&gt;It would be really cool if JetBrains could add a new option to the IIS Expression Application profile screen, so that we can select the application pool to run if we want to start up multiple websites:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/multiple-iis-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That would be awesome :) and I think it would be really easy for them to implement!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/06/asp-net-mvc-4-has-real-empty-project/</guid><link>http://www.philliphaydon.com/2012/06/asp-net-mvc-4-has-real-empty-project/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>ASP.NET MVC 4 has, REAL EMPTY PROJECT!</title><description>&lt;p&gt;I installed Visual Studio 2012 over the weekend, and was BLOWN AWAY when I created a brand new MVC 4 project to find:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/asp-real-empty-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;See that 'Empty' project... It now creates:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/asp-real-empty-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Look at that, nice and clean. It still forces the whole WebApi thing on you, but atleast they cut out 90% of the rubbish that was in it previously.&lt;/p&gt;

&lt;p&gt;I'm REALLY happy with the changes after I previously ranted earlier this year:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/02/mvc-4-project-templates-are-stupid/"&gt;MVC 4 Project Templates are stupid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you Microsoft!&lt;/p&gt;
</description><pubDate>Mon, 04 Jun 2012 16:00:00 Z</pubDate><a10:updated>2012-06-04T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I installed Visual Studio 2012 over the weekend, and was BLOWN AWAY when I created a brand new MVC 4 project to find:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/asp-real-empty-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;See that 'Empty' project... It now creates:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/asp-real-empty-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Look at that, nice and clean. It still forces the whole WebApi thing on you, but atleast they cut out 90% of the rubbish that was in it previously.&lt;/p&gt;

&lt;p&gt;I'm REALLY happy with the changes after I previously ranted earlier this year:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/2012/02/mvc-4-project-templates-are-stupid/"&gt;MVC 4 Project Templates are stupid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you Microsoft!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/06/using-nhibernate-with-servicestack/</guid><link>http://www.philliphaydon.com/2012/06/using-nhibernate-with-servicestack/</link><a10:author><a10:name /></a10:author><category>ServiceStack</category><title>Using NHibernate with ServiceStack</title><description>&lt;p&gt;A few people have asked me how they can use ServiceStack with other persistence technologies like RavenDB and NHibernate, or if you really must... EntityFramework... Rather than &lt;a href="https://github.com/ServiceStack/ServiceStack.OrmLite"&gt;ServiceStack.OrmLite&lt;/a&gt; or &lt;a href="https://github.com/ServiceStack/ServiceStack.Redis"&gt;ServiceStack.Redis&lt;/a&gt; like many of the examples in SS show.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This isn't about best practice on using NHibernate or ServiceStack, my services are named just to quickly get something up and running.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; This blog post may not be completely inline with the GitHub repository since I will be updating the repository to include some additional samples in the future.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I've created a small sample project which can be found &lt;a href="https://github.com/phillip-haydon/ServiceStack-NHibernate-Sample"&gt;here on GitHub&lt;/a&gt;, I plan to flesh it out a little bit from the date this is posted, but it's purely there as a sample.&lt;/p&gt;

&lt;h2&gt;No Repositories!&lt;/h2&gt;

&lt;p&gt;Utilizing other persistence frameworks is really easy with ServiceStack, the thing with ServiceStack Services is that they are doing something concise, it's a single service implementation, so there's really no need to use repositories for them, you gain absolutely no benefit from using repositories other than adding an additional layer of abstraction and complexity to your services.&lt;/p&gt;

</description><pubDate>Mon, 04 Jun 2012 16:00:00 Z</pubDate><a10:updated>2012-06-04T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A few people have asked me how they can use ServiceStack with other persistence technologies like RavenDB and NHibernate, or if you really must... EntityFramework... Rather than &lt;a href="https://github.com/ServiceStack/ServiceStack.OrmLite"&gt;ServiceStack.OrmLite&lt;/a&gt; or &lt;a href="https://github.com/ServiceStack/ServiceStack.Redis"&gt;ServiceStack.Redis&lt;/a&gt; like many of the examples in SS show.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This isn't about best practice on using NHibernate or ServiceStack, my services are named just to quickly get something up and running.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; This blog post may not be completely inline with the GitHub repository since I will be updating the repository to include some additional samples in the future.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I've created a small sample project which can be found &lt;a href="https://github.com/phillip-haydon/ServiceStack-NHibernate-Sample"&gt;here on GitHub&lt;/a&gt;, I plan to flesh it out a little bit from the date this is posted, but it's purely there as a sample.&lt;/p&gt;

&lt;h2&gt;No Repositories!&lt;/h2&gt;

&lt;p&gt;Utilizing other persistence frameworks is really easy with ServiceStack, the thing with ServiceStack Services is that they are doing something concise, it's a single service implementation, so there's really no need to use repositories for them, you gain absolutely no benefit from using repositories other than adding an additional layer of abstraction and complexity to your services.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;That doesn't mean you don't have to use repositories, if you REALLY want to use them. You can, and I'll add a sample of using a repository with the RestService implementation.&lt;/p&gt;

&lt;h2&gt;Setting Up SS&lt;/h2&gt;

&lt;p&gt;Assuming you've setup NHibernate and your mappings, all we need to do is setup ServiceStack.&lt;/p&gt;

&lt;p&gt;First things first! Install ServiceStack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package ServiceStack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can use ServiceStack.Host.* (replace the * with MVC or ASPNET) which will automatically configure the web.config. Personally I prefer to do it myself.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Using the Package Manager (or GUI) install Service Stack into your project. This should add the required code to the web.config, if not you can double check your web config is setup like shown &lt;a href="https://github.com/ServiceStack/ServiceStack/wiki/Create-your-first-webservice"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next in the global.asax we want to create an AppHost and configure it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Global : HttpApplication
{
    public class SampleServiceAppHost : AppHostBase
    {
        private readonly IContainerAdapter _containerAdapter;
        public SampleServiceAppHost(ISessionFactory sessionFactory)
            : base("Service Stack with Fluent NHibernate Sample", typeof(ProductFindService).Assembly)
        {
            base.Container.Register&amp;lt;ISessionFactory&amp;gt;(sessionFactory);
        }

        public override void Configure(Funq.Container container)
        {
            container.Adapter = _containerAdapter;
        }
    }

    void Application_Start(object sender, EventArgs e)
    {
        var factory = new SessionFactoryManager().CreateSessionFactory();

        (new SampleServiceAppHost(factory)).Init();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our service host we take in our NHibernate Session Factory, and we wire it up to &lt;a href="https://github.com/ServiceStack/ServiceStack/wiki/The-IoC-container"&gt;Funq (the default IoC container SS uses)&lt;/a&gt;, this is so when the Service is resolved, it gets the SessionFactory to create a Session.&lt;/p&gt;

&lt;p&gt;If you were using RavenDB, this is where you would inject your DocumentStore, and if you were using EntityFramework, you would inject that DataContext thing it uses.&lt;/p&gt;

&lt;p&gt;So when the application is started, we create the SessionFactory, and create an instance of the AppHost, passing in the SessionFactory.&lt;/p&gt;

&lt;h2&gt;Services&lt;/h2&gt;

&lt;p&gt;Now that SS is setup, we need to implement our services. This part is just as easy.&lt;/p&gt;

&lt;p&gt;In some of the SS samples such as &lt;a href="https://github.com/ServiceStack/ServiceStack.Examples/blob/master/src/ServiceStack.MovieRest/MovieService.cs#L135"&gt;this one&lt;/a&gt;, dependencies are injected via the properties. Personally I don't like this, because the service is absolutely dependent on that dependency. It cannot function without it, so in my opinion this dependency should be done via the constructor.&lt;/p&gt;

&lt;p&gt;I'm not going to go over EVERY service implementation, I'm only going to show Insert and Select By Id.&lt;/p&gt;

&lt;h2&gt;Insert&lt;/h2&gt;

&lt;p&gt;Besides the model defined for NHibernate, we need our Service Request Model, and we need our implementation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductInsert
{
    public string Name { get; set; }
    public string Description { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is our Service Request Model, really plain and simple DTO used for doing a Product Insert.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductInsertService : ServiceBase&amp;lt;ProductInsert&amp;gt;
{
    public ISessionFactory NHSessionFactory { get; set; }
    public ProductInsertService(ISessionFactory sessionFactory)
    {
        NHSessionFactory = sessionFactory;
    }

    protected override object Run(ProductInsert request)
    {
        using (var session = NHSessionFactory.OpenSession())
        using (var tx = session.BeginTransaction())
        {
            var result = request.TranslateTo&amp;lt;Product&amp;gt;();

            session.Save(result);

            tx.Commit();
        }

        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is our Service Implementation, as you can see we have a constructor which takes in the &lt;code&gt;ISessionFactory&lt;/code&gt;, this is our NHibernate &lt;code&gt;ISessionFactory&lt;/code&gt;, you need to be careful here since ServiceStack has it's own &lt;code&gt;ISessionFactory&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/servicestack-nhibernate-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We need to make sure this is the NHibernate one:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/servicestack-nhibernate-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can of course, inject your Unit Of Work, or the NHibernate Session, or what ever you like, if you're using Repositories you may opt to inject an instance of your desired repository such as &lt;code&gt;IProductRepository&lt;/code&gt;. For this example I'm using NHibernates SessionFactory so that the service is responsible for opening a Session and Transaction.&lt;/p&gt;

&lt;p&gt;So that's all there is to it, inject your SessionFactory, or your desired persistence implementation, and do your thing.&lt;/p&gt;

&lt;p&gt;The cool thing about ServiceStack is it has built in functionality to do mapping.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = request.TranslateTo&amp;lt;Product&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;TranslateTo&amp;lt;T&amp;gt;&lt;/code&gt; is functionality built into ServiceStack for mapping 1 object to another.&lt;/p&gt;

&lt;p&gt;If you want to update an object, ServiceStack handles that too using PopulateWith.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var existing = session.Get&amp;lt;Product&amp;gt;(request.Id)
                      .PopulateWith(request);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No need to introduce anything like AutoMapper.&lt;/p&gt;

&lt;h2&gt;Select By Id&lt;/h2&gt;

&lt;p&gt;This service I've called &lt;code&gt;ProductFindService&lt;/code&gt;, in the future there will be a &lt;code&gt;ProductSearchService&lt;/code&gt; to show selection by criteria.&lt;/p&gt;

&lt;p&gt;Like the Insert service, I've defined a simple model which only has an Id property for selecting the product out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductFind
{
    public Guid Id { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the Request Model I have a Response Model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductFindResponse : IHasResponseStatus
{
    public class Product
    {
        public Guid Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
    }

    public Product Result { get; set; }
    public ResponseStatus ResponseStatus { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This has a nested Product class which defines all the properties of a Product. The outer Response object has a Result and Status. (&lt;a href="http://www.philliphaydon.com/2012/03/service-stack-exceptions-and-errors/"&gt;status is for Exception/Error information&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;As you can see the Response is the same name as the Request, with Response appended to the end, so that SS can create this object itself.&lt;/p&gt;

&lt;p&gt;When I setup these Request/Response objects in Visual Studio, I use an extension called &lt;a href="http://visualstudiogallery.msdn.microsoft.com/9d6ef0ce-2bef-4a82-9a84-7718caa5bb45"&gt;NestIn&lt;/a&gt; which allows me to select the two classes and nest the Response under the Request like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/servicestack-nhibernate-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The service is similar to the insert, we inject the SessionFactory, open a Session, no transaction (unless you want to use 2nd level caching, but that's beyond this post) and select out the Product:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductFindService : ServiceBase&amp;lt;ProductFind&amp;gt;
{
    public ISessionFactory NHSessionFactory { get; set; }
    public ProductFindService(ISessionFactory sessionFactory)
    {
        NHSessionFactory = sessionFactory;
    }

    protected override object Run(ProductFind request)
    {
        using (var session = NHSessionFactory.OpenSession())
        {
            var result = session.Load&amp;lt;Models.Product&amp;gt;(request.Id);

            return new ProductFindResponse
            {
                Result = result.TranslateTo&amp;lt;ProductFindResponse.Product&amp;gt;()
            };
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lastly we return a new Response object, and translate the result from NHibernate to the Response result.&lt;/p&gt;

&lt;p&gt;Easy peasy :)&lt;/p&gt;

&lt;p&gt;Swapping out NHibernate for anything else like RavenDB or MongoDB is super easy. I hope this helps those few people who have asked me how to use other persistence frameworks get up and running.&lt;/p&gt;

&lt;p&gt;I find it amazing how little code you're required to write to get a ServiceStack Service up and running.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/04/codeschool-com-is-the-most-awesome-way-to-learn/</guid><link>http://www.philliphaydon.com/2012/04/codeschool-com-is-the-most-awesome-way-to-learn/</link><a10:author><a10:name /></a10:author><title>CodeSchool.com is the most awesome way to learn</title><description>&lt;p&gt;On the 1st of April, Glenn Block posted a link that was too good to be true.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeschool.com"&gt;http://www.codeschool.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/code-school-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I have a habit of checking out most links that don't look like they link to a porn site or some look at photo of me and signup to see me naked. This particular link interested me because his tweet mentioned Backbone, something I've been wanting to learn for a while and that I'm been hoping &lt;a href="https://twitter.com/#!/derickbailey"&gt;Derick Bailey&lt;/a&gt; would add to his awesome JavaScript video collection: &lt;a href="http://www.watchmecode.net"&gt;http://www.watchmecode.net&lt;/a&gt; (&lt;strong&gt;&lt;em&gt;his JavaScript series is absolutely brilliant and I've learnt SO much from him so go support him so he will make more plz kthxbi&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Anyway CodeSchool allows you to do level 1 of most courses for free, and if you like what you try you can purchase the rest of the course. Buying the courses 1 by 1 is a little bit expensive at $55 USD, but it's well worth the money.&lt;/p&gt;

&lt;p&gt;You're not getting just a video like you would with sites like Plural Sight, Tekpub, or any of the many other site's popping up lately.&lt;/p&gt;

&lt;p&gt;After each lesson in the course, there's a series of challenges which allow you to utilize your new gained knowledge and put it to the test. The Backbone course challenges you to make a small ToDo list application, starting out really basic and slowly modifying the code to follow best practice, or add new features.&lt;/p&gt;

</description><pubDate>Tue, 10 Apr 2012 16:00:00 Z</pubDate><a10:updated>2012-04-10T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;On the 1st of April, Glenn Block posted a link that was too good to be true.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeschool.com"&gt;http://www.codeschool.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/code-school-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I have a habit of checking out most links that don't look like they link to a porn site or some look at photo of me and signup to see me naked. This particular link interested me because his tweet mentioned Backbone, something I've been wanting to learn for a while and that I'm been hoping &lt;a href="https://twitter.com/#!/derickbailey"&gt;Derick Bailey&lt;/a&gt; would add to his awesome JavaScript video collection: &lt;a href="http://www.watchmecode.net"&gt;http://www.watchmecode.net&lt;/a&gt; (&lt;strong&gt;&lt;em&gt;his JavaScript series is absolutely brilliant and I've learnt SO much from him so go support him so he will make more plz kthxbi&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;Anyway CodeSchool allows you to do level 1 of most courses for free, and if you like what you try you can purchase the rest of the course. Buying the courses 1 by 1 is a little bit expensive at $55 USD, but it's well worth the money.&lt;/p&gt;

&lt;p&gt;You're not getting just a video like you would with sites like Plural Sight, Tekpub, or any of the many other site's popping up lately.&lt;/p&gt;

&lt;p&gt;After each lesson in the course, there's a series of challenges which allow you to utilize your new gained knowledge and put it to the test. The Backbone course challenges you to make a small ToDo list application, starting out really basic and slowly modifying the code to follow best practice, or add new features.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/code-school-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Each challenge builds on top of the previous, it gives you a story with some helpful information on functions to invoke or events to listen to, and you can dive back into the slides to double check things, should you forget.&lt;/p&gt;

&lt;p&gt;If you get stuck you can ask for hints.&lt;/p&gt;

&lt;p&gt;Each time you use a hint, the number of points you can gain from the challenge drops, yes that's right, there's a points counter to entice you to complete the challenges.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/code-school-3.png" alt="" /&gt; &lt;img src="http://www.philliphaydon.com/images/code-school-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;To top it all off you get this nifty little public profile with badges to show what you've completed:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/code-school-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This site is just amazing, it really taking learning to a whole new level. You're not stuck with boring old videos that you forget after you've finished watching an hour of content, you spend up to 20 minutes learning a bunch of new stuff which you can use right away in their predefined challenges and get feedback right away. It goes a long way to help you understand what you're doing.&lt;/p&gt;

&lt;p&gt;I highly recommend anyone wanting to learn Backbone, grab this course:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeschool.com/courses/anatomy-of-backbonejs"&gt;http://www.codeschool.com/courses/anatomy-of-backbonejs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or checkout some of the other courses available:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.codeschool.com/courses"&gt;http://www.codeschool.com/courses&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/03/my-must-have-short-list-programs-and-extensions-etc/</guid><link>http://www.philliphaydon.com/2012/03/my-must-have-short-list-programs-and-extensions-etc/</link><a10:author><a10:name /></a10:author><title>My must have (short) list programs/extensions etc</title><description>&lt;p&gt;We have all seen these lists before, but I've decided I'll make a list of all the software I use or think are a must have, blog it, then this time next year I can do the list again and see how much it's changed.&lt;/p&gt;

&lt;h3&gt;Visual Studio 2010&lt;/h3&gt;

&lt;p&gt;What can I say, I'm a .NET Developer :)&lt;/p&gt;

&lt;h3&gt;ReSharper&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.jetbrains.com/resharper/"&gt;http://www.jetbrains.com/resharper/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should just ship with Visual Studio, without ReSharper I feel so unproductive in VS.&lt;/p&gt;

&lt;h3&gt;MindScape Web Workbench&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;http://www.mindscapehq.com/products/web-workbench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This VS extension just gets better and better, I primarily got it to write LESS and CoffeeScript, but recently they added support for minifying and combining JavaScript and CSS files. Really cool stuff and I highly recommend it.&lt;/p&gt;

&lt;h3&gt;BugAid&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.bugaidsoftware.com/"&gt;http://www.bugaidsoftware.com/&lt;/a&gt;&lt;/p&gt;

</description><pubDate>Fri, 23 Mar 2012 16:00:00 Z</pubDate><a10:updated>2012-03-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;We have all seen these lists before, but I've decided I'll make a list of all the software I use or think are a must have, blog it, then this time next year I can do the list again and see how much it's changed.&lt;/p&gt;

&lt;h3&gt;Visual Studio 2010&lt;/h3&gt;

&lt;p&gt;What can I say, I'm a .NET Developer :)&lt;/p&gt;

&lt;h3&gt;ReSharper&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.jetbrains.com/resharper/"&gt;http://www.jetbrains.com/resharper/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should just ship with Visual Studio, without ReSharper I feel so unproductive in VS.&lt;/p&gt;

&lt;h3&gt;MindScape Web Workbench&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/products/web-workbench"&gt;http://www.mindscapehq.com/products/web-workbench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This VS extension just gets better and better, I primarily got it to write LESS and CoffeeScript, but recently they added support for minifying and combining JavaScript and CSS files. Really cool stuff and I highly recommend it.&lt;/p&gt;

&lt;h3&gt;BugAid&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.bugaidsoftware.com/"&gt;http://www.bugaidsoftware.com/&lt;/a&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;This is a relatively new extension, it extends the debugging tools in Visual Studio and gives more information where it can. It was a little annoying at first, but they are listening to the community and fixing issues, adding features, it's coming along nicely and I recommend it!&lt;/p&gt;

&lt;h3&gt;MightyMoose / NCrunch&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.continuoustests.com/"&gt;http://www.continuoustests.com/&lt;/a&gt; / &lt;a href="http://www.ncrunch.net/"&gt;http://www.ncrunch.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These two tools are the same taken from two different approaches with two different goals. As a result I'm really torn between them. I love features from both, and I've been using MightyMoose at work and NCrunch at home. NCrunch has code-coverage which Greg Young &lt;a href="http://goodenoughsoftware.net/2012/03/21/code-coverage/"&gt;disagrees&lt;/a&gt; with. I guess that's what's stopping me from adopting &lt;a href="http://goodenoughsoftware.net/2012/03/01/mighty-moose-lolcats/"&gt;LOLCats&lt;/a&gt; and &lt;a href="http://goodenoughsoftware.net/2012/03/06/gary/"&gt;Gary&lt;/a&gt;, and other cool features in MM.&lt;/p&gt;

&lt;h3&gt;PostgreSQL&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.postgresql.org/"&gt;http://www.postgresql.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing I don't like about SQL Server, is having to install it and have it run all the time... But I've always loved PostgreSQL as well, and hated MySQL. (&lt;em&gt;checkout Tekpubs "The Perils of MySQL" for a glimpse of why I don't like it&lt;/em&gt;). Why I think this is a must have is I recently found out &lt;a href="http://www.postgresonline.com/journal/archives/172-Starting-PostgreSQL-in-windows-without-install.html"&gt;you don't actually need to install it to run&lt;/a&gt;. This makes it great for a dev environment where you want to run up an instance on demand when you need it.&lt;/p&gt;

&lt;h3&gt;RavenDB&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://ravendb.net/"&gt;http://ravendb.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're a .NET developer and not already looking at, or using RavenDB... I don't know you... RavenDB makes working with a document database, fun, and easy to learn, and constantly blows my mind.&lt;/p&gt;

&lt;h3&gt;ILSpy&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://wiki.sharpdevelop.net/ilspy.ashx"&gt;http://wiki.sharpdevelop.net/ilspy.ashx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of all the reflection tools available I prefer ILSpy. No real reason it just works and is fast.&lt;/p&gt;

&lt;h3&gt;Sublime Text&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.sublimetext.com/"&gt;http://www.sublimetext.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used to be a massive fan of &lt;a href="http://editplus.com/"&gt;EditPlus&lt;/a&gt;, infact I've used it for over 10 years... But recently found Sublime text due to &lt;a href="http://tutsplus.com/course/30-days-to-learn-jquery/"&gt;Tuts+ 30 Days to learn jQuery&lt;/a&gt;, and haven't gone back to EditPlus. It has awesome plugin features.&lt;/p&gt;

&lt;h3&gt;NHProf&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://nhprof.com/"&gt;http://nhprof.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since I tend to use NHibernate quite a bit, well not so much now that RavenDB is about, but when using NHibernate I use NHProf to view the generated queries. One really, really, really handy tool.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There's a lot of other little tools I use, like Fiddler, &lt;a href="https://chrome.google.com/webstore/detail/chklaanhfefbnpoihckbnefhakgolnmc"&gt;JSONView&lt;/a&gt;, etc. But I just wanted to list the things I use all the time.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/03/ormlite-blobbing-done-with-nhibernate-and-serialized-json/</guid><link>http://www.philliphaydon.com/2012/03/ormlite-blobbing-done-with-nhibernate-and-serialized-json/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>OrmLite Blobbing done with NHibernate and Serialized JSON...</title><description>&lt;p&gt;There seems to be a growing trend now with these Micro ORM's, at least that is what I see with &lt;a href="https://github.com/ServiceStack/ServiceStack.OrmLite"&gt;ServiceStack.OrmLite&lt;/a&gt;, which is the ability to persist properties of an object as a JSON, rather than in separate tables.&lt;/p&gt;

&lt;p&gt;Usually with a Relational approach you would create a &lt;code&gt;Customer&lt;/code&gt; table, &lt;code&gt;Address&lt;/code&gt; table, and most likely shove the Phone Numbers under separate columns of the customer for &lt;code&gt;HomePhone&lt;/code&gt; and &lt;code&gt;Mobile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means we are limited to two types of phone numbers, and require joining or querying for the addresses.&lt;/p&gt;

&lt;p&gt;Do we really need separate columns for phone numbers? Do we really need to persist the addresses in another table?&lt;/p&gt;

&lt;p&gt;One problem I see with putting addresses into it's own table, is the temptation to relate them to an Order (assuming this is some sort of eCommerce system) when really there is no relationship between a customer's address, and the address on an order.&lt;/p&gt;

&lt;p&gt;Really, the order should have it's own address, otherwise you can never delete or update an address on a customer, and you can't delete the customer. However I digress and this is a topic for another day.&lt;/p&gt;

</description><pubDate>Sun, 18 Mar 2012 16:00:00 Z</pubDate><a10:updated>2012-03-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;There seems to be a growing trend now with these Micro ORM's, at least that is what I see with &lt;a href="https://github.com/ServiceStack/ServiceStack.OrmLite"&gt;ServiceStack.OrmLite&lt;/a&gt;, which is the ability to persist properties of an object as a JSON, rather than in separate tables.&lt;/p&gt;

&lt;p&gt;Usually with a Relational approach you would create a &lt;code&gt;Customer&lt;/code&gt; table, &lt;code&gt;Address&lt;/code&gt; table, and most likely shove the Phone Numbers under separate columns of the customer for &lt;code&gt;HomePhone&lt;/code&gt; and &lt;code&gt;Mobile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means we are limited to two types of phone numbers, and require joining or querying for the addresses.&lt;/p&gt;

&lt;p&gt;Do we really need separate columns for phone numbers? Do we really need to persist the addresses in another table?&lt;/p&gt;

&lt;p&gt;One problem I see with putting addresses into it's own table, is the temptation to relate them to an Order (assuming this is some sort of eCommerce system) when really there is no relationship between a customer's address, and the address on an order.&lt;/p&gt;

&lt;p&gt;Really, the order should have it's own address, otherwise you can never delete or update an address on a customer, and you can't delete the customer. However I digress and this is a topic for another day.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Example by OrmLite&lt;/h2&gt;

&lt;p&gt;This post is about how to do it with NHibernate, but I'm going to start by showing the example in OrmLite, then use the same example for NHibernate.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; OrmLite by default persists as JSV-format (JSON+CSV) rather than JSON. I'm currently unaware of any way to change it to be JSON.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The customer is the root aggregate, and has his own Addresses and Phone Numbers, and is modelled like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public enum PhoneType
{
    Home,
    Work,
    Mobile,
}

public enum AddressType
{
    Home,
    Work,
    Other,
}

public class Address
{
    public string Line1 { get; set; }
    public string Line2 { get; set; }
    public string ZipCode { get; set; }
    public string State { get; set; }
    public string City { get; set; }
    public string Country { get; set; }
}

public class Customer
{
    public Customer()
    {
        this.PhoneNumbers = new Dictionary&amp;lt;PhoneType, string&amp;gt;();
        this.Addresses = new Dictionary&amp;lt;AddressType, Address&amp;gt;();
    }

    [AutoIncrement] // Creates Auto primary key
    public virtual int Id { get; set; }

    public virtual string FirstName { get; set; }
    public virtual string LastName { get; set; }

    [Index(Unique = true)] // Creates Unique Index
    public virtual string Email { get; set; }

    public virtual Dictionary&amp;lt;PhoneType, string&amp;gt; PhoneNumbers { get; set; }  //Blobbed
    public virtual Dictionary&amp;lt;AddressType, Address&amp;gt; Addresses { get; set; }  //Blobbed
    public virtual DateTime CreatedAt { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The attributes are for OrmLite and are not used by NHibernate, and the properties have been made virtual for NHibernate.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So using OrmLite if we insert some data like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var customer = new Customer
{
    FirstName = "Phillip",
    LastName = "Haydon",
    Email = "test@test.com"
};
customer.Addresses.Add(AddressType.Home, new Address
{
    Line1 = "Unit 31",
    Line2 = "102 Banana Street",
    City = "Sydney",
    Country = "Australia",
    State = "NSW",
    ZipCode = "2009"
});

customer.PhoneNumbers.Add(PhoneType.Mobile, "+61 411 122 34");
customer.PhoneNumbers.Add(PhoneType.Home, "+61 256 3234");

cmd.Insert(customer);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can query for that data and we get the following results:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/images/nhibernate-blobbing-1.png"&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-blobbing-1.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Click on the image to see it fully)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As you can see PhoneNumbers are stored like so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{Mobile:+61 411 122 34,Home:+61 256 3234}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And Addresses are stored like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{Home:{Line1:Unit 31,Line2:102 Banana Street,ZipCode:2009,State:NSW,City:Sydney,Country:Australia}}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if we query for that data back out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var customer = cmd.QuerySingle&amp;lt;Customer&amp;gt;(1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-blobbing-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You can see we get all the information back out again, no problem! This stuff is built into OrmLite which is awesome, but how do we do it in NHibernate?&lt;/p&gt;

&lt;h2&gt;Custom NHibernate UserType&lt;/h2&gt;

&lt;p&gt;So now we want to do this in NHibernate. This is a &lt;code&gt;UserType&lt;/code&gt; I wrote a long time ago, well... I re-wrote it recently but wrote the initial idea a long time ago, and I've personally never seen anything similar in NHibernate.&lt;/p&gt;

&lt;p&gt;I've put this on Gist - &lt;a href="https://gist.github.com/1936188"&gt;https://gist.github.com/1936188&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Serializable]
public class Blobbed&amp;lt;T&amp;gt; : IUserType where T : class
{
    public new bool Equals(object x, object y)
    {
        if (x == null &amp;amp;&amp;amp; y == null)
            return true;
        if (x == null || y == null)
            return false;

        var xdocX = JsonConvert.SerializeObject(x);
        var xdocY = JsonConvert.SerializeObject(y);

        return xdocY == xdocX;
    }

    public int GetHashCode(object x)
    {
        if (x == null)
            return 0;

        return x.GetHashCode();
    }

    public object NullSafeGet(IDataReader rs, string[] names, object owner)
    {
        if (names.Length != 1)
            throw new InvalidOperationException("Only expecting one column...");

        var val = rs[names[0]] as string;

        if (val != null &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(val))
        {
            return JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(val);
        }

        return null;
    }

    public void NullSafeSet(IDbCommand cmd, object value, int index)
    {
        var parameter = (DbParameter)cmd.Parameters[index];

        if (value == null)
        {
            parameter.Value = DBNull.Value;
        }
        else
        {
            parameter.Value = JsonConvert.SerializeObject(value);
        }
    }

    public object DeepCopy(object value)
    {
        if (value == null)
            return null;

        //Serialized and Deserialized using json.net so that I don't
        //have to mark the class as serializable. Most likely slower
        //but only done for convenience.

        var serialized = JsonConvert.SerializeObject(value);

        return JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(serialized);
    }

    public object Replace(object original, object target, object owner)
    {
        return original;
    }

    public object Assemble(object cached, object owner)
    {
        var str = cached as string;

        if (string.IsNullOrWhiteSpace(str))
            return null;

        return JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(str);
    }

    public object Disassemble(object value)
    {
        if (value == null)
            return null;

        return JsonConvert.SerializeObject(value);
    }

    public SqlType[] SqlTypes
    {
        get
        {
            return new SqlType[] { new StringSqlType() };
        }
    }

    public Type ReturnedType
    {
        get { return typeof(T); }
    }

    public bool IsMutable
    {
        get { return true; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's a generic class so that I can return the type of object back, and uses json.net to handle the serialization/deserialization of the object to JSON.&lt;/p&gt;

&lt;p&gt;Now when mapping the properties we can specify the &lt;code&gt;CustomType&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map(x =&amp;gt; x.Addresses, "Addresses").CustomType&amp;lt;Blobbed&amp;lt;Dictionary&amp;lt;AddressType, Address&amp;gt;&amp;gt;&amp;gt;();
Map(x =&amp;gt; x.PhoneNumbers, "PhoneNumbers").CustomType&amp;lt;Blobbed&amp;lt;Dictionary&amp;lt;PhoneType, string&amp;gt;&amp;gt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example I'm using has two dictionaries of values. But if you were mapping a single type such as a single &lt;code&gt;Address&lt;/code&gt;, you would just specify the type as above, without the &lt;code&gt;Dictionary&lt;/code&gt;, &lt;code&gt;.CustomType&amp;lt;Blobbed&amp;lt;Address&amp;gt;&amp;gt;()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The full mapping for the Customer is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CustomerMap : ClassMap&amp;lt;Customer&amp;gt;
{
    public CustomerMap()
    {
        Table("Customer");
        Id(x =&amp;gt; x.Id, "Id").GeneratedBy.Identity();

        Map(x =&amp;gt; x.FirstName, "FirstName");
        Map(x =&amp;gt; x.LastName, "LastName");
        Map(x =&amp;gt; x.Email, "Email");
        Map(x =&amp;gt; x.CreatedAt, "CreatedAt");

        Map(x =&amp;gt; x.Addresses, "Addresses").CustomType&amp;lt;Blobbed&amp;lt;Dictionary&amp;lt;AddressType, Address&amp;gt;&amp;gt;&amp;gt;();
        Map(x =&amp;gt; x.PhoneNumbers, "PhoneNumbers").CustomType&amp;lt;Blobbed&amp;lt;Dictionary&amp;lt;PhoneType, string&amp;gt;&amp;gt;&amp;gt;();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can insert some data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var tx = session.BeginTransaction())
{
    var customer = new Customer
    {
        FirstName = "Prentice",
        LastName = "Porter",
        Email = "banana3@test.com"
    };

    customer.Addresses.Add(AddressType.Home, new Address
    {
        Line1 = "13/187 Jones St",
        City = "Auckland",
        Country = "New Zealand",
        ZipCode = "0629"
    });

    customer.PhoneNumbers.Add(PhoneType.Mobile, "+64 27 551 443");
    customer.PhoneNumbers.Add(PhoneType.Home, "+64 9445 1982");

    session.SaveOrUpdate(customer);

    tx.Commit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the data is inserted:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/images/nhibernate-blobbing-3.png"&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-blobbing-3.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Click on the image to see it fully)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Only this data is serialized as JSON rather than JSV-format.&lt;/p&gt;

&lt;p&gt;PhoneNumbers:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{"Mobile":"+64 27 551 443","Home":"+64 9445 1982"}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And Addresses:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{"Home":{"Line1":"13/187 Jones St","Line2":null,"ZipCode":"0629","State":null,"City":"Auckland","Country":"New Zealand"}}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we query for the data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var customer = session.Get&amp;lt;Customer&amp;gt;(2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-blobbing-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Just like OrmLite we get the object back just the same.&lt;/p&gt;

&lt;h2&gt;Things to note&lt;/h2&gt;

&lt;p&gt;The custom user type in it's current state does not handle inherited objects. If you want to support it, then you can modify it to serialize and deserialize using the type information.&lt;/p&gt;

&lt;p&gt;This can be done like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JsonConvert.SerializeObject(x, 
    Formatting.None, 
    new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;JsonConvert.DeserializeObject&amp;lt;T&amp;gt;(val, 
    new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this will do is include the type information on the serialized object:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;{"$type":"System.Collections.Generic.Dictionary2[[NHibernateJsonTest.AddressType, NHibernateJsonTest],[NHibernateJsonTest.Address, NHibernateJsonTest]], mscorlib","Home":{"$type":"NHibernateJsonTest.Address, NHibernateJsonTest","Line1":"13/187 Jones St","Line2":null,"ZipCode":"0629","State":null,"City":"Auckland","Country":"New Zealand"}}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Why would you want to do this&lt;/h2&gt;

&lt;p&gt;To avoid unnecessary tables and mappings. The example above is a perfect example where we can remove the need for a table on data that is never searched against and is never related to anything else.&lt;/p&gt;

&lt;p&gt;There's no need for joins or adding additional columns. We just map the object or collection to a single column and we are done, and our code knows no different.&lt;/p&gt;

&lt;p&gt;Also, schema changes in blobs don't need DDL updates. If your model changes, you add new properties, or remove old properties, the blob will get updated next time you update your data. No more scripting off schema changes.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/03/service-stack-exceptions-and-errors/</guid><link>http://www.philliphaydon.com/2012/03/service-stack-exceptions-and-errors/</link><a10:author><a10:name /></a10:author><category>ServiceStack</category><title>Service Stack Exceptions and Errors</title><description>&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post on ServiceStack is to do with the C# Client. JavaScript posts will be coming in the future.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;One of the most painful experiences with WCF is exceptions, if using WCF makes you want to slit your wrists, exceptions in WCF will make you want douse yourself in petrol and light yourself on fire.&lt;/p&gt;

&lt;p&gt;Before you even get to your code exceptions, you have to wade yourself through piles of retarded errors to do with Contract Mismatching, Forcefully Disconnected, Binding Issues, Random Faults... The list goes on.&lt;/p&gt;

&lt;p&gt;Then, it all works in development, and you put it in production, and it doesn't work, and to debug it you got to modify the config file, setup the &lt;a href="http://msdn.microsoft.com/en-us/library/ms732023.aspx"&gt;diagnostics logging&lt;/a&gt;, then view it and trawl through piles of crap.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(image taken from: &lt;a href="http://weblogs.asp.net/nmarun/archive/2011/06/10/wcf-service-trace-viewer-part-1.aspx"&gt;http://weblogs.asp.net/nmarun/archive/2011/06/10/wcf-service-trace-viewer-part-1.aspx&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;And in the end, it was probably a PEBKAC issue where you forgot to put a stupid attribute on a property...&lt;/p&gt;

</description><pubDate>Thu, 08 Mar 2012 16:00:00 Z</pubDate><a10:updated>2012-03-08T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post on ServiceStack is to do with the C# Client. JavaScript posts will be coming in the future.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;One of the most painful experiences with WCF is exceptions, if using WCF makes you want to slit your wrists, exceptions in WCF will make you want douse yourself in petrol and light yourself on fire.&lt;/p&gt;

&lt;p&gt;Before you even get to your code exceptions, you have to wade yourself through piles of retarded errors to do with Contract Mismatching, Forcefully Disconnected, Binding Issues, Random Faults... The list goes on.&lt;/p&gt;

&lt;p&gt;Then, it all works in development, and you put it in production, and it doesn't work, and to debug it you got to modify the config file, setup the &lt;a href="http://msdn.microsoft.com/en-us/library/ms732023.aspx"&gt;diagnostics logging&lt;/a&gt;, then view it and trawl through piles of crap.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(image taken from: &lt;a href="http://weblogs.asp.net/nmarun/archive/2011/06/10/wcf-service-trace-viewer-part-1.aspx"&gt;http://weblogs.asp.net/nmarun/archive/2011/06/10/wcf-service-trace-viewer-part-1.aspx&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;And in the end, it was probably a PEBKAC issue where you forgot to put a stupid attribute on a property...&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;At my previous job, a couple of my friends were up until about 4am, they spent 16 hours debugging a WCF issue, because it's a pain.&lt;/p&gt;

&lt;h2&gt;Enter Service Stack&lt;/h2&gt;

&lt;p&gt;One of the things I looked at early on was how it handled errors, then I neglected them because I lost interest.There's a couple of exceptions that aren't SS related. The main one you may come across is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;WebException&lt;br /&gt;
  Unable to connect to remote server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is kind of obvious, either the remote server doesn't exist or you mistyped the URL, or maybe there's a firewall issue or something, what ever it is, it can't connect to your service.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HttpException&lt;br /&gt;
  Maximum request length exceeded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may also get an HttpException if your requests are larger than 4mb, tho that's pretty large, not sure what you're sending to get that exception. But you can modify the &lt;a href="http://msdn.microsoft.com/en-us/library/e1f13641(vs.71).aspx"&gt;maxRequestLength&lt;/a&gt; to get around this one.&lt;/p&gt;

&lt;h3&gt;MethodNotAllowed&lt;/h3&gt;

&lt;p&gt;This method is the easiest to fix, it basically means your service hasn't been implemented, or maybe it was implemented but you didn't tell the AppHost about it.&lt;/p&gt;

&lt;h3&gt;General Exceptions&lt;/h3&gt;

&lt;p&gt;General exceptions as I'll call, them, are any unhandled exceptions that are thrown, or ones that you explicitly throw yourself.&lt;/p&gt;

&lt;p&gt;These exceptions are always thrown as a &lt;a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.Common/ServiceClient.Web/ServiceClientBase.cs#L278"&gt;WebServiceException&lt;/a&gt;. This means we can capture these exceptions in a try-catch like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
}
catch (WebServiceException webEx)
{
    //Handle our Web Service Exception
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's a couple of different ways you can throw exceptions, or errors. You can raise your own:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw new ApplicationException("Ahhhh stuff happened :S");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you will get this when you call the service.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The second way is to throw an &lt;code&gt;HttpError&lt;/code&gt;. There are a few predefined errors:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;That allow you to just pass a message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw HttpError.NotFound("Coffee wasn't found :( sad panda");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Or you can throw your own new one which allows you to define the &lt;code&gt;HttpStatusCode&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;throw new HttpError(HttpStatusCode.PaymentRequired, 
    "Kneedz monies plz", "Please deposit monies into my bank account :)");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is great stuff, it gives a LOT of flexibility to be able to give the client informative error messages rather than the infamous:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The connection was closed unexpectedly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;My errors are empty&lt;/h2&gt;

&lt;p&gt;So I threw an error and I didn't get it on the client:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/service-stack-errors-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I've lost a lot of information :( This is while throwing the exact same HttpError in the previous example.&lt;/p&gt;

&lt;p&gt;One of the little catches with this is the automated error handling shown above requires a naming convention of your service Request/Response objects.&lt;/p&gt;

&lt;p&gt;Lets say we have a &lt;code&gt;UserSearch&lt;/code&gt; request object.&lt;/p&gt;

&lt;p&gt;If an exception is thrown, ServiceStack will try and find an object of the same name, with the suffix 'Response'&lt;/p&gt;

&lt;p&gt;This this case it would look for &lt;code&gt;UserSearchResponse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.ServiceInterface/ServiceUtils.cs#L124"&gt;https://github.com/ServiceStack/ServiceStack/blob/master/src/ServiceStack.ServiceInterface/ServiceUtils.cs#L124&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the method &lt;code&gt;GetResponseDtoName&lt;/code&gt; takes in what your Request object was, and appends the &lt;code&gt;ResponseDtoSuffix&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The second catch is that your Response DTO must have a property on it named &lt;code&gt;ResponseStatus&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public ResponseStatus ResponseStatus { get; set; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although it's not required, I personally add the interface &lt;code&gt;IHasResponseStatus&lt;/code&gt; to my response DTO objects. This ensures that I remember to add the property, and it's named correctly with the correct type.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UserSearch
{
    public string NameStartsWith { get; set; }
}

public class UserSearchResponse : IHasResponseStatus
{
    public IEnumerable&amp;lt;User&amp;gt; Results { get; set; }

    public class User
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public ResponseStatus ResponseStatus { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;code&gt;UserSearch&lt;/code&gt; object is the Request, and my response is &lt;code&gt;UserSearchResponse&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I discussed with &lt;a href="https://github.com/mythz"&gt;Demis&lt;/a&gt;, because I wanted to use the same response object for a few different services. But he's specifically designed SS this way, one of the reasons for the naming is:&lt;/p&gt;

&lt;p&gt;If a use Requests a &lt;code&gt;UserSearch&lt;/code&gt;, he can expect a &lt;code&gt;UserSearchResponse&lt;/code&gt;. He doesn't need to know anything about the contracts or the service implementation, just that given a UserSearch request, he will get a &lt;code&gt;UserSearchResponse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's actually a really good point and after thinking about it, I completely agree!&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is only the automated error handling you get with SS, there's more that you can do, dive in and handle it yourself if you like. But in my opinion, the automated stuff covers a lot of scenarios and is very helpful.&lt;/p&gt;

&lt;p&gt;For more information on Error handling visit the wiki here: &lt;a href="https://github.com/ServiceStack/ServiceStack/wiki/Validation"&gt;https://github.com/ServiceStack/ServiceStack/wiki/Validation&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/03/ravendb-flattening-object-graphs-and-projections/</guid><link>http://www.philliphaydon.com/2012/03/ravendb-flattening-object-graphs-and-projections/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB - Flattening Object Graphs and Projections</title><description>&lt;p&gt;One of the guys in &lt;a href="http://jabbr.net/#/rooms/RavenDB"&gt;JabbR RavenDB&lt;/a&gt; chat room had a pretty interesting problem that took a while to solve. The problem was that he wasn't trying to return anything to do with the original document, but get a flattened view of some information inside the document.&lt;/p&gt;

&lt;p&gt;The scenario was a &lt;strong&gt;Game Server&lt;/strong&gt; which a collection of &lt;strong&gt;Connected Users&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GameServer
{
    public string Id { get; set; }
    public string ServerName { get; set; }
    public IEnumerable&amp;lt;User&amp;gt; ConnectedUser { get; set; }
    public class User
    {
        public string UserId { get; set; }
        public string Name { get; set; }
        public DateTimeOffset DateConnected { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given say 3 servers with a bunch of users on each server, and searching for a user who's name begins with 'b' the expected result was along the lines of:&lt;/p&gt;

</description><pubDate>Sat, 03 Mar 2012 16:00:00 Z</pubDate><a10:updated>2012-03-03T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One of the guys in &lt;a href="http://jabbr.net/#/rooms/RavenDB"&gt;JabbR RavenDB&lt;/a&gt; chat room had a pretty interesting problem that took a while to solve. The problem was that he wasn't trying to return anything to do with the original document, but get a flattened view of some information inside the document.&lt;/p&gt;

&lt;p&gt;The scenario was a &lt;strong&gt;Game Server&lt;/strong&gt; which a collection of &lt;strong&gt;Connected Users&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GameServer
{
    public string Id { get; set; }
    public string ServerName { get; set; }
    public IEnumerable&amp;lt;User&amp;gt; ConnectedUser { get; set; }
    public class User
    {
        public string UserId { get; set; }
        public string Name { get; set; }
        public DateTimeOffset DateConnected { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Given say 3 servers with a bunch of users on each server, and searching for a user who's name begins with 'b' the expected result was along the lines of:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th valign="top" width="100"&gt;&lt;strong&gt;UserId&lt;/strong&gt;&lt;/th&gt;
      &lt;th valign="top" width="100"&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
      &lt;th valign="top" width="144"&gt;&lt;strong&gt;DateConnected&lt;/strong&gt;&lt;/th&gt;
      &lt;th valign="top" width="254"&gt;&lt;strong&gt;ServerName&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="100"&gt;users/3&lt;/td&gt;
      &lt;td valign="top" width="100"&gt;Bob&lt;/td&gt;
      &lt;td valign="top" width="144"&gt;15/03/2012 12:44&lt;/td&gt;
      &lt;td valign="top" width="254"&gt;iPGN CS #01 Iceworld&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="100"&gt;users/2&lt;/td&gt;
      &lt;td valign="top" width="100"&gt;Bill&lt;/td&gt;
      &lt;td valign="top" width="144"&gt;15/03/2012 1:23&lt;/td&gt;
      &lt;td valign="top" width="254"&gt;3FL CS #4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="100"&gt;users/8&lt;/td&gt;
      &lt;td valign="top" width="100"&gt;Benny&lt;/td&gt;
      &lt;td valign="top" width="144"&gt;15/03/2012 1:18&lt;/td&gt;
      &lt;td valign="top" width="254"&gt;3FL CS #4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So basically for each user you get the server he's connected to.&lt;/p&gt;

&lt;p&gt;We tried everything under the sun, Reduce, Transform, etc. But couldn't figure out how to get the results. Infact using a Transform we could get the # of results returned, except they were all NULL. :(&lt;/p&gt;

&lt;p&gt;Turns out it's rather easy using just a Map and &lt;code&gt;AsProjection&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Setup Data&lt;/h2&gt;

&lt;p&gt;Test data can be viewed here: &lt;a href="http://pastie.org/3516113"&gt;http://pastie.org/3516113&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Index&lt;/h2&gt;

&lt;p&gt;The index is really easy, it's basically a Select Many map, but we also need to store the results from the Map.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class GameServers_ConnectedUsers :
    AbstractIndexCreationTask&amp;lt;GameServer, GameServers_ConnectedUsers.IndexResult&amp;gt;
{
    public GameServers_ConnectedUsers()
    {
        Map = servers =&amp;gt; from s in servers
                            from y in s.ConnectedUsers
                            select new
                            {
                                ServerName = s.ServerName,
                                UserName = y.Name,
                                DateConnected = y.DateConnected,
                                UserId = y.UserId
                            };
        Store(x =&amp;gt; x.ServerName, FieldStorage.Yes);
        Store(x =&amp;gt; x.UserName, FieldStorage.Yes);
        Store(x =&amp;gt; x.DateConnected, FieldStorage.Yes);
        Store(x =&amp;gt; x.UserId, FieldStorage.Yes);
    }

    public class IndexResult
    {
        public string ServerName { get; set; }
        public string UserName { get; set; }
        public DateTimeOffset DateConnected { get; set; }
        public string UserId { get; set; }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for storing the results from the Map is because if we don't, we don't actually get any results back. (will show you soon)&lt;/p&gt;

&lt;h2&gt;Querying&lt;/h2&gt;

&lt;p&gt;So querying is the same as always, only we need to provide the 'AsProjection&lt;T&gt;' to the query, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var results = 
    session.Query&amp;lt;GameServers_ConnectedUsers.IndexResult, GameServers_ConnectedUsers&amp;gt;()
           .Where(x =&amp;gt; x.UserName.StartsWith("b"))
           .AsProjection&amp;lt;GameServers_ConnectedUsers.IndexResult&amp;gt;()
           .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Projection just needs to be an object that matches the result, otherwise it will attempt to return the original documents.&lt;/p&gt;

&lt;p&gt;If we run the query without the &lt;code&gt;AsProjection&amp;lt;T&amp;gt;&lt;/code&gt; we end up with an exception because the result (the original document) doesn't match the object we were querying against &lt;code&gt;IndexResult&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we set the &lt;code&gt;AsProjection&lt;/code&gt; to &lt;code&gt;dynamic&lt;/code&gt;, or &lt;code&gt;GameServer&lt;/code&gt;, we get the original documents. BUT the funny thing is if you use &lt;code&gt;GameServer&lt;/code&gt; you end up with as many results as the projection has. In this case 3.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If we expand them out, we see we actually get a duplicate.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;But if we use &lt;code&gt;dynamic&lt;/code&gt; we get unique documents:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;IndexResult&lt;/code&gt; (or an object that matches the projection) we get the projected results that we wanted at the start of this post:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Three results, and all the correct data:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-6.png" alt="" /&gt;&lt;/p&gt;

&lt;h2&gt;Storing the results&lt;/h2&gt;

&lt;p&gt;I showed in the index that I was storing the results I wanted in the projection. This is because if we don't, we end up with this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-flattern-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Not only do we end up with the incorrect number of results, they are missing data that isn't found in the original document.&lt;/p&gt;

&lt;p&gt;You can see &lt;code&gt;GameServer&lt;/code&gt; is there, that's because it's found on the document. We need to &lt;code&gt;store&lt;/code&gt; the data so that RavenDB can return it, that means we use more disk space, but without it, RavenDB would have to query and assume the data that you wanted to return. By storing it RavenDB just returns what matches the query, and doesn't do any extra work.&lt;/p&gt;

&lt;p&gt;So if you want to return the projected results, then you need to Store them.&lt;/p&gt;

&lt;p&gt;I've put a gist here for anyone interested.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/1972646"&gt;https://gist.github.com/1972646&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/02/service-stack-i-heart-you-my-conversion-from-wcf-to-ss/</guid><link>http://www.philliphaydon.com/2012/02/service-stack-i-heart-you-my-conversion-from-wcf-to-ss/</link><a10:author><a10:name /></a10:author><category>ServiceStack</category><title>Service Stack... I heart you. My conversion from WCF to SS</title><description>&lt;p&gt;I've just spent the weekend ripping out that dreaded WCF abomination and replacing it with Service Stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://servicestack.net/"&gt;http://servicestack.net/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A modern fresh alternative to WCF. Code-first, convention-based, codegen-free. Encourages best-practices high-performance, scalable REST &amp;amp; RPC web services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the past couple of months I've been fighting with WCF to the point I wanted to slit my wrists.&lt;/p&gt;

&lt;p&gt;So I asked &lt;a href="http://jabbr.net/"&gt;JabbR&lt;/a&gt; and Twitter if I should use Web API. Well -no- one recommended Web API and everyone recommended Service Stack.&lt;/p&gt;

&lt;h2&gt;It's a different way of thinking&lt;/h2&gt;

&lt;p&gt;The first noticeable difference between WCF and SS (Service Stack) is that I'm no longer writing a single service class with a butt load of methods. Which is most likely a good thing because after a while they just become hard to manage.&lt;/p&gt;

&lt;p&gt;So instead of a Contract, Service, Response DTO, and Request DTO, with 9234823 methods defined in the Contract/Service. It's now &lt;strong&gt;1 Request DTO per Service.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

</description><pubDate>Mon, 20 Feb 2012 16:00:00 Z</pubDate><a10:updated>2012-02-20T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've just spent the weekend ripping out that dreaded WCF abomination and replacing it with Service Stack.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://servicestack.net/"&gt;http://servicestack.net/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A modern fresh alternative to WCF. Code-first, convention-based, codegen-free. Encourages best-practices high-performance, scalable REST &amp;amp; RPC web services.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the past couple of months I've been fighting with WCF to the point I wanted to slit my wrists.&lt;/p&gt;

&lt;p&gt;So I asked &lt;a href="http://jabbr.net/"&gt;JabbR&lt;/a&gt; and Twitter if I should use Web API. Well -no- one recommended Web API and everyone recommended Service Stack.&lt;/p&gt;

&lt;h2&gt;It's a different way of thinking&lt;/h2&gt;

&lt;p&gt;The first noticeable difference between WCF and SS (Service Stack) is that I'm no longer writing a single service class with a butt load of methods. Which is most likely a good thing because after a while they just become hard to manage.&lt;/p&gt;

&lt;p&gt;So instead of a Contract, Service, Response DTO, and Request DTO, with 9234823 methods defined in the Contract/Service. It's now &lt;strong&gt;1 Request DTO per Service.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Well before I would have something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ServiceContract]
public interface IMemberQueryService
{
    [OperationContract]
    MemberResponse ById(string id);
    [OperationContract]
    MemberResponse ByEmail(string email);

    [OperationContract]
    MemberResponse ByOpenId(string openId);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously with the actual service implementation and all that jazz.&lt;/p&gt;

&lt;h2&gt;Implementation with Service Stack&lt;/h2&gt;

&lt;p&gt;Now with Service Stack I would write that as a single service. This means I need a request class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MemberRequest
{
    public string Id { get; set; }
    public string OpenId { get; set; }
    public string Email { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; My 'Id' is a string because I'm using RavenDB and this is an a real example&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The next class,the Service itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MemberService : IService&amp;lt;MemberRequest&amp;gt;
{
    private IDocumentStore DocumentStore { get; set; }
    public MemberService(IDocumentStore documentStore)
    {
        DocumentStore = documentStore;
    }

    public object Execute(MemberRequest request)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now I have a Request and a Service. But the request is meant to handle what the WCF service with three methods was doing, so how is this implemented.&lt;/p&gt;

&lt;p&gt;Well rather than having three methods, I simply add the results to a collection and return the result.&lt;/p&gt;

&lt;p&gt;The full implementation of this service looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MemberService : IService&amp;lt;MemberRequest&amp;gt;
{
    private IDocumentStore DocumentStore { get; set; }
    public MemberService(IDocumentStore documentStore)
    {
        DocumentStore = documentStore;
    }

    public object Execute(MemberRequest request)
    {
        var result = new List&amp;lt;MemberResponse.Member&amp;gt;();

        using (var session = DocumentStore.OpenSession())
        {
            if (!string.IsNullOrWhiteSpace(request.Id))
            {
                var member = session.Load&amp;lt;Member&amp;gt;(request.Id);
                if (member != null)
                    result.Add(member.TranslateTo&amp;lt;MemberResponse.Member&amp;gt;());
            }

            if (!string.IsNullOrWhiteSpace(request.Email))
            {
                var member = session.Query&amp;lt;Member, All_Members&amp;gt;()
                                    .SingleOrDefault(x =&amp;gt; x.Email == request.Email);

                if (member != null)
                    result.Add(member.TranslateTo&amp;lt;MemberResponse.Member&amp;gt;());
            }

            if (!string.IsNullOrWhiteSpace(request.OpenId))
            {
                var member = session.Query&amp;lt;Member, All_Members&amp;gt;()
                                    .SingleOrDefault(x =&amp;gt; x.OpenId == request.OpenId);

                if (member != null &amp;amp;&amp;amp; member.OpenId.Equals(request.OpenId, StringComparison.Ordinal))
                    result.Add(member.TranslateTo&amp;lt;MemberResponse.Member&amp;gt;());
            }
        }

        return new MemberResponse { Results = result };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if I have any of the information defined on the request object, I simply query for it.&lt;/p&gt;

&lt;p&gt;Now if you're looking at the method you're probably thinking the same thing I thought when I first looked at something similar. How the fark do I query that? &lt;em&gt;Well I'll explain that soon&lt;/em&gt;. :)&lt;/p&gt;

&lt;p&gt;The last thing missing tho is the Response.&lt;/p&gt;

&lt;p&gt;There's a couple of things to note, in the code above I actually translate my Model to a DTO, this is done using the &lt;code&gt;TranslateTo&amp;lt;T&amp;gt;&lt;/code&gt; method. This maps the object from 1 object to another, providing the two models share similar properties. This is exactly the same as AutoMapper except it doesn't handle relationships.&lt;/p&gt;

&lt;p&gt;It is possible to handle relationships however and I'll demonstrate that in future posts.&lt;/p&gt;

&lt;p&gt;Now one thing that annoyed me with WCF was getting null objects as a response. The approach used here is I have a MemberResponse which has a collection of Results.&lt;/p&gt;

&lt;p&gt;The actual DTO looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MemberResponse : IHasResponseStatus
{
    public IEnumerable&amp;lt;Member&amp;gt; Results { get; set; }
    public class Member
    {
        public string Id { get; set; }
        public string OpenId { get; set; }
        public string DisplayName { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
    }

    public ResponseStatus ResponseStatus { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I like to use nested classes for the results because I can name it what it is, and modify it without breaking any other Response classes I make in the future.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The response implements the interface &lt;code&gt;IHasResponseStatus&lt;/code&gt; (which I think needs to be renamed to ICanHazResponseStatus) which provides the property ResponseStatus, this allows SS to attach it's own information about the response such as exception information.&lt;/p&gt;

&lt;p&gt;So rather than WCF where it just faults and throws exceptions and falls over and starts a fire, it just returns a response and gives you the information about it. AWESOME!&lt;/p&gt;

&lt;p&gt;Also I've added the Member as a collection so that I can have multiple results if I need, maybe I want to find a user who has an OpenId of 'xyz' and an email of 'abc' so I can link them. No need to write yet ANOTHER WCF method.&lt;/p&gt;

&lt;h2&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Configuration in WCF is always a pain in the ass, specially when dealing with message sizes, buffers, bindings and endpoints, so on and so forth somebody shoot me because WCF configuration is the bane of my existence.&lt;/p&gt;

&lt;p&gt;Configuring SS is so easy that I over configured it to begin with. While configuring SS I realised I can remove Autofac, AutoMapper and a bunch of configuration code. The end result was the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Global : System.Web.HttpApplication
{
    public class QueryServiceAppHost : AppHostBase
    {
        private readonly IContainerAdapter _containerAdapter;
        public QueryServiceAppHost(IDocumentStore documentStore)
            : base("ITCompiler Query Services", typeof(MemberService).Assembly)
        {
            base.Container.Register&amp;lt;IDocumentStore&amp;gt;(documentStore);

            base.SetConfig(new EndpointHostConfig { DebugMode = true });
        }

        public override void Configure(Funq.Container container)
        {
            container.Adapter = _containerAdapter;
        }
    }

    private static IDocumentStore DocumentStore { get; set; }

    public void Application_Start()
    {
        DocumentStore = ConfigureRavenDb();

        (new QueryServiceAppHost(DocumentStore)).Init();
    }

    private static IDocumentStore ConfigureRavenDb()
    {
        var documentStore = new DocumentStore
        {
            ConnectionStringName = "RavenDB",
            DefaultDatabase = "ITCompiler"
        }.Initialize();

        IndexCreation.CreateIndexes(typeof(All_Members).Assembly, documentStore);

        return documentStore;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I would show you the original configuration I had for WCF but you would probably freak out and run.&lt;/p&gt;

&lt;p&gt;But I've cut out Autofac, AutoMapper, and it's really just 'Configure RavenDB' and 'Initialize SS'&lt;/p&gt;

&lt;p&gt;I didn't touch the .config file, didn't do anything special to setup SS, simply created a AppHost class and registered my Document Store.&lt;/p&gt;

&lt;h2&gt;Querying the Services&lt;/h2&gt;

&lt;p&gt;The last piece to the puzzle was querying the newly written services. Usually with WCF I configure the ChannelFactory and then inject a new Channel for every controller that needs specific services.&lt;/p&gt;

&lt;p&gt;This caused a lot of configuration since each configured service has it's own endpoint I ended up with a lot of code.&lt;/p&gt;

&lt;p&gt;SS creates a reusable client for querying, and all it needs is the base URL of the service host.&lt;/p&gt;

&lt;p&gt;I first started just by creating a new client like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var client = new JsonServiceClient("http://localhost:9001");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I use the JSON service client but there's a few to choose from, XML, JSV, WCF, SOAP, etc.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now when calling the client I can specify the response and pass in a request, so lets say I wanted to get a use by email address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;client.Send&amp;lt;MemberResponse&amp;gt;(new MemberRequest
{
    Email = "bob@googlelymail.com"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sends a request, and works out which service to invoke, passes in the request, and returns the result.&lt;/p&gt;

&lt;p&gt;It couldn't be easier. If I wanted to find a user by Id, just pass a request with just the Id.&lt;/p&gt;

&lt;p&gt;Now I setup my application with two different projects, one for Queries, and one for Commands. So when I setup my client I just created two really simple classes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class QueryServiceClient : JsonServiceClient
{
    public QueryServiceClient(string url) : base(url) { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And another for Commands named CommandServiceClient.&lt;/p&gt;

&lt;p&gt;Then I registered them in Autofac (on the MVC site I'm still using Autofac)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterType&amp;lt;QueryServiceClient&amp;gt;()
       .WithParameter(new NamedParameter("url", QueryServicesUrl))
       .AsSelf()
       .SingleInstance();

builder.RegisterType&amp;lt;CommandServiceClient&amp;gt;()
       .WithParameter(new NamedParameter("url", CommandServicesUrl))
       .AsSelf()
       .SingleInstance();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can just inject those two service clients and reuse them over and over.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I had to change my way of thinking and to be honest, I threw in the towel pretty early on. But I stuck with it. I was lucky enough to have help from the creator himself, &lt;a href="http://www.twitter.com/demisbellot"&gt;@demisbellot&lt;/a&gt; in the &lt;a href="http://jabbr.net/#/rooms/servicestack"&gt;JabbR ServiceSack&lt;/a&gt; room.&lt;/p&gt;

&lt;p&gt;He was kind enough to answer all my woes and put me on the right path, regardless of how silly my questions probably were.&lt;/p&gt;

&lt;p&gt;After a little perseverance I'm now completely in love with Service Stack and I look forward to learning more of it's capabilities around Error Handling, REST, and Messaging.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/02/mvc-4-project-templates-are-stupid/</guid><link>http://www.philliphaydon.com/2012/02/mvc-4-project-templates-are-stupid/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>MVC 4 Project Templates are stupid</title><description>&lt;p&gt;&lt;em&gt;begin rant&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thought I would jump on the MVC 4 Beta bandwagon today, installed, create new project... And this is what I'm greeted with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;packages&amp;gt;
  &amp;lt;package id="AspNetMvc" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetRazor.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi.Core" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebPages.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="EntityFramework" version="4.1.10331.0" /&amp;gt;
  &amp;lt;package id="jQuery" version="1.6.2" /&amp;gt;
  &amp;lt;package id="jQuery.Ajax.Unobtrusive" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="jQuery.UI.Combined" version="1.8.11" /&amp;gt;
  &amp;lt;package id="jQuery.Validation" version="1.8.1" /&amp;gt;
  &amp;lt;package id="jQuery.Validation.Unobtrusive" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="knockoutjs" version="2.0.0.0" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Infrastructure" version="1.0.0.0" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Optimization" version="1.0.0-beta" /&amp;gt;
  &amp;lt;package id="Modernizr" version="2.0.6" /&amp;gt;
  &amp;lt;package id="System.Json" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http.Formatting" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Http.Common" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Providers" version="1.1" /&amp;gt;
  &amp;lt;package id="System.Web.Providers.Core" version="1.0" /&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is absolutely stupid...&lt;/p&gt;

&lt;p&gt;I select EMPTY project template.&lt;/p&gt;

&lt;p&gt;EMPTY&lt;/p&gt;

</description><pubDate>Sat, 18 Feb 2012 16:00:00 Z</pubDate><a10:updated>2012-02-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;em&gt;begin rant&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thought I would jump on the MVC 4 Beta bandwagon today, installed, create new project... And this is what I'm greeted with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;packages&amp;gt;
  &amp;lt;package id="AspNetMvc" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetRazor.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi.Core" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebPages.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="EntityFramework" version="4.1.10331.0" /&amp;gt;
  &amp;lt;package id="jQuery" version="1.6.2" /&amp;gt;
  &amp;lt;package id="jQuery.Ajax.Unobtrusive" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="jQuery.UI.Combined" version="1.8.11" /&amp;gt;
  &amp;lt;package id="jQuery.Validation" version="1.8.1" /&amp;gt;
  &amp;lt;package id="jQuery.Validation.Unobtrusive" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="knockoutjs" version="2.0.0.0" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Infrastructure" version="1.0.0.0" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Optimization" version="1.0.0-beta" /&amp;gt;
  &amp;lt;package id="Modernizr" version="2.0.6" /&amp;gt;
  &amp;lt;package id="System.Json" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http.Formatting" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Http.Common" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Providers" version="1.1" /&amp;gt;
  &amp;lt;package id="System.Web.Providers.Core" version="1.0" /&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is absolutely stupid...&lt;/p&gt;

&lt;p&gt;I select EMPTY project template.&lt;/p&gt;

&lt;p&gt;EMPTY&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So I removed the things I don't need to begin with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;
&amp;lt;packages&amp;gt;
  &amp;lt;package id="AspNetMvc" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetRazor.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebApi.Core" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="AspNetWebPages.Core" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Infrastructure" version="1.0.0.0" /&amp;gt;
  &amp;lt;package id="Microsoft.Web.Optimization" version="1.0.0-beta" /&amp;gt;
  &amp;lt;package id="System.Json" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http" version="2.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Net.Http.Formatting" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Http.Common" version="4.0.20126.16343" /&amp;gt;
  &amp;lt;package id="System.Web.Providers" version="1.1" /&amp;gt;
  &amp;lt;package id="System.Web.Providers.Core" version="1.0" /&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But beyond that I don't know if the rest can be removed or if it's required by MVC 4. Time for some trial and error :)&lt;/p&gt;

&lt;p&gt;I really hope MS decide to create a REAL empty project.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2012/01/ravendb-searching-across-multiple-properties/</guid><link>http://www.philliphaydon.com/2012/01/ravendb-searching-across-multiple-properties/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB - Searching across multiple properties</title><description>&lt;p&gt;Ayende recently posted about &lt;a href="http://ayende.com/blog/152833/orders-search-in-ravendb"&gt;Orders Search&lt;/a&gt; in RavenDB which got me a little bit excited, since I was pondering how I would do searching in RavenDB without having Full Text Searching from SQL Server.&lt;/p&gt;

&lt;p&gt;So digging into it I wanted to try it out for myself how to use it. Given the model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Post
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Tags { get; set; }
    public DateTime DatePosted { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've setup 10 posts (&lt;a href="http://pastie.org/3200462"&gt;click here for the insert pastie&lt;/a&gt;) just with some really basic data.&lt;/p&gt;

&lt;p&gt;So I'm going to detail here all the data that I've setup.&lt;/p&gt;

</description><pubDate>Tue, 17 Jan 2012 16:00:00 Z</pubDate><a10:updated>2012-01-17T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Ayende recently posted about &lt;a href="http://ayende.com/blog/152833/orders-search-in-ravendb"&gt;Orders Search&lt;/a&gt; in RavenDB which got me a little bit excited, since I was pondering how I would do searching in RavenDB without having Full Text Searching from SQL Server.&lt;/p&gt;

&lt;p&gt;So digging into it I wanted to try it out for myself how to use it. Given the model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Post
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public IEnumerable&amp;lt;string&amp;gt; Tags { get; set; }
    public DateTime DatePosted { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've setup 10 posts (&lt;a href="http://pastie.org/3200462"&gt;click here for the insert pastie&lt;/a&gt;) just with some really basic data.&lt;/p&gt;

&lt;p&gt;So I'm going to detail here all the data that I've setup.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;h2&gt;Tags&lt;/h2&gt;

&lt;table border="0" cellspacing="0" cellpadding="2" width="400"&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;&lt;strong&gt;Tag Name&lt;/strong&gt;&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;&lt;strong&gt;# of Posts Containing Tag&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;html&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;c#&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;ravendb&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;nhibernate&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;javascript&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;coffeescript&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;less&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;search&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;closures&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;jquery&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;css&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;queryover&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top" width="200"&gt;mapreduce&lt;/td&gt;
      &lt;td valign="top" width="200"&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;Titles&lt;/h2&gt;

&lt;p&gt;Nothing interesting, just 'Test Post X' for each one to identify them.&lt;/p&gt;

&lt;h2&gt;Description&lt;/h2&gt;

&lt;p&gt;Basically for this testing I've taken the blog post names of a few things from Google Reader, that some-way relate to the tags above. Take a look at the script mentioned above to see the data.&lt;/p&gt;

&lt;h2&gt;Creating the Index&lt;/h2&gt;

&lt;p&gt;So the first thing I want to do is create a Map with a Reduce Result, but we aren't going to add the Reduce to the index, since we don't need it to store that data or do anything with it. We purely want the Reduce Result that matches the map, so that we can query against it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Post_Search : AbstractIndexCreationTask&amp;lt;Post, Post_Search.ReduceResult&amp;gt;
{
    public class ReduceResult
    {
        public object[] SearchQuery { get; set; }
        public DateTime DatePosted { get; set; }
    }

    public Post_Search()
    {
        Map = posts =&amp;gt; 
              from post in posts
              select new 
              {
                  SearchQuery = post.Tags.Concat(new[]
                  {
                      post.Description,
                      post.Title
                  }),
                  DatePosted = post.DatePosted
              };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This index is a little bit funky, and differs from what Ayende showed in his example. I wanted to try something a little different.&lt;/p&gt;

&lt;p&gt;In my scenario I have a collection of Tag's that I wanted to include in the search, this the tags is already a collection, I concatenate the additional array of items I want to add into the map.&lt;/p&gt;

&lt;p&gt;The SearchQuery is the property that we will search against, while the DatePosted wont be included in the Search, but is there to provide additional filtering on my search.&lt;/p&gt;

&lt;h2&gt;Querying&lt;/h2&gt;

&lt;p&gt;Querying threw me off at first, because in order to query against this index, we have to specify the ReduceResult class.&lt;/p&gt;

&lt;p&gt;So we end up with the starting of our query looking like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post_Search.ReduceResult, Post_Search&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first I thought "oh, that means we end up with a ReduceResult result type, this is pointless and useless". But I commented on Ayende's blog post and it turns out we can call 'As&lt;T&gt;' on the query.&lt;/p&gt;

&lt;p&gt;Without filtering the results just yet, our query would look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post_Search.ReduceResult, Post_Search&amp;gt;()
                    .As&amp;lt;Post&amp;gt;()
                    .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if I run this up now, for a quick test, I should get 10 results back of type Post&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;So now I need to begin filtering out the results. To begin with I'm doing to use the .Where extension. Since we are looking an object array, we can't directly compare it to a string, but if we explicitly cast it to an object we can look for:&lt;/p&gt;

&lt;p&gt;coffeescript expecting 2 results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post_Search.ReduceResult, Post_Search&amp;gt;()
                    .Where(x =&amp;gt; x.SearchQuery == (object)"coffeescript")
                    .As&amp;lt;Post&amp;gt;()
                    .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;How about javascript expecting 2 (1 via Tag and 1 via the Description)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Oh, we didn't get the desired result... This is because the search is only doing a search on an exact match. Since the search value is an exact match of the tag, the result is returned.&lt;/p&gt;

&lt;p&gt;So to fix this we need to make the index analysed. Adding to the index:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Index(x =&amp;gt; x.SearchQuery, FieldIndexing.Analyzed);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run the exact same query again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now we get 2 results.&lt;/p&gt;

&lt;p&gt;Now to try something a little bit different, using 'Search', if we wanted to search for something like mvc which happens to only be in the description, rather than using 'Where' like shown above, we can use 'Search' like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post_Search.ReduceResult, Post_Search&amp;gt;()
                    .Search(x =&amp;gt; x.SearchQuery, "mvc")
                    .As&amp;lt;Post&amp;gt;()
                    .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will give us the same result, except it looks much cleaner&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;Now there's 1 catch I've found with this, which is searching is always an exact match. I'm not sure (no research done into lucene yet) if lucene has the ability to do a wild-card type search similar to SQL like: '%mvc%', but you can get suggestions from this.&lt;/p&gt;

&lt;p&gt;For example if I search for 'coffee' rather than 'coffeescript' I would expect all documents containing 'coffee' to be returned. This doesn't happen. It does give you suggestions though.&lt;/p&gt;

&lt;p&gt;Looking at the management studio for 'coffee' :&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-6.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Side Comment: I think it would be cool if RavenDB provided the ability to have say include suggestions, like:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post_Search.ReduceResult, Post_Search&amp;gt;()
                    .Search(x =&amp;gt; x.SearchQuery, "coffee")
                    .IncludeAllSuggestions()
                    .As&amp;lt;Post&amp;gt;()
                    .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or other variations such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.Suggestions.IncludeAll()&lt;/li&gt;
&lt;li&gt;.Suggestions.IncludeTop(3)&lt;/li&gt;
&lt;li&gt;.Suggestions.IncludeAll(WhenResults.AreEmpty)&lt;/li&gt;
&lt;li&gt;.Suggestions.IncludeAll(WhenResults.AreLessThan, 10)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you can work out where I'm going with this?&lt;/p&gt;

&lt;p&gt;Ok continuing on. Why do we need to call 'As&lt;T&gt;()' on the query?&lt;/p&gt;

&lt;p&gt;Well from my understanding of how RavenDB works is like this, when we create an index, it's creating a sub-set of data that points to the document in RavenDB.&lt;/p&gt;

&lt;p&gt;For example I have all those documents inserted (&lt;a href="http://pastie.org/3200462"&gt;link for the lazy&lt;/a&gt;), and these are all stored like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-7.png" /&gt;&lt;/p&gt;

&lt;p&gt;When we created the index with the following Map:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map = posts =&amp;gt; 
      from post in posts
      select new 
      {
          SearchQuery = post.Tags.Concat(new[]
          {
              post.Description,
              post.Title
          }),
          DatePosted = post.DatePosted
      };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It basically created an index that looks like this, for the data above:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td valign="top" rowspan="2" width="50"&gt;posts/2&lt;/td&gt;
      &lt;td valign="top" width="540"&gt;SearchQuery: ["c#", "nhibernate", "search", "queryover", "Benjamin Day slides us into "How to be a C# ninja in 10 easy steps"", "Test Post 2"&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td valign="top"&gt;DatePosted: "2012-01-02T00:00:00.0000000"&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So the index actually points directly to a Document in RavenDB, when we search against the index, if a match is found, the index returns the Id 'posts/2' back, and that knows to go to the posts collection and grab the document with Id 2.&lt;/p&gt;

&lt;p&gt;The problem with the query is we need to specify an object to query against.&lt;/p&gt;

&lt;p&gt;So we introduced the ReduceResult &lt;em&gt;(not sure on this naming but I took it from Ayende's blog)&lt;/em&gt;, this allows us to specify the Properties we defined in our index, as search criteria, but now our query is expecting ReduceResult:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-8.png" /&gt;&lt;/p&gt;

&lt;p&gt;By specifying as we are telling the query that our result is going to be a type of 'Post':&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-9.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This functionality is really cool, it allows us to easily search against multiple different properties without having to create messy conjunctions in our LINQ. If we were to attempt to do this without an index, we would probably end up writing something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Post&amp;gt;()
                    .Where(x =&amp;gt;
                            x.Description.Contains("c#")
                            ||
                            x.Tags.Any(y =&amp;gt; y == "c#")
                            ||
                            x.Title.Contains("c#")
                        )
                    .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And really, that's just nasty... Specially considering we get the same results for writing more readable code:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-searching-10.png" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/12/ravendb-map-reduce/</guid><link>http://www.philliphaydon.com/2011/12/ravendb-map-reduce/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB - Map Reduce</title><description>&lt;p&gt;So, learning Map Reduce in RavenDB I decided that to take what I learnt from the index created in my previous post. I think I picked something rather difficult to begin with, but I've succeeded &lt;/p&gt;

&lt;p&gt;Given a document Article which has a collection of Tags.&lt;/p&gt;

&lt;p&gt;I want to get a Count of each Tag across all Articles.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Content
{
    public int Id { get; set; }
    public string Title { get; set; }
    public IEnumerable&amp;lt;Tag&amp;gt; Tags { get; set; }
}

public class Tag
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Tag is it's own class because I added additional properties to it.&lt;/span&gt;&lt;/p&gt;

</description><pubDate>Wed, 21 Dec 2011 16:00:00 Z</pubDate><a10:updated>2011-12-21T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So, learning Map Reduce in RavenDB I decided that to take what I learnt from the index created in my previous post. I think I picked something rather difficult to begin with, but I've succeeded &lt;/p&gt;

&lt;p&gt;Given a document Article which has a collection of Tags.&lt;/p&gt;

&lt;p&gt;I want to get a Count of each Tag across all Articles.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Content
{
    public int Id { get; set; }
    public string Title { get; set; }
    public IEnumerable&amp;lt;Tag&amp;gt; Tags { get; set; }
}

public class Tag
{
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Tag is it's own class because I added additional properties to it.&lt;/span&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Now I insert some data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    session.Store(new Content
    {
        Title = "Test Title for a Video",
        Tags = new List&amp;lt;Tag&amp;gt;
        {
            new Tag() {Name = "c#"},
            new Tag() {Name = "autofac"},
            new Tag() {Name = "asp.net"},
        }
    });
    session.Store(new Content
    {
        Title = "Test Title for an Article",
        Tags = new List&amp;lt;Tag&amp;gt;
        {
            new Tag() {Name = "c#"},
            new Tag() {Name = "nhibernate"},
            new Tag() {Name = "fluent-nhibernate"},
            new Tag() {Name = "mvc"}
        }
    });
    session.Store(new Content
    {
        Title = "Test Title for an Article",
        Tags = new List&amp;lt;Tag&amp;gt;
        {
            new Tag() {Name = "ravendb"},
            new Tag() {Name = "asp.net"},
            new Tag() {Name = "autofac"},
            new Tag() {Name = "c#"}
        }
    });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I'm expecting a count of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 x c#&lt;/li&gt;
&lt;li&gt;2 x autofac&lt;/li&gt;
&lt;li&gt;2 x asp.net&lt;/li&gt;
&lt;li&gt;1 x ravendb&lt;/li&gt;
&lt;li&gt;1 x mvc&lt;/li&gt;
&lt;li&gt;1 x nhibernate&lt;/li&gt;
&lt;li&gt;1 x fluent-nhibernate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm going to pull these out with a defined type rather than dynamic/object, so I've created a new class with Count and Name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TagResult
{
    public int      Count   { get; set; }
    public string   Name    { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So creating a new Index:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class All_Tags : AbstractMultiMapIndexCreationTask&amp;lt;TagResult&amp;gt;
{
    public All_Tags()
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing I need to do is map out ONLY the Tag's, when I select out the Tag's, I'm also going to include another field called Count, with a default value of 1. This is so I can re-use it to sum the total number of times the tag is used.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AddMap&amp;lt;Content&amp;gt;(contents =&amp;gt; from content in contents
                            from tag in content.Tags
                            select new
                            {
                                Name = tag.Name,
                                Count = 1
                            });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would give me a result that contains duplicates for the tags. Along the lines of:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;c#&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;c#&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;c#&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;autofac&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;autofac&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;asp.net&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;asp.net&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ravendb&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;mvc&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;nhibernate&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;fluent-nhibernate&lt;/td&gt;
    &lt;td&gt;1&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;So what I need to do in the Reduce, is group the tags together by their Name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Reduce = results =&amp;gt; from result in results
                    group result by result.Name into tag
                    select new
                    {
                        Count = tag.Sum(x =&amp;gt; x.Count),
                        Name = tag.Key,
                    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So here, I group all the tags together by their name, but I also sum the 'count' value together to get the total number of times the tag is used.&lt;/p&gt;

&lt;p&gt;Now run up the app and view the index:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-map-reduce-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now if I query the index:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-map-reduce-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome. Now to query this, I have to use the TagResult class defined previously, and the All_Tags index just created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    var result = session.Query&amp;lt;TagResult, All_Tags&amp;gt;()
                        .ToList();
    foreach (var tag in result)
    {
        Console.WriteLine(tag.Count + " x " + tag.Name);
    }

    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this I get the following result:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-map-reduce-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The results I expected previously.&lt;/p&gt;

&lt;p&gt;So there you have it. Map Reduce.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/</guid><link>http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB Inheritance-Revisited</title><description>&lt;p&gt;So after my initial post on &lt;a href="http://www.philliphaydon.com/2011/12/ravendb-inheritance/"&gt;RavenDB Inheritance&lt;/a&gt;, and the issue I had with polymorphic queries, and seeking help from the guys in &lt;a href="http://jabbr.net/"&gt;JabbR&lt;/a&gt; and the (RavenDB Google Group)[http://groups.google.com/group/ravendb/browse_thread/thread/c71df8f1cd92e04c], &lt;a href="http://ayende.com/blog/"&gt;Ayende&lt;/a&gt; ended up doing a screen cast with me where he solved all my problems.&lt;/p&gt;

&lt;p&gt;One of the things he asked me was what I was trying to achieve by having a polymorphic query, which was a very good question, something I hadn't really thought about.&lt;/p&gt;

&lt;p&gt;The problem I was trying to solve was actually displaying search results.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;So I'm working on a personal project, and I need to display a few things which are similar, but different. There's 3 different types but I'll use two to keep it simple. I've also cut out most of the properties.&lt;/p&gt;

&lt;p&gt;So I have an abstract class Content, with two derived classes, Article and Video.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Content
{
    public int Id { get; set; }
    public string Title { get; set; }
    public DateTime DatePublished { get; set; }
}

public class Article : Content
{
    public string HtmlContent { get; set; }
}

public class Video : Content
{
    public string Description { get; set; }
    public string VideoUrl { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Tue, 13 Dec 2011 16:00:00 Z</pubDate><a10:updated>2011-12-13T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So after my initial post on &lt;a href="http://www.philliphaydon.com/2011/12/ravendb-inheritance/"&gt;RavenDB Inheritance&lt;/a&gt;, and the issue I had with polymorphic queries, and seeking help from the guys in &lt;a href="http://jabbr.net/"&gt;JabbR&lt;/a&gt; and the (RavenDB Google Group)[http://groups.google.com/group/ravendb/browse_thread/thread/c71df8f1cd92e04c], &lt;a href="http://ayende.com/blog/"&gt;Ayende&lt;/a&gt; ended up doing a screen cast with me where he solved all my problems.&lt;/p&gt;

&lt;p&gt;One of the things he asked me was what I was trying to achieve by having a polymorphic query, which was a very good question, something I hadn't really thought about.&lt;/p&gt;

&lt;p&gt;The problem I was trying to solve was actually displaying search results.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;So I'm working on a personal project, and I need to display a few things which are similar, but different. There's 3 different types but I'll use two to keep it simple. I've also cut out most of the properties.&lt;/p&gt;

&lt;p&gt;So I have an abstract class Content, with two derived classes, Article and Video.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Content
{
    public int Id { get; set; }
    public string Title { get; set; }
    public DateTime DatePublished { get; set; }
}

public class Article : Content
{
    public string HtmlContent { get; set; }
}

public class Video : Content
{
    public string Description { get; set; }
    public string VideoUrl { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Then I initialize the DocumentStore and store a couple of documents.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var documentStore =
    (new DocumentStore()
            {
                Url = "http://localhost:8080"
            }).Initialize();

using (var session = documentStore.OpenSession())
{
    session.Store(new Video
    {
        DatePublished = DateTime.Now,
        Description = "Test Description for a Video",
        Title = "Test Title for a Video",
        VideoUrl = "http://www.youtube.com/watch?v=PGz9GokDkkg"
    });

    session.Store(new Article
    {
        DatePublished = DateTime.Now,
        Title = "Test Title for an Article",
        HtmlContent = "Some content for the article..."
    });

    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time I'm not using the Convention to store the two documents as 'Content', rather I'm allowing it to store them as what they are. This gives me a result in Raven like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now if I query for Video:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    var result = session.Query&amp;lt;Video&amp;gt;().ToList();

    foreach (var content in result)
    {
        Console.WriteLine(content.Id);
        Console.WriteLine(content.Title);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I get the output of the first Document.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Likewise if I select 'Article' I get the Article document that I previously stored.&lt;/p&gt;

&lt;p&gt;So how do I get a list of Content?&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;So, the solution is really, really easy, it's an index.&lt;/p&gt;

&lt;p&gt;The first thing Ayende showed me was creating the index in RavenDB Management Studio, then he showed me doing it in code. I'm just going to show it done in code.&lt;/p&gt;

&lt;p&gt;I created a class called 'All_Content' (with an underscore) like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class All_Content : AbstractMultiMapIndexCreationTask
{
    public All_Content()
    {
        AddMap&amp;lt;Article&amp;gt;(articles =&amp;gt; from article in articles
                                    select new
                                    {
                                        article.Id,
                                        article.Title,
                                        article.DatePublished
                                    });

        AddMap&amp;lt;Video&amp;gt;(videos =&amp;gt; from video in videos
                                select new
                                {
                                    video.Id,
                                    video.Title,
                                    video.DatePublished
                                });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;It reminds me of writing a Union View in SQL Server in some ways.&lt;/em&gt; It basically maps to the Articles and Videos, but only selects the things I need. Those of which would actually be displayed to the screen or that are common between the two document types.&lt;/p&gt;

&lt;p&gt;Then I create the index right after I initialize the DocumentStore:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IndexCreation.CreateIndexes(typeof(All_Content).Assembly, documentStore);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates the index in RavenDB for me.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, even tho I specified the class index with an underscore, it converts it to All/Content, that's a really nice way of presenting it. I think it will go well for being able to create descriptive indexes in the future.&lt;/p&gt;

&lt;p&gt;And the index itself:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now I need to actually query against the index. That's also really really easy. When I specify the type, I can specify the index with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    var result = session.Query&amp;lt;Content, All_Content&amp;gt;().ToList();

    foreach (var content in result)
    {
        Console.WriteLine(content.Id);
        Console.WriteLine(content.Title);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I run this I get the output:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;The really interesting thing I found is that if I look at what's returned:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Are the correct CLR types that I originally defined. So I haven't lost all the additional fields by not defining them. I'm still learning but for now I assume it allows those fields to be searchable.&lt;/p&gt;

&lt;h2&gt;Extras&lt;/h2&gt;

&lt;p&gt;One of the additional things Ayende showed me was that you can include other documents that don't inherit from the base type. You can include those in the index map, and then rather than returning a concrete type, you can specify object, or dynamic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;dynamic, All_Content&amp;gt;().ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RavenDB is really powerful. It's truly amazing, and so much nicer to work with in .NET than other document databases like MongoDB.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/12/ravendb-inheritance/</guid><link>http://www.philliphaydon.com/2011/12/ravendb-inheritance/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB Inheritance</title><description>&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Updated solution: &lt;a href="http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/"&gt;http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Continuing my learning of RavenDB, I wanted to see how it handled Inheritance.&lt;/p&gt;

&lt;p&gt;I found: &lt;a href="http://ravendb.net/faq/polymorphic-indexes"&gt;http://ravendb.net/faq/polymorphic-indexes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which showed what to do allow you to select over all types of &lt;code&gt;Animal&lt;/code&gt; for the example shown. So I wanted to see what happens before and after using this method.&lt;/p&gt;

&lt;p&gt;So like the example shown I've created an &lt;code&gt;Animal&lt;/code&gt;, with a &lt;code&gt;Dog&lt;/code&gt; and &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Animal
{
    public int Id { get; set; }
    public string Name { get; set; }
}

public class Dog : Animal { }

public class Cat : Animal { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if I insert a Dog and Cat:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    session.Store(new Dog() { Name = "Test Dog" });
    session.Store(new Cat() { Name = "Test Cat" });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Fri, 09 Dec 2011 16:00:00 Z</pubDate><a10:updated>2011-12-09T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Updated solution: &lt;a href="http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/"&gt;http://www.philliphaydon.com/2011/12/ravendb-inheritance-revisited/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Continuing my learning of RavenDB, I wanted to see how it handled Inheritance.&lt;/p&gt;

&lt;p&gt;I found: &lt;a href="http://ravendb.net/faq/polymorphic-indexes"&gt;http://ravendb.net/faq/polymorphic-indexes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which showed what to do allow you to select over all types of &lt;code&gt;Animal&lt;/code&gt; for the example shown. So I wanted to see what happens before and after using this method.&lt;/p&gt;

&lt;p&gt;So like the example shown I've created an &lt;code&gt;Animal&lt;/code&gt;, with a &lt;code&gt;Dog&lt;/code&gt; and &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class Animal
{
    public int Id { get; set; }
    public string Name { get; set; }
}

public class Dog : Animal { }

public class Cat : Animal { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if I insert a Dog and Cat:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    session.Store(new Dog() { Name = "Test Dog" });
    session.Store(new Cat() { Name = "Test Cat" });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;What's stored in RavenDB is two separate documents, one for 'dogs' and one for 'cats'.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If I include the Convention.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var documentConvention =
    new DocumentConvention()
        {
            FindTypeTagName =
                type =&amp;gt;
                    {
                        if (typeof (Animal).IsAssignableFrom(type))
                            return "animals";
                        return DocumentConvention.DefaultTypeTagName(type);
                    }
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can do the conversion when the DocumentStore is initialized, I broke the two up so that it would fit easier into my blog. Otherwise it's too nested and yucky.&lt;/span&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var documentStore =
    (new DocumentStore()
            {
                Url = "http://localhost:8080",
                Conventions = documentConvention
            }).Initialize();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I insert a Dog and Cat I get:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Awesome. If we look at the document however:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;There is no information about it being a cat or dog, I thought it would add some sort of discriminator similar to how NHibernate works.&lt;/p&gt;

&lt;p&gt;However, if we look at the Metadata tab:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can see the CLR type is stored in the metadata so RavenDB knows what type to create when we query it.&lt;/p&gt;

&lt;p&gt;This means if we query for &lt;code&gt;Animal&lt;/code&gt; we get a list of Dogs and Cats.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = documentStore.OpenSession())
{
    var result = session.Query&amp;lt;Animal&amp;gt;();
    foreach (var animal in result)
    {
        Console.WriteLine(animal.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;However, if you wanted to query for just Dogs, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;Dog&amp;gt;().ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It doesn't seem to work :(&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-inheritance-revisited-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I'm probably just doing something wrong, either way, the more I play with RavenDB. The more I love it.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/12/post-a-collection-of-viewmodels-to-a-mvc-action-with-jquery/</guid><link>http://www.philliphaydon.com/2011/12/post-a-collection-of-viewmodels-to-a-mvc-action-with-jquery/</link><a10:author><a10:name /></a10:author><category>jQuery</category><title>Post a collection of ViewModel's to a MVC Action with jQuery</title><description>&lt;p&gt;Maybe I searched for the wrong thing, but I couldn't find what I was looking for :( My Bing and Google fu failed me.&lt;/p&gt;

&lt;p&gt;Basically I wanted to post a collection of ViewModels to an MCV action. Turns out it's rather simple.&lt;/p&gt;

&lt;p&gt;Lets say I have a bunch of Products, and Products are managed in a WarehouseLocation. A product doesn't have a warehouse location, since it could exist in multiple locations.&lt;/p&gt;

&lt;p&gt;If I'm currently working in Location A, I want to post a collection of Products to an action, as well as the WarehouseLocationId.&lt;/p&gt;

&lt;p&gt;So given a simple ViewModel, and an Action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductViewModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

</description><pubDate>Tue, 06 Dec 2011 16:00:00 Z</pubDate><a10:updated>2011-12-06T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Maybe I searched for the wrong thing, but I couldn't find what I was looking for :( My Bing and Google fu failed me.&lt;/p&gt;

&lt;p&gt;Basically I wanted to post a collection of ViewModels to an MCV action. Turns out it's rather simple.&lt;/p&gt;

&lt;p&gt;Lets say I have a bunch of Products, and Products are managed in a WarehouseLocation. A product doesn't have a warehouse location, since it could exist in multiple locations.&lt;/p&gt;

&lt;p&gt;If I'm currently working in Location A, I want to post a collection of Products to an action, as well as the WarehouseLocationId.&lt;/p&gt;

&lt;p&gt;So given a simple ViewModel, and an Action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductViewModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;public JsonResult Update(int warehouseLocationId, IEnumerable&amp;lt;ProductViewModel&amp;gt; products)
{
    //Do something with the products...
    return Json(new {Staus = "success"});
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think usually when someone sends data from jQuery it's usually a single parameter,so the JSON would look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var data = { id: 1,name: 'test name', price: 15.95 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would populate an action that looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public JsonResult Update(ProductViewModel product)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what I was faced with was passing in two parameters, one of which is a collection...&lt;/p&gt;

&lt;p&gt;MVC seems to pair up the posted result with the parameter name, in the same way they it does for Route parameters. So to the JSON needs to look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    warehouseLocationId: 12,
    products: [{
        Id: 1,
        Name: "Product 1",
        Price: 15.95
    }, {
        Id: 3,
        Name: "Product 2",
        Price: 12.50
    }]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the key's on the first level match the parameter names, while the array on products, match the ViewModel.&lt;/p&gt;

&lt;p&gt;Taking this exact data and posting it to the action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.ajax({
    type: 'POST',
    url: '@Url.Action("Update", "Home")',
    data: JSON.stringify(data),
    contentType: 'application/json',
    success: function(result) {
        //Do something with result...
    },
    dataType: 'json'
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I submit that, and with a breakpoint on my action I see:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;^ The warehouseLocationId...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;^ 2 products with the values:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The exact same data we defined in our JavaScript.&lt;/p&gt;

&lt;p&gt;The really cool thing about this, is you can have nested collections also. Using the same scenario, but extending Product to have a collection of Categories like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductViewModel
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
    public IEnumerable&amp;lt;Category&amp;gt; Categories { get; set; }
}

public class Category
{
    public int Id { get; set; }
    public string Name { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can update the JSON object to include Category information on 1 of the two products:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var data = {
    warehouseLocationId: 12,
    products: [{
        Id: 1,
        Name: "Product 1",
        Price: 15.95
    }, {
        Id: 3,
        Name: "Product 2",
        Price: 12.50,
        Categories: [{
            Id: 1,
            Name: "Category 1"
        }, {
            Id: 1,
            Name: "Category 2"
        }]
    }]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And submit that in the same way as before, capturing the results in the Action we get the first product with null for the categories, since we didn't define it as an empty array:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;While the second Product has 2 items, the first item is Category 1, and the second item is Category 2.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/jquery-mvc-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And that's it, easy peasy, sending a collection of ViewModels from jQuery to an MVC Action.&lt;/p&gt;

&lt;p&gt;I &amp;lt;3 MVC :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/11/optional-parameters-with-attributerouting/</guid><link>http://www.philliphaydon.com/2011/11/optional-parameters-with-attributerouting/</link><a10:author><a10:name /></a10:author><category>ASP.NET MVC</category><title>Optional Parameters with AttributeRouting</title><description>&lt;p&gt;I found a little trick with using Optional Parameters with &lt;a href="https://github.com/mccalltd/AttributeRouting/wiki/2.-Usage"&gt;AttributeRouting&lt;/a&gt;, by using standard optional parameters in the action.&lt;/p&gt;

&lt;p&gt;The documentation says you can add an attributes to specify the defaults, or add &lt;code&gt;=value&lt;/code&gt; to the parameter name, and I guess that's a more correct way to generate routes, but you can achieve the same affect by making the parameter optional. Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[GET("videos/{?page}")]
public ActionResult Videos(int page = 1)
{
    return View("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I browse to the URL:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It uses the default value of 1.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now when appending a number to the end of the URL:&lt;/p&gt;

</description><pubDate>Sat, 26 Nov 2011 16:00:00 Z</pubDate><a10:updated>2011-11-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I found a little trick with using Optional Parameters with &lt;a href="https://github.com/mccalltd/AttributeRouting/wiki/2.-Usage"&gt;AttributeRouting&lt;/a&gt;, by using standard optional parameters in the action.&lt;/p&gt;

&lt;p&gt;The documentation says you can add an attributes to specify the defaults, or add &lt;code&gt;=value&lt;/code&gt; to the parameter name, and I guess that's a more correct way to generate routes, but you can achieve the same affect by making the parameter optional. Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[GET("videos/{?page}")]
public ActionResult Videos(int page = 1)
{
    return View("Result");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I browse to the URL:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It uses the default value of 1.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now when appending a number to the end of the URL:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It captures the correct value:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/attribute-routing-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I prefer this method, the optional parameter on the action is more quickly identified, than looking at the attribute to see the defaults. (in my opinion)&lt;/p&gt;

&lt;p&gt;Ahh AttributeRouting, how I love you.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/11/split-windows-web-workbench-win/</guid><link>http://www.philliphaydon.com/2011/11/split-windows-web-workbench-win/</link><a10:author><a10:name /></a10:author><title>Split Windows + Web Workbench = Win</title><description>&lt;p&gt;One of the cool features of the &lt;a href="http://www.mindscapehq.com/products/web-workbench/"&gt;Web Workbench&lt;/a&gt; from Mindscape is the ability to generate the output files. Prior to using the Web Workbench I was using &lt;a href="http://www.dotlesscss.org/"&gt;.LESS{}&lt;/a&gt; which uses an HTTP Handler to generate the output files for LESS.&lt;/p&gt;

&lt;p&gt;The problem with this is sometimes I would write some CSS and not realise I missed something only to find my site doesn't display anything, then I have to figure out what I did wrong.&lt;/p&gt;

&lt;p&gt;With the Web Workbench, and it's ability to generate the files every time I save, makes me less error prone.&lt;/p&gt;

&lt;p&gt;But the most efficient way of working with it I found (when writing a lot of CSS in 1 sitting) is to split my windows so the first window has where I'm writing, and the second window has the generated CSS file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If I make an error on the left side:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I see the error on the right.&lt;/p&gt;

&lt;p&gt;If I make a change to the left, (added a background colour) i see the change on the right.&lt;/p&gt;

</description><pubDate>Sat, 26 Nov 2011 16:00:00 Z</pubDate><a10:updated>2011-11-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One of the cool features of the &lt;a href="http://www.mindscapehq.com/products/web-workbench/"&gt;Web Workbench&lt;/a&gt; from Mindscape is the ability to generate the output files. Prior to using the Web Workbench I was using &lt;a href="http://www.dotlesscss.org/"&gt;.LESS{}&lt;/a&gt; which uses an HTTP Handler to generate the output files for LESS.&lt;/p&gt;

&lt;p&gt;The problem with this is sometimes I would write some CSS and not realise I missed something only to find my site doesn't display anything, then I have to figure out what I did wrong.&lt;/p&gt;

&lt;p&gt;With the Web Workbench, and it's ability to generate the files every time I save, makes me less error prone.&lt;/p&gt;

&lt;p&gt;But the most efficient way of working with it I found (when writing a lot of CSS in 1 sitting) is to split my windows so the first window has where I'm writing, and the second window has the generated CSS file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If I make an error on the left side:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I see the error on the right.&lt;/p&gt;

&lt;p&gt;If I make a change to the left, (added a background colour) i see the change on the right.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This makes it really handy when applying nested rules. Such as nesting a hover rule to an anchor tag. Sometimes I forget to include the colon.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/split-screen-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Maybe in the next version of the Web Bench, Mindscape can include side-by-side windows that scroll with each other :) Tho it would be difficult depending on how much CSS was generated. Would still be a nice feature.&lt;/p&gt;

&lt;p&gt;Either way, the Web Workbench is a tool that can't be missed.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/11/unit-of-work-with-wcf-and-autofac/</guid><link>http://www.philliphaydon.com/2011/11/unit-of-work-with-wcf-and-autofac/</link><a10:author><a10:name /></a10:author><title>Unit of Work with WCF and Autofac</title><description>&lt;p&gt;I've just spent the last few days trying to find a way to have a Unit of Work with WCF, but it seems no one has a nice clean easy solution.&lt;/p&gt;

&lt;p&gt;The first, and the only decent solution I found was here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ianfnelson.com/archives/2010/04/09/wcf-nhibernate-unit-of-work-endpoint-behavior"&gt;http://ianfnelson.com/archives/2010/04/09/wcf-nhibernate-unit-of-work-endpoint-behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem I found with this solution is that the ICallContextInitializer as well as the EndpointBehavior is only created once. So it would seem all calls to a service would share the same Unit of Work instance.&lt;/p&gt;

&lt;p&gt;Maybe Castle Windsor does something fancy and injects a brand new &lt;code&gt;EndpointBehavior&lt;/code&gt; every request to a service, but for me, it seemed the &lt;code&gt;ServiceBehavior&lt;/code&gt;, &lt;code&gt;EndpointBehavior&lt;/code&gt;, and &lt;code&gt;ICallContextInitializer&lt;/code&gt; were all created once.&lt;/p&gt;

&lt;p&gt;This caused my service to resolve a different instance of &lt;code&gt;IUnitOfWork&lt;/code&gt; to what was in the &lt;code&gt;ICallContextInitializer&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Interim Solution 1&lt;/h2&gt;

&lt;p&gt;The first solution I came up with was to use Autofac to call Commit on release:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterType(typeof (UnitOfWork))
        .As(typeof (IUnitOfWork))
        .InstancePerLifetimeScope()
        .OnRelease(x =&amp;gt;
                        {
                            ((IUnitOfWork) x).Commit();
                        });
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sat, 05 Nov 2011 16:00:00 Z</pubDate><a10:updated>2011-11-05T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I've just spent the last few days trying to find a way to have a Unit of Work with WCF, but it seems no one has a nice clean easy solution.&lt;/p&gt;

&lt;p&gt;The first, and the only decent solution I found was here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ianfnelson.com/archives/2010/04/09/wcf-nhibernate-unit-of-work-endpoint-behavior"&gt;http://ianfnelson.com/archives/2010/04/09/wcf-nhibernate-unit-of-work-endpoint-behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem I found with this solution is that the ICallContextInitializer as well as the EndpointBehavior is only created once. So it would seem all calls to a service would share the same Unit of Work instance.&lt;/p&gt;

&lt;p&gt;Maybe Castle Windsor does something fancy and injects a brand new &lt;code&gt;EndpointBehavior&lt;/code&gt; every request to a service, but for me, it seemed the &lt;code&gt;ServiceBehavior&lt;/code&gt;, &lt;code&gt;EndpointBehavior&lt;/code&gt;, and &lt;code&gt;ICallContextInitializer&lt;/code&gt; were all created once.&lt;/p&gt;

&lt;p&gt;This caused my service to resolve a different instance of &lt;code&gt;IUnitOfWork&lt;/code&gt; to what was in the &lt;code&gt;ICallContextInitializer&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Interim Solution 1&lt;/h2&gt;

&lt;p&gt;The first solution I came up with was to use Autofac to call Commit on release:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterType(typeof (UnitOfWork))
        .As(typeof (IUnitOfWork))
        .InstancePerLifetimeScope()
        .OnRelease(x =&amp;gt;
                        {
                            ((IUnitOfWork) x).Commit();
                        });
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;It works...  but it seemed like a real hack, so I kept digging.&lt;/p&gt;

&lt;p&gt;I posted on &lt;a href="http://stackoverflow.com/questions/7989918/using-a-custom-endpoint-behavior-with-wcf-and-autofac"&gt;StackOverflow&lt;/a&gt; &amp;amp; &lt;a href="http://groups.google.com/group/autofac/browse_thread/thread/7310498aea634abd"&gt;Autofac Google Group&lt;/a&gt;, but so far I haven't had anyone suggest a good solution.&lt;/p&gt;

&lt;h2&gt;Solution 2&lt;/h2&gt;

&lt;p&gt;The next took a while to come up with.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I don't know if this is an appropriate solution for utilizing a Unit of Work with WCF. It works for me but if there is a better solution I would like to hear it.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I started by giving all my classes an interface called IService.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IService
{
    IUnitOfWork UnitOfWork { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My Service implements this interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WasteInventoryQueryService : IWasteInventoryQueryService, IService
{
    public IUnitOfWork UnitOfWork { get; set; }
    public IWasteStockRepository WasteStockRepository { get; set; }
    public WasteInventoryQueryService(IUnitOfWork unitOfWork, IWasteStockRepository wasteStockRepository)
    {
        UnitOfWork = unitOfWork;
        WasteStockRepository = wasteStockRepository;
    }

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I created some behaviours similar to the linked article.&lt;/p&gt;

&lt;p&gt;Since finding that the ServiceBehavior, EndpointBehavior and ICallContextInitializer all are created once, I started at the ServiceBehavior.&lt;/p&gt;

&lt;p&gt;I created a class called EndpointResolverServiceBehavior, it's purpose is to inject all the endpoint behaviours I create.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class EndpointResolverServiceBehavior : IServiceBehavior
{
    protected IEnumerable&amp;lt;IEndpointBehavior&amp;gt; EndpointBehaviors { get; set; }
    public EndpointResolverServiceBehavior(IEnumerable&amp;lt;IEndpointBehavior&amp;gt; endpointBehaviors)
    {
        EndpointBehaviors = endpointBehaviors;
    }

    #region Implementation of IServiceBehavior

    public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
    {
    }

    public void AddBindingParameters(ServiceDescription serviceDescription, 
        ServiceHostBase serviceHostBase, 
        Collection&amp;lt;ServiceEndpoint&amp;gt; endpoints, 
        BindingParameterCollection bindingParameters)
    {
    }

    public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
    {
        foreach (var endpoint in serviceDescription.Endpoints)
        {
            foreach (var endpointBehavior in EndpointBehaviors)
            {
                endpoint.Behaviors.Add(endpointBehavior);
            }
        }
    }

    #endregion
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I created an EndpointBehavior called UnitOfWorkEndpointBehavior, it's purpose is to add the ICallContextInitializer instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UnitOfWorkEndpointBehavior : IEndpointBehavior
{
    public void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
    {
    }
    public void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)
    {
    }

    public void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher)
    {
        foreach (DispatchOperation operation in endpointDispatcher.DispatchRuntime.Operations)
        {
            operation.CallContextInitializers.Add(new UnitOfWorkCallContextInitializer());
        }
    }

    public void Validate(ServiceEndpoint endpoint)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then is the ICallContextInitializer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class UnitOfWorkCallContextInitializer : ICallContextInitializer
{
    private PropertyInfo _userObjectInfo;
    private readonly BindingFlags _flags = BindingFlags.NonPublic | BindingFlags.Instance;
    public object BeforeInvoke(InstanceContext instanceContext, IClientChannel channel, Message message)
    {
        if (_userObjectInfo == null)
            _userObjectInfo = instanceContext.GetType()
                                                .GetProperty("UserObject", _flags);

        return _userObjectInfo.GetValue(instanceContext, null) as IService;
    }

    public void AfterInvoke(object correlationState)
    {
        var uow = correlationState as IService;

        if (uow != null)
            uow.UnitOfWork.Commit();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While debugging I found out that the InstanceContext has a private property which has the current service attached to it:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/uow-autofac-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/uow-autofac-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(click the image for a larger view)&lt;/p&gt;

&lt;p&gt;So I reflected the property and casted it to an IService, and return the result. When the service has been invoked, the result passed out of the 'BeforeInvoke' method, is passed into the 'AfterInvoke'.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/uow-autofac-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So basically I return the result from the BeforeInvoke which is passed into the AfterInvoke. Then I attempt to cast it to an IService again.&lt;/p&gt;

&lt;p&gt;If the cast is successful, then I can call Commit on my UnitOfWork.&lt;/p&gt;

&lt;p&gt;The last piece is to wire up the Behavior with Autofac.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;builder.RegisterType(typeof(UnitOfWorkEndpointBehavior)).As(typeof(IEndpointBehavior));
builder.RegisterType(typeof(EndpointResolverServiceBehavior)).As(typeof(IServiceBehavior));

Container = builder.Build();

AutofacHostFactory.Container = Container;
AutofacHostFactory.HostConfigurationAction =
    host =&amp;gt;
    {
        host.Description.Behaviors.Add(Container.Resolve&amp;lt;IServiceBehavior&amp;gt;());
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it's done. I have a working Unit of Work, that is injected into my Service and Committed after the service has been invoked.&lt;/p&gt;

&lt;p&gt;The only down-side I see to all of this, is that if an exception is thrown that I don't capture, then the UoW will still be committed regardless.&lt;/p&gt;

&lt;p&gt;If anyone has any better solutions, let me know! :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/11/windows-phone-windows-live-and-msn/</guid><link>http://www.philliphaydon.com/2011/11/windows-phone-windows-live-and-msn/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Windows Phone, Windows Live and MSN</title><description>&lt;p&gt;Windows Phone 7.5 has been getting some awesome reviews, and rightly so. The thing is amazing. I really think Microsoft has begun leading the way for the mobile platform.&lt;/p&gt;

&lt;p&gt;But I'm highly pissed off with the Windows Phone team. Why? &lt;strong&gt;Because to use MSN, your msn contacts must be associated with the first live account you register to the phone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don't even know what to say about this, it's so silly. I understand that it might get confusing to allow multiple Facebook accounts, multiple Windows Live accounts, etc.&lt;/p&gt;

&lt;p&gt;But could they not allow you to choose which account MSN contacts are associated to?&lt;/p&gt;

&lt;p&gt;When I first setup my phone I didn't use the Windows Live account I use for MSN (my Hotmail) since it's existed since 1997, it's got 100's of contacts I don't want in my phone-book, a lot of MSN contacts exist from work, or playing online games, or from forums etc. So I used the Windows Live account that I use for MSDN. I added all my contacts and everything was great, (after I imported all my contacts from outlook into Windows Live Contacts)&lt;/p&gt;

</description><pubDate>Tue, 01 Nov 2011 16:00:00 Z</pubDate><a10:updated>2011-11-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Windows Phone 7.5 has been getting some awesome reviews, and rightly so. The thing is amazing. I really think Microsoft has begun leading the way for the mobile platform.&lt;/p&gt;

&lt;p&gt;But I'm highly pissed off with the Windows Phone team. Why? &lt;strong&gt;Because to use MSN, your msn contacts must be associated with the first live account you register to the phone.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don't even know what to say about this, it's so silly. I understand that it might get confusing to allow multiple Facebook accounts, multiple Windows Live accounts, etc.&lt;/p&gt;

&lt;p&gt;But could they not allow you to choose which account MSN contacts are associated to?&lt;/p&gt;

&lt;p&gt;When I first setup my phone I didn't use the Windows Live account I use for MSN (my Hotmail) since it's existed since 1997, it's got 100's of contacts I don't want in my phone-book, a lot of MSN contacts exist from work, or playing online games, or from forums etc. So I used the Windows Live account that I use for MSDN. I added all my contacts and everything was great, (after I imported all my contacts from outlook into Windows Live Contacts)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I attached my Facebook account, went to People &gt; Settings &gt; Filter Contacts, and turned off Facebook so they do not show in my normal contacts list. This allows me to have normal phone users, but see the Facebook users on the Messaging list.&lt;/p&gt;

&lt;p&gt;Now I want to show MSN contacts, so I load up the next Windows Live account, it loads all my contacts, but when I go to messaging, I get NOTHING. No MSN users at all.&lt;/p&gt;

&lt;p&gt;On my second Windows Phone (yes I have two) I reformatted it, and signed it up on my Hotmail Windows Live account, and what do I see? All my MSN contacts.&lt;/p&gt;

&lt;p&gt;Ok so the team didn't give us the option to select which Live account we can use for MSN... So I went to download IM+&lt;/p&gt;

&lt;h2&gt;DEAD END&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;ATTENTION MSN/WLM users! MSN/WLM is not supported in 1.7 version of IM+ due to Microsoft Marketplace request. If you would like to continue using MSN/WLM in IM+, do not update to 1.7 version from version 1.2. We will continue working on this situation with Microsoft.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WTF... So not only can I not use MSN on my phone natively. The team has blocked anyone else from providing the feature in their own applications...&lt;/p&gt;

&lt;p&gt;That's not fair at all.&lt;/p&gt;

&lt;p&gt;Microsoft should be ashamed.&lt;/p&gt;

&lt;p&gt;So as it stands, if you don't use your MSN account as your Windows Phone account, you can't use MSN.&lt;/p&gt;

&lt;p&gt;Microsoft is definitely leading the way in Mobile platform, but they massively screwed up MSN for many users.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/10/ravendb-changing-the-lo-on-the-hilo-generator/</guid><link>http://www.philliphaydon.com/2011/10/ravendb-changing-the-lo-on-the-hilo-generator/</link><a10:author><a10:name /></a10:author><category>RavenDB</category><title>RavenDB - Changing the Lo on the HiLo Generator</title><description>&lt;p&gt;Well I'm currently learning RavenDB, it's awesome! But I noticed when I put data in, all the Id's generated every time I ran up my application to test were:&lt;/p&gt;

&lt;p&gt;1, 2, 3, 4, 5...&lt;/p&gt;

&lt;p&gt;1024, 1025, 1026, 1027, 1028...&lt;/p&gt;

&lt;p&gt;2048, 2049, 2050, 2051, 2052...&lt;/p&gt;

&lt;p&gt;This would be fine after the app is deployed since I wouldn't be restarting it over and over and over, but during development I personally find it annoying that the numbers jump so high.&lt;/p&gt;

&lt;p&gt;Fortunately I figured out a way. (which about an hour later I found on Google Groups, granted I had to use a different keyword to find it)&lt;/p&gt;

&lt;p&gt;Basically you just need to create a new instance of the &lt;code&gt;MultiTypeHiLoKeyGenerator&lt;/code&gt; class, passing in the arguments and assigning it to the document store:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var documentStore = (new DocumentStore { 
    Url = "http://localhost:12321/" 
}).Initialize();

var generator = new MultiTypeHiLoKeyGenerator(documentStore, 10);

documentStore.Conventions.DocumentKeyGenerator = 
    entity =&amp;gt; generator.GenerateDocumentKey(documentStore.Conventions, entity);

using (var session = documentStore.OpenSession())
{
    session.Store(new Project() { Title = "Hello World" });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So running up my app once:&lt;/p&gt;

</description><pubDate>Sun, 23 Oct 2011 16:00:00 Z</pubDate><a10:updated>2011-10-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Well I'm currently learning RavenDB, it's awesome! But I noticed when I put data in, all the Id's generated every time I ran up my application to test were:&lt;/p&gt;

&lt;p&gt;1, 2, 3, 4, 5...&lt;/p&gt;

&lt;p&gt;1024, 1025, 1026, 1027, 1028...&lt;/p&gt;

&lt;p&gt;2048, 2049, 2050, 2051, 2052...&lt;/p&gt;

&lt;p&gt;This would be fine after the app is deployed since I wouldn't be restarting it over and over and over, but during development I personally find it annoying that the numbers jump so high.&lt;/p&gt;

&lt;p&gt;Fortunately I figured out a way. (which about an hour later I found on Google Groups, granted I had to use a different keyword to find it)&lt;/p&gt;

&lt;p&gt;Basically you just need to create a new instance of the &lt;code&gt;MultiTypeHiLoKeyGenerator&lt;/code&gt; class, passing in the arguments and assigning it to the document store:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var documentStore = (new DocumentStore { 
    Url = "http://localhost:12321/" 
}).Initialize();

var generator = new MultiTypeHiLoKeyGenerator(documentStore, 10);

documentStore.Conventions.DocumentKeyGenerator = 
    entity =&amp;gt; generator.GenerateDocumentKey(documentStore.Conventions, entity);

using (var session = documentStore.OpenSession())
{
    session.Store(new Project() { Title = "Hello World" });
    session.SaveChanges();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So running up my app once:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-hilo-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And again:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-hilo-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now the identity only increases every time the app restarts. And to show it generates more than 1 number...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/ravendb-hilo-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It took a while of hunting on the net, but it turns out Googling &amp;amp; Binging, or searching (StackOverflow/Google Groups) for the keyword &lt;code&gt;Lo&lt;/code&gt; doesn't work, the argument is &lt;code&gt;capacity&lt;/code&gt; and searching for that on Google Groups lead me here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://groups.google.com/group/ravendb/browse_thread/thread/95a5b33a5d30eb71/a5197e2e01376e65?lnk=gst&amp;amp;q=capacity#a5197e2e01376e65"&gt;http://groups.google.com/group/ravendb/browse_thread/thread/95a5b33a5d30eb71/a5197e2e01376e65?lnk=gst&amp;amp;q=capacity#a5197e2e01376e65&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully someone else finds this useful :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/10/nhibernate-designer-2/</guid><link>http://www.philliphaydon.com/2011/10/nhibernate-designer-2/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>NHibernate Designer 2</title><description>&lt;p&gt;The guys at MindScape have released their next version of NHibernate Designer, which now supports Fluent NHibernate and a whole heap of new features.&lt;/p&gt;

&lt;p&gt;They also dropped the price down to just $99!&lt;/p&gt;

&lt;p&gt;I recommend checking it out&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2011/10/19/nhibernate-designer-2-is-here/"&gt;http://www.mindscapehq.com/blog/index.php/2011/10/19/nhibernate-designer-2-is-here/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/products/nhdesigner"&gt;http://www.mindscapehq.com/products/nhdesigner&lt;/a&gt;&lt;/p&gt;
</description><pubDate>Wed, 19 Oct 2011 16:00:00 Z</pubDate><a10:updated>2011-10-19T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;The guys at MindScape have released their next version of NHibernate Designer, which now supports Fluent NHibernate and a whole heap of new features.&lt;/p&gt;

&lt;p&gt;They also dropped the price down to just $99!&lt;/p&gt;

&lt;p&gt;I recommend checking it out&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2011/10/19/nhibernate-designer-2-is-here/"&gt;http://www.mindscapehq.com/blog/index.php/2011/10/19/nhibernate-designer-2-is-here/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/products/nhdesigner"&gt;http://www.mindscapehq.com/products/nhdesigner&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/10/website-folder-structure-css-files-does-anyone-care-i-do/</guid><link>http://www.philliphaydon.com/2011/10/website-folder-structure-css-files-does-anyone-care-i-do/</link><a10:author><a10:name /></a10:author><title>Website Folder Structure? CSS Files? Does anyone care? I do...</title><description>&lt;p&gt;When we build website's, more often than not we have: Separation of Concerns. Even if at most it's just basic 3-tier Architecture&lt;/p&gt;

&lt;p&gt;What annoys me though is a lot of time no one ever thinks about separation of concerns when it comes to the folder structure of their website, and where things go.&lt;/p&gt;

&lt;h2&gt;Folders&lt;/h2&gt;

&lt;p&gt;The one thing that annoys me above all else, is when 'layout images' (images for layout, design, styling etc) of the website, are shoved into the same folder that holds what I call "Content Images".&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/ 
root/css/ 
root/images/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I prefer to do is structure it so the css folder has it's own images folder, specifically for layout images.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/ 
root/css/ 
root/css/images/ 
root/images
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sun, 16 Oct 2011 16:00:00 Z</pubDate><a10:updated>2011-10-16T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;When we build website's, more often than not we have: Separation of Concerns. Even if at most it's just basic 3-tier Architecture&lt;/p&gt;

&lt;p&gt;What annoys me though is a lot of time no one ever thinks about separation of concerns when it comes to the folder structure of their website, and where things go.&lt;/p&gt;

&lt;h2&gt;Folders&lt;/h2&gt;

&lt;p&gt;The one thing that annoys me above all else, is when 'layout images' (images for layout, design, styling etc) of the website, are shoved into the same folder that holds what I call "Content Images".&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/ 
root/css/ 
root/images/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What I prefer to do is structure it so the css folder has it's own images folder, specifically for layout images.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/ 
root/css/ 
root/css/images/ 
root/images
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;To take it a step further, I often have images, icons, and fonts.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root/ 
root/css/ 
root/css/fonts/ 
root/css/icons/ 
root/css/images/ 
root/images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way I don't have to worry about finding specific icons in a folder full of images, I don't have to worry about sifting through images to find ones related to the layout/design, they are all neatly tucked away in their own specific areas.&lt;/p&gt;

&lt;p&gt;When it comes to folder structure however, NuGet gets in the way.&lt;/p&gt;

&lt;p&gt;It would be nice if it allowed you to specify where file types should go. At the moment 'css' files seem to go into 'Content'. JavaScript files go into 'Scripts'. But what I would rather have is all lower-case names, and 'css' rather than 'content'. Until then, I just download those sort of dependencies manually and create my own folder structure.&lt;/p&gt;

&lt;h2&gt;CSS&lt;/h2&gt;

&lt;p&gt;The next thing that I find annoying is the God Style Sheet. It's the StyleSheet that people name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Styles.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's the only one that exists in the project, it's over 100k in size, no comments, no christmas trees. Just lines and lines of fail.&lt;/p&gt;

&lt;p&gt;The approach I used to take (before finding .LESS) was creating multiple StyleSheets that were small and easy to maintain, sometimes I would end up with up to 12, possibly more depending on the size of the website.&lt;/p&gt;

&lt;p&gt;Each StyleSheet would be responsible for a specific task, so I would have something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/css/reset.css (this is just one of those many reset StyleSheets found on the net) 
/css/layout.css 
/css/main.css 
/css/header.css 
/css/footer.css 
/css/main-navigation.css 
/css/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When sections of the website were broken down like this, it did require flicking between StyleSheets now-n-then, but they became much smaller and easier to maintain. I also became far-less at risk of Unwanted Side Effects.&lt;/p&gt;

&lt;p&gt;Now with .LESS and LESS, it's easy to have only a few StyleSheets, since now you can tab within a specific region and continue to write styles that only apply to that region.&lt;/p&gt;

&lt;p&gt;For example, given a Footer element. You could come up with something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;footer {
    border-top: 2px #182a33 solid;
    padding-top: 30px;
    nav {
        a {
            font-family: @footer-link-font;
            font-size: @footer-link-size;
            color: @footer-link-color;
            text-decoration: none;
            &amp;amp;:hover {
                color: @footer-link-color-hover;
                text-decoration: underline;
            }    
        }
        li &amp;gt; span {
            color: @footer-text-color;
            font-family: @footer-text-font;
            font-size: @footer-text-size;
        }
        h4 {
            color: @footer-heading-color;
            font-family: @footer-heading-font;
            font-size: @footer-heading-size;
            font-weight: bold;
            margin-bottom: 35px;
            padding-top: 17px;
        }
        &amp;gt; ul &amp;gt; li {
            width: 165px;
            float: left;
            display: block;
            line-height: 18px;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would in turn generate the following CSS for you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;footer {
  border-top: 2px #182a33 solid;
  padding-top: 30px;
}
footer nav a {
  font-family: arial;
  font-size: 12px;
  color: #00adee;
  text-decoration: none;
}
footer nav a:hover {
  color: #00adee;
  text-decoration: underline;
}
footer nav li &amp;gt; span {
  color: #a8a8a8;
  font-family: arial;
  font-size: 12px;
}
footer nav h4 {
  color: white;
  font-family: arial;
  font-size: 16px;
  font-weight: bold;
  margin-bottom: 35px;
  padding-top: 17px;
}
footer nav &amp;gt; ul &amp;gt; li {
  width: 165px;
  float: left;
  display: block;
  line-height: 18px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I find it much easier to manage writing 'LESS' then traditional CSS.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I didn't want to go into too much detail, my main point is I think people should put a little more thought into how they structure their folders, files, naming, etc when creating websites. We focus so much time on trying to main our applications and code maintainable, but somehow neglect the website itself, and after a while we just end up fighting with it.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/09/the-benefits-of-letting-the-orm-generate-the-identity-part-1/</guid><link>http://www.philliphaydon.com/2011/09/the-benefits-of-letting-the-orm-generate-the-identity-part-1/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>The benefits of letting the ORM generate the Identity (part 1)</title><description>&lt;p&gt;One thing I've learnt is that letting the database generate the identity for you is a bad thing. It always annoyed me that Oracle never gave a feature like &lt;a href="http://dev.mysql.com/doc/refman/5.0/en/example-auto-increment.html"&gt;AUTO_INCREMENT&lt;/a&gt; in MySQL or &lt;a href="http://msdn.microsoft.com/en-us/library/aa933196(SQL.80).aspx"&gt;IDENTITY&lt;/a&gt; in SQL Server. I never understood, when inserting data how do I give it an Id?&lt;/p&gt;

&lt;p&gt;Well one of the benefits of ORMs such as NHibernate is we can generate the identity our-self, or rather, the ORM can generate it so we don't rely on the database. This also plays a major part in our code base when we insert a graph or batch of data and how the identity is added to our object.&lt;/p&gt;

&lt;p&gt;Ayende &lt;a href="http://ayende.com/blog/3915/nhibernate-avoid-identity-generator-when-possible"&gt;recommend avoiding identity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing with using SQL Server"s identity is that we need to select the identity back out after we do an insert. Not only that, when using &lt;a href="http://msdn.microsoft.com/en-us/library/ms190348.aspx"&gt;NEWID()&lt;/a&gt;/&lt;a href="http://msdn.microsoft.com/en-us/library/ms189786.aspx"&gt;NEWSEQUENTIALID()&lt;/a&gt; there is no way to select the value back other than using all the fields in a select in order to get the GUID relates to the record with all those values matching.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;Given this rather simple table using IDENTITY.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE People
(
    Id int NOT NULL IDENTITY (1, 1) PRIMARY KEY,
    FirstName nvarchar(100) NOT NULL,
    Surname nvarchar(100) NOT NULL
)
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Wed, 21 Sep 2011 16:00:00 Z</pubDate><a10:updated>2011-09-21T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One thing I've learnt is that letting the database generate the identity for you is a bad thing. It always annoyed me that Oracle never gave a feature like &lt;a href="http://dev.mysql.com/doc/refman/5.0/en/example-auto-increment.html"&gt;AUTO_INCREMENT&lt;/a&gt; in MySQL or &lt;a href="http://msdn.microsoft.com/en-us/library/aa933196(SQL.80).aspx"&gt;IDENTITY&lt;/a&gt; in SQL Server. I never understood, when inserting data how do I give it an Id?&lt;/p&gt;

&lt;p&gt;Well one of the benefits of ORMs such as NHibernate is we can generate the identity our-self, or rather, the ORM can generate it so we don't rely on the database. This also plays a major part in our code base when we insert a graph or batch of data and how the identity is added to our object.&lt;/p&gt;

&lt;p&gt;Ayende &lt;a href="http://ayende.com/blog/3915/nhibernate-avoid-identity-generator-when-possible"&gt;recommend avoiding identity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing with using SQL Server"s identity is that we need to select the identity back out after we do an insert. Not only that, when using &lt;a href="http://msdn.microsoft.com/en-us/library/ms190348.aspx"&gt;NEWID()&lt;/a&gt;/&lt;a href="http://msdn.microsoft.com/en-us/library/ms189786.aspx"&gt;NEWSEQUENTIALID()&lt;/a&gt; there is no way to select the value back other than using all the fields in a select in order to get the GUID relates to the record with all those values matching.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;Given this rather simple table using IDENTITY.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE People
(
    Id int NOT NULL IDENTITY (1, 1) PRIMARY KEY,
    FirstName nvarchar(100) NOT NULL,
    Surname nvarchar(100) NOT NULL
)
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;And I'll demo with NEWID() as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE Fruit
(
    Id uniqueidentifier NOT NULL PRIMARY KEY DEFAULT (NEWID()),
    Name nvarchar(100) NOT NULL
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; I'm unaware of anyway to get NHibernate to use NEWSEQUENTIALID()&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;We map these in NHibernate like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class PersonMap : ClassMap&amp;lt;Person&amp;gt;
{
    public PersonMap()
    {
        Table("People");
        Id(x =&amp;gt; x.Id).GeneratedBy.Identity();
        Map(x =&amp;gt; x.FirstName);
        Map(x =&amp;gt; x.Surname);
    }
}

public class FruitMap : ClassMap&amp;lt;Fruit&amp;gt;
{
    public FruitMap()
    {
        Table("Fruit");
        Id(x =&amp;gt; x.Id).GeneratedBy.GuidNative();

        Map(x =&amp;gt; x.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we insert data into People and Fruit like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var tx = session.BeginTransaction())
{
    var person = new Person
    {
        FirstName = "Phillip",
        Surname = "Haydon"
    };

    var fruit = new Fruit
    {
        Name = "Apple"
    };

    session.SaveOrUpdate(person);
    session.SaveOrUpdate(fruit);

    tx.Commit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get the following statement's run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
INSERT INTO People
            (FirstName,
             Surname)
VALUES      ('Phillip' /* @p0 */,
             'Haydon' /* @p1 */);

select SCOPE_IDENTITY()

- statement #3
select newid()

- statement #4
INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple' /* @p0 */,
             '3411c820-f9cc-4385-97a1-31cf7e7c612c' /* @p1 */)

- statement #5
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What's interesting is for the Identity, we have to select the SCOPE_IDENTITY() back after the insert so that we can populate the Person object, and for the Fruit object, we have to select NEWID() first as a separate statement, then add it to the business object, and commit it.&lt;/p&gt;

&lt;p&gt;This round-trip to the database in order to get the GUID first before doing the insert is completely unnecessary, not to mention has a performance impact.&lt;/p&gt;

&lt;p&gt;Inserting 50,000 items for each, with the batch-size set to 50, yields the following:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;IDENTITY&lt;/td&gt;
    &lt;td&gt;28951&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;NEWID&lt;/td&gt;
    &lt;td&gt;30241&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;(value in milliseconds)&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These benchmarks are quick-nasty benchmarks and were only run once.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The interesting thing is neither IDENTITY or NEWID batched any of the insert statements together, they were all issued as separate statements.&lt;/p&gt;

&lt;p&gt;(re-run the test inserting 3 to show SQL output)&lt;/p&gt;

&lt;p&gt;The 'Person' insert looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
INSERT INTO People
            (FirstName,
             Surname)
VALUES      ('Phillip0' /* @p0 */,
             'Haydon' /* @p1 */);

select SCOPE_IDENTITY()

- statement #3
INSERT INTO People
            (FirstName,
             Surname)
VALUES      ('Phillip1' /* @p0 */,
             'Haydon' /* @p1 */);

select SCOPE_IDENTITY()

- statement #4
INSERT INTO People
            (FirstName,
             Surname)
VALUES      ('Phillip2' /* @p0 */,
             'Haydon' /* @p1 */);

select SCOPE_IDENTITY()

- statement #5
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each insert has to be done 1 by 1, since it needs to select the identity back.&lt;/p&gt;

&lt;p&gt;The 'Fruit' table on the other hand:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
select newid()

- statement #3
select newid()

- statement #4
select newid()

- statement #5
INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple0' /* @p0_0 */,
             '269bc638-74b4-4568-85d1-45b6e537fcbd' /* @p1_0 */)

INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple1' /* @p0_1 */,
             'fc848779-b173-4c31-b8b6-0a7735c0c2dc' /* @p1_1 */)

INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple2' /* @p0_2 */,
             '232c8971-18c7-486d-9152-26c969c3b632' /* @p1_2 */)

- statement #6
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It select 50,000 GUIDs first, then it issues all the insert statement's in batches of 50.&lt;/p&gt;

&lt;p&gt;Now lets look at HiLo and GuidComb (GuidComb is a Sequencial Guid, but NH also allows normal Guids), two ways of generating identities in the ORM rather than the database.&lt;/p&gt;

&lt;p&gt;The tables are the same as before, except they don't have 'IDENTITY' or a Default Value.&lt;/p&gt;

&lt;p&gt;The mappings have been updated to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Id(x =&amp;gt; x.Id).GeneratedBy.HiLo("100");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Id(x =&amp;gt; x.Id).GeneratedBy.GuidComb();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running a single insert for both results in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
Reading high value: 
select next_hi
from   hibernate_unique_key with (updlock, rowlock)

- statement #3
Updating high value: 
update hibernate_unique_key
set    next_hi = 2 /* @p0 */
where  next_hi = 1 /* @p1 */

- statement #4
INSERT INTO People
            (FirstName,
             Surname,
             Id)
VALUES      ('Phillip' /* @p0_0 */,
             'Haydon' /* @p1_0 */,
             101 /* @p2_0 */)

- statement #5
INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple' /* @p0_0 */,
             '3229618e-bd8a-45ae-8ad5-9f660016980d' /* @p1_0 */)

- statement #6
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Besides NHibernate getting the first Hi value for use in the HiLo algorithm, both insert statement did not require selecting or generating any identity, it was all done in NHibernate.&lt;/p&gt;

&lt;p&gt;This makes inserting 3 'Person' much more efficient:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
Reading high value: 
select next_hi
from   hibernate_unique_key with (updlock, rowlock)

- statement #3
Updating high value: 
update hibernate_unique_key
set    next_hi = 3 /* @p0 */
where  next_hi = 2 /* @p1 */

- statement #4
INSERT INTO People
            (FirstName,
             Surname,
             Id)
VALUES      ('Phillip0' /* @p0_0 */,
             'Haydon' /* @p1_0 */,
             202 /* @p2_0 */)

INSERT INTO People
            (FirstName,
             Surname,
             Id)
VALUES      ('Phillip1' /* @p0_1 */,
             'Haydon' /* @p1_1 */,
             203 /* @p2_1 */)

INSERT INTO People
            (FirstName,
             Surname,
             Id)
VALUES      ('Phillip2' /* @p0_2 */,
             'Haydon' /* @p1_2 */,
             204 /* @p2_2 */)

- statement #5
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3 insert's done as a single batch statement.&lt;/p&gt;

&lt;p&gt;And inserting 3 Fruit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
begin transaction with isolation level: Unspecified

- statement #2
INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple0' /* @p0_0 */,
             'db902160-edbb-49c7-bf52-9f660018299a' /* @p1_0 */)

INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple1' /* @p0_1 */,
             '5e852528-3a6f-41d2-a6b1-9f660018299a' /* @p1_1 */)

INSERT INTO Fruit
            (Name,
             Id)
VALUES      ('Apple2' /* @p0_2 */,
             '2f63c6e8-e595-4393-ad15-9f660018299a' /* @p1_2 */)

- statement #3
commit transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, 3 insert's done as a single batch statement.&lt;/p&gt;

&lt;p&gt;If we run 50,000 inserts again:&lt;/p&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;HiLo&lt;/td&gt;
    &lt;td&gt;9287&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;GuidComb&lt;/td&gt;
    &lt;td&gt;9060&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;That is over 3 times faster!&lt;/p&gt;

&lt;p&gt;So as you can see, for just doing batch inserting, with a full Session (rather than stateless) and allowing the ORM to generate identities, we can significantly improve performance.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators-part-2/</guid><link>http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators-part-2/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Fluent NHibernate - Table Inheritance - Discriminators (Part 2)</title><description>&lt;p&gt;This is part two, to my post about &lt;a href="http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators/"&gt;Table Inheritance using Discriminators&lt;/a&gt;, in this post I just want to demonstrate the outcome when the sub-classes have their own properties, or possibly a property that maps to the same column.&lt;/p&gt;

&lt;p&gt;First thing however is Mark Perry pointed out in the comments that specifying a value for the baseClassDiscriminator will force it to store the value in the database as an INT rather than a a VARCHAR.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DiscriminateSubClassesOnColumn("PostType", 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create the table with an INT like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table WallPost (
  Id         UNIQUEIDENTIFIER   not null,
  PostType   INT   not null,
  DatePosted DATETIME   null,
  Title      NVARCHAR(255)   null,
  Content    NVARCHAR(255)   null,
    primary key ( Id ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe INT is too big however, maybe we only want a SMALLINT? That will give us 32k sub-classes...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DiscriminateSubClassesOnColumn("PostType", (short)0);
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sun, 21 Aug 2011 16:00:00 Z</pubDate><a10:updated>2011-08-21T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;This is part two, to my post about &lt;a href="http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators/"&gt;Table Inheritance using Discriminators&lt;/a&gt;, in this post I just want to demonstrate the outcome when the sub-classes have their own properties, or possibly a property that maps to the same column.&lt;/p&gt;

&lt;p&gt;First thing however is Mark Perry pointed out in the comments that specifying a value for the baseClassDiscriminator will force it to store the value in the database as an INT rather than a a VARCHAR.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DiscriminateSubClassesOnColumn("PostType", 0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will create the table with an INT like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table WallPost (
  Id         UNIQUEIDENTIFIER   not null,
  PostType   INT   not null,
  DatePosted DATETIME   null,
  Title      NVARCHAR(255)   null,
  Content    NVARCHAR(255)   null,
    primary key ( Id ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe INT is too big however, maybe we only want a SMALLINT? That will give us 32k sub-classes...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DiscriminateSubClassesOnColumn("PostType", (short)0);
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;
&lt;!-- --&gt;

&lt;pre&gt;&lt;code&gt;PostType   SMALLINT   not null,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But even that is too many, so maybe we need TINYINT, that gives us 0-255. I doubt you would ever have 255 sub-classes, so we can specify the discriminator as a byte.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DiscriminateSubClassesOnColumn("PostType", (byte)0);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that gives us:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table WallPost (
  Id         UNIQUEIDENTIFIER   not null,
  PostType   TINYINT   not null,
  DatePosted DATETIME   null,
  Title      NVARCHAR(255)   null,
  Content    NVARCHAR(255)   null,
    primary key ( Id ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nice, much better.&lt;/p&gt;

&lt;p&gt;Not to mention when querying now, it uses the INT value rather than the number being used as a string like before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT this_.Id         as Id0_0_,
       this_.DatePosted as DatePosted0_0_,
       this_.Title      as Title0_0_,
       this_.Content    as Content0_0_
FROM   WallPost this_
WHERE  this_.PostType = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the next thing I want to show is what happens when we add a property to 1 sub-class and not the other. (or properties than exist in 1, and properties that exist in the other)&lt;/p&gt;

&lt;p&gt;Give the same example as my previous post, I've added one property to the class, a 'Url' property.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-table-inheritance-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This will get created as a normal column in the database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table WallPost (
  Id         UNIQUEIDENTIFIER   not null,
  PostType   TINYINT   not null,
  DatePosted DATETIME   null,
  Title      NVARCHAR(255)   null,
  Content    NVARCHAR(255)   null,
  Url        NVARCHAR(255)   null,
    primary key ( Id ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we insert now, a LinkShare and a Text wallpost:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var wallPost = new TextWallPost
{
    DatePosted = DateTime.Now,
    Title = "My First Wall Post",
    Content = "Is Awesome!"
};

var linkPost = new LinkShareWallPost()
{
    DatePosted = DateTime.Now,
    Title = "My First Link Share",
    Content = "Is Awesome!",
    Url = "http://www.philliphaydon.com/"
};

session.Save(wallPost);
session.Save(linkPost);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The link share one will include the Url.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
INSERT INTO WallPost
           (DatePosted,
            Title,
            Content,
            PostType,
            Id)
VALUES     ('2011-08-21T23:53:10.00' /* @p0 */,
            'My First Wall Post' /* @p1 */,
            'Is Awesome!' /* @p2 */,
            1,
            '2dc7981b-507b-4d36-8ecc-9f460189a27d' /* @p3 */)

- statement #2
INSERT INTO WallPost
           (DatePosted,
            Title,
            Content,
            Url,
            PostType,
            Id)
VALUES     ('2011-08-21T23:53:10.00' /* @p0 */,
            'My First Link Share' /* @p1 */,
            'Is Awesome!' /* @p2 */,
            'http://www.philliphaydon.com/' /* @p3 */,
            2,
            '5edfe0f2-e179-4615-88e4-9f460189a284' /* @p4 */)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The 'Url' column must be null, or have a default value assigned to it so that when inserting a Text wallpost, the column doesn't need to be specified.&lt;/p&gt;

&lt;p&gt;If we query for the base class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.QueryOver&amp;lt;WallPost&amp;gt;().List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will query for all columns:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT this_.Id         as Id0_0_,
       this_.DatePosted as DatePosted0_0_,
       this_.Title      as Title0_0_,
       this_.Content    as Content0_0_,
       this_.Url        as Url0_0_,
       this_.PostType   as PostType0_0_
FROM   WallPost this_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like it did before. No changes, likewise if we query for just the Text wallpost, it will not include the 'Url' column:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.QueryOver&amp;lt;TextWallPost&amp;gt;().List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Results in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT this_.Id         as Id0_0_,
       this_.DatePosted as DatePosted0_0_,
       this_.Title      as Title0_0_,
       this_.Content    as Content0_0_
FROM   WallPost this_
WHERE  this_.PostType = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we query for the LinkShare wall post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.QueryOver&amp;lt;LinkShareWallPost&amp;gt;().List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in the 'Url' column being selected:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT this_.Id         as Id0_0_,
       this_.DatePosted as DatePosted0_0_,
       this_.Title      as Title0_0_,
       this_.Content    as Content0_0_,
       this_.Url        as Url0_0_
FROM   WallPost this_
WHERE  this_.PostType = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So NHibernate is efficient in that it only queries for what it actually needs. If you extend your sub-classes out to have a couple of properties each then they will only query for the required fields for that sub-class.&lt;/p&gt;

&lt;p&gt;It is possible for sub-classes to share properties. For example if introduced a new sub-class, MovieShare, which has a VideoUrl, as well as a SiteUrl property:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-table-inheritance-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can map the classes like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextWallPostMap : SubclassMap&amp;lt;TextWallPost&amp;gt;
{
    public TextWallPostMap()
    {
        DiscriminatorValue(1);
    }
}

public class LinkShareWallPostMap : SubclassMap&amp;lt;LinkShareWallPost&amp;gt;
{
    public LinkShareWallPostMap()
    {
        DiscriminatorValue(2);

        Map(x =&amp;gt; x.Url).Column("Url");
    }
}

public class MovieShareWallPostMap : SubclassMap&amp;lt;MovieShareWallPost&amp;gt;
{
    public MovieShareWallPostMap()
    {
        DiscriminatorValue(3);

        Map(x =&amp;gt; x.SiteUrl).Column("Url");
        Map(x =&amp;gt; x.VideoUrl).Column("VideoUrl");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the table is created, 'Url' column is only created once:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table WallPost (
  Id         UNIQUEIDENTIFIER   not null,
  PostType   TINYINT   not null,
  DatePosted DATETIME   null,
  Title      NVARCHAR(255)   null,
  Content    NVARCHAR(255)   null,
  Url        NVARCHAR(255)   null,
  VideoUrl   NVARCHAR(255)   null,
    primary key ( Id ))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we insert:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var wallPost = new TextWallPost
{
    DatePosted = DateTime.Now,
    Title = "My First Wall Post",
    Content = "Is Awesome!"
};

var linkPost = new LinkShareWallPost()
{
    DatePosted = DateTime.Now,
    Title = "My First Link Share",
    Content = "Is Awesome!",
    Url = "http://www.philliphaydon.com/"
};

var moviePost = new MovieShareWallPost()
{
    DatePosted = DateTime.Now,
    Title = "My First Movie Share",
    Content = "Is Awesome!",
    SiteUrl = "http://www.philliphaydon.com/",
    VideoUrl = "http://www.youtube.com/watch?v=GaoLU6zKaws"
};

session.Save(wallPost);
session.Save(linkPost);
session.Save(moviePost);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The insert will share the same 'Url' column for both the LinkShare, and the MovieShare:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- statement #1
INSERT INTO WallPost
           (DatePosted,
            Title,
            Content,
            PostType,
            Id)
VALUES     ('2011-08-22T00:22:05.00' /* @p0 */,
            'My First Wall Post' /* @p1 */,
            'Is Awesome!' /* @p2 */,
            1,
            '0e9cef50-d609-4a62-8909-9f47000611cb' /* @p3 */)

- statement #2
INSERT INTO WallPost
           (DatePosted,
            Title,
            Content,
            Url,
            PostType,
            Id)
VALUES     ('2011-08-22T00:22:05.00' /* @p0 */,
            'My First Link Share' /* @p1 */,
            'Is Awesome!' /* @p2 */,
            'http://www.philliphaydon.com/' /* @p3 */,
            2,
            '8deb343e-941f-4ae1-aba7-9f47000611d0' /* @p4 */)

- statement #3
INSERT INTO WallPost
           (DatePosted,
            Title,
            Content,
            Url,
            VideoUrl,
            PostType,
            Id)
VALUES     ('2011-08-22T00:22:05.00' /* @p0 */,
            'My First Movie Share' /* @p1 */,
            'Is Awesome!' /* @p2 */,
            'http://www.philliphaydon.com/' /* @p3 */,
            'http://www.youtube.com/watch?v=GaoLU6zKaws' /* @p4 */,
            3,
            '6bc80750-3fb2-4830-bccf-9f47000611d0' /* @p5 */)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And querying is still as it was before. No changes.&lt;/p&gt;

&lt;p&gt;One really important thing to remember is. You cannot change a type from 1 type to another, meaning you cannot change a LinkShare to a MovieShare. Any sub-class you create should never have any reason to change, if for some reason it DOES change, you should delete it, and create a new one.&lt;/p&gt;

&lt;p&gt;By that I mean delete the object, and insert a new one of the specified sub-class. While it is possible to use native SQL to change the discriminator value, there's no way to do it in HQL, Criteria, LINQ, or QueryOver, because it's just wrong. If it needs to change, you probably need to re-think your domain and persistence.&lt;/p&gt;

&lt;p&gt;Next post will be about Table per Sub-Class mapping.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/08/nhibernate-work-around-is-not-really-a-work-around/</guid><link>http://www.philliphaydon.com/2011/08/nhibernate-work-around-is-not-really-a-work-around/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>NHibernate Work-Around is not really a Work-Around...</title><description>&lt;p&gt;Over the weekend I came across a blog post about NHibernate, and an apparent work-around for a feature not supported by NHibernate.&lt;/p&gt;

&lt;p&gt;The original post can be found here: &lt;a href="http://www.arrangeactassert.com/nhibernate-linq-workaround-for-system-notsupportedexception/"&gt;nHibernate LINQ workaround for System.NotSupportedException&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically the author wanted to write something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 5, 8, 13 };

using (var session = factory.OpenSession())
{
    var result = from f in session.Query&amp;lt;NHFruit&amp;gt;()
                 join i in fruitIds
                     on f.Id equals i
                 select f;

    foreach (var fruit in result)
        Console.WriteLine(fruit.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the query joins to a list of Ids to filter the results out. This however, happens to throw an exception:&lt;/p&gt;

</description><pubDate>Sun, 14 Aug 2011 16:00:00 Z</pubDate><a10:updated>2011-08-14T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Over the weekend I came across a blog post about NHibernate, and an apparent work-around for a feature not supported by NHibernate.&lt;/p&gt;

&lt;p&gt;The original post can be found here: &lt;a href="http://www.arrangeactassert.com/nhibernate-linq-workaround-for-system-notsupportedexception/"&gt;nHibernate LINQ workaround for System.NotSupportedException&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically the author wanted to write something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 5, 8, 13 };

using (var session = factory.OpenSession())
{
    var result = from f in session.Query&amp;lt;NHFruit&amp;gt;()
                 join i in fruitIds
                     on f.Id equals i
                 select f;

    foreach (var fruit in result)
        Console.WriteLine(fruit.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the query joins to a list of Ids to filter the results out. This however, happens to throw an exception:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-workaround-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Normally this sort of query would be written like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 5, 8, 13 };

using (var session = factory.OpenSession())
{
    var result = from f in session.Query&amp;lt;NHFruit&amp;gt;()
                 where fruitIds.Contains(f.Id)
                 select f;

    foreach (var fruit in result)
        Console.WriteLine(fruit.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This generates an 'in' clause in the SQL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select nhfruit0_.Id   as Id0_,
       nhfruit0_.Name as Name0_
from   Fruit nhfruit0_
where  nhfruit0_.Id in (5 /* @p0 */,8 /* @p1 */,13 /* @p2 */)
Nice and clean, pretty standard SQL.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I must admit when I first read his code I made the assumption that it would actually pull ALL results into memory, and do the join in memory.&lt;/p&gt;

&lt;p&gt;I commented on his blog with the following comment:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don"t see how this is a "work-around" your first attempt at the query is attempting to join something in memory, to something still in the database. Thats clearly not, and will never be a supported feature of NHibernate... The second query is passing a list of ID"s into the database to use for comparison.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the time of writing the comment, I was a bit annoyed. The author replied:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Never be supported in NHibernate... well it works using Entity Framework and that's why I consider it to be a workaround.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So lets give it a go.&lt;/p&gt;

&lt;p&gt;Give the following query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 5, 8, 13 };

using (var ctx = new EFTestEntities())
{
    var result = from f in ctx.Fruits
                 join i in fruitIds
                     on f.Id equals i
                 select f;

    foreach (var fruit in result)
        Console.WriteLine(fruit.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The exact same as the attempt in NHibernate, it generates the following SQL...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT [Extent1].[Id]   AS [Id],
       [Extent1].[Name] AS [Name]
FROM   [dbo].[Fruit] AS [Extent1]
       INNER JOIN (SELECT [UnionAll1].[C1] AS [C1]
                   FROM   (SELECT 5 AS [C1]
                           FROM   (SELECT 1 AS X) AS [SingleRowTable1]
                           UNION ALL
                           SELECT 8 AS [C1]
                           FROM   (SELECT 1 AS X) AS [SingleRowTable2]) AS [UnionAll1]
                   UNION ALL

                   SELECT 13 AS [C1]
                   FROM   (SELECT 1 AS X) AS [SingleRowTable3]) AS [UnionAll2]
         ON [Extent1].[Id] = [UnionAll2].[C1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WTF.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-workaround-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It creates a select statement, for each value that you want to select... I thought "oh ok, i wonder what the execution plan looks like for that, compared to a normal in-clause from NHibernate.&lt;/p&gt;

&lt;p&gt;Using both the queries already shown above, showing the actual execution plans, I get the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-workaround-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Wow... But it gets better, I have 20 records in my database, and I thought, what happens if my list of Ids contains 10 different ids:&lt;/p&gt;

&lt;p&gt;Same queries, but with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entity Framework (I don't even want to paste this in here...):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT [Extent1].[Id]   AS [Id],
       [Extent1].[Name] AS [Name]
FROM   [dbo].[Fruit] AS [Extent1]
       INNER JOIN (SELECT [UnionAll8].[C1] AS [C1]
                   FROM   (SELECT [UnionAll7].[C1] AS [C1]
                           FROM   (SELECT [UnionAll6].[C1] AS [C1]
                                   FROM   (SELECT [UnionAll5].[C1] AS [C1]
                                           FROM   (SELECT [UnionAll4].[C1] AS [C1]
                                                   FROM   (SELECT [UnionAll3].[C1] AS [C1]
                                                           FROM   (SELECT [UnionAll2].[C1] AS [C1]
                                                                   FROM   (SELECT [UnionAll1].[C1] AS [C1]
                                                                           FROM   (SELECT 2 AS [C1]
                                                                                   FROM   (SELECT 1 AS X) AS [SingleRowTable1]
                                                                                   UNION ALL
                                                                                   SELECT 4 AS [C1]
                                                                                   FROM   (SELECT 1 AS X) AS [SingleRowTable2]) AS [UnionAll1]
                                                                           UNION ALL

                                                                           SELECT 6 AS [C1]
                                                                           FROM   (SELECT 1 AS X) AS [SingleRowTable3]) AS [UnionAll2]
                                                                   UNION ALL

                                                                   SELECT 8 AS [C1]
                                                                   FROM   (SELECT 1 AS X) AS [SingleRowTable4]) AS [UnionAll3]
                                                           UNION ALL

                                                           SELECT 10 AS [C1]
                                                           FROM   (SELECT 1 AS X) AS [SingleRowTable5]) AS [UnionAll4]
                                                   UNION ALL

                                                   SELECT 12 AS [C1]
                                                   FROM   (SELECT 1 AS X) AS [SingleRowTable6]) AS [UnionAll5]
                                           UNION ALL

                                           SELECT 14 AS [C1]
                                           FROM   (SELECT 1 AS X) AS [SingleRowTable7]) AS [UnionAll6]
                                   UNION ALL

                                   SELECT 16 AS [C1]
                                   FROM   (SELECT 1 AS X) AS [SingleRowTable8]) AS [UnionAll7]
                           UNION ALL

                           SELECT 18 AS [C1]
                           FROM   (SELECT 1 AS X) AS [SingleRowTable9]) AS [UnionAll8]
                   UNION ALL

                   SELECT 20 AS [C1]
                   FROM   (SELECT 1 AS X) AS [SingleRowTable10]) AS [UnionAll9]
         ON [Extent1].[Id] = [UnionAll9].[C1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NHibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select nhfruit0_.Id   as Id0_,
       nhfruit0_.Name as Name0_
from   Fruit nhfruit0_
where  nhfruit0_.Id in (2 /* @p0 */,4 /* @p1 */,6 /* @p2 */,8 /* @p3 */,
                        10 /* @p4 */,12 /* @p5 */,14 /* @p6 */,16 /* @p7 */,
                        18 /* @p8 */,20 /* @p9 */)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if you run with the execution plans, (I pressed execute 10 times before taking this screenshot)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-workaround-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The more parameters you add, the slower it gets.&lt;/p&gt;

&lt;p&gt;You can't blame Entity Framework though. EF supports the same query as NHibernate!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fruitIds = new List&amp;lt;int&amp;gt; { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };

using (var ctx = new EFTestEntities())
{
    var result = from f in ctx.Fruits
                 where fruitIds.Contains(f.Id)
                 select f;

    foreach (var fruit in result)
        Console.WriteLine(fruit.Name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entity Framework generates the following query:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT [Extent1].[Id]   AS [Id],
       [Extent1].[Name] AS [Name]
FROM   [dbo].[Fruit] AS [Extent1]
WHERE  [Extent1].[Id] IN (2,4,6,8,
                          10,12,14,16,
                          18,20)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I personally think the original approach, to do a join on an in-memory list, is bad practice, regardless of weather it works or not. It's bad.&lt;/p&gt;

&lt;p&gt;It's also bad to blindly write LINQ queries without ever looking at the SQL they produce. Sure it's great to not have to worry about writing SQL, but you should still always be aware of the SQL that is been run, sometimes slightly changing the LINQ can massively alter the SQL that is produced.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/08/mvc-routing-with-attributes-makes-routing-awesome/</guid><link>http://www.philliphaydon.com/2011/08/mvc-routing-with-attributes-makes-routing-awesome/</link><a10:author><a10:name /></a10:author><category>ASP.NET MVC</category><title>MVC Routing with Attributes makes routing awesome</title><description>&lt;p&gt;I evaluated HEAPS of code/libraries and threw in the towel and decided that getting lower-case routes, while still having Area's, was a complete and utter waste of time and effort because they were all crappy, and broke stuff, or didn't work.&lt;/p&gt;

&lt;p&gt;That was until my mate Brad grabbed &lt;a href="https://github.com/mccalltd/AttributeRouting"&gt;AttributeRouting&lt;/a&gt; from &lt;a href="http://nuget.org/List/Packages/AttributeRouting"&gt;Nuget&lt;/a&gt;. Oh well you know what, this is the best thing sliced bread.&lt;/p&gt;

&lt;p&gt;First and foremost, it solved the number 1 issue I had with routing, lowercase Urls. This is how simple is it to make Routes lowercase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;routes.MapAttributeRoutes(config =&amp;gt;
{
    config.UseLowercaseRoutes = true;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow... Yet you bing for lowercase routes, and you end up with strange solutions... Here's a couple.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc"&gt;http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This question links to:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://coderjournal.com/2008/03/force-mvc-route-url-lowercase/"&gt;http://coderjournal.com/2008/03/force-mvc-route-url-lowercase/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This breaks Area's, why? Because to handle an Area it appends &lt;code&gt;?Area=areaname&lt;/code&gt; to the Url. FAIL. Probably worked great for MVC 1,but considering I've seen it linked in MVC 3 questions,I consider it fail.&lt;/p&gt;

</description><pubDate>Mon, 08 Aug 2011 16:00:00 Z</pubDate><a10:updated>2011-08-08T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I evaluated HEAPS of code/libraries and threw in the towel and decided that getting lower-case routes, while still having Area's, was a complete and utter waste of time and effort because they were all crappy, and broke stuff, or didn't work.&lt;/p&gt;

&lt;p&gt;That was until my mate Brad grabbed &lt;a href="https://github.com/mccalltd/AttributeRouting"&gt;AttributeRouting&lt;/a&gt; from &lt;a href="http://nuget.org/List/Packages/AttributeRouting"&gt;Nuget&lt;/a&gt;. Oh well you know what, this is the best thing sliced bread.&lt;/p&gt;

&lt;p&gt;First and foremost, it solved the number 1 issue I had with routing, lowercase Urls. This is how simple is it to make Routes lowercase.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;routes.MapAttributeRoutes(config =&amp;gt;
{
    config.UseLowercaseRoutes = true;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow... Yet you bing for lowercase routes, and you end up with strange solutions... Here's a couple.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc"&gt;http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This question links to:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://coderjournal.com/2008/03/force-mvc-route-url-lowercase/"&gt;http://coderjournal.com/2008/03/force-mvc-route-url-lowercase/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This breaks Area's, why? Because to handle an Area it appends &lt;code&gt;?Area=areaname&lt;/code&gt; to the Url. FAIL. Probably worked great for MVC 1,but considering I've seen it linked in MVC 3 questions,I consider it fail.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc/1731652#1731652"&gt;http://stackoverflow.com/questions/878578/how-can-i-have-lowercase-routes-in-asp-net-mvc/1731652#1731652&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Writing them in lowercase? Really?&lt;/p&gt;

&lt;p&gt;Pass, I'll stick with AR, it's too simple, it's ridiculously simple. I love it!&lt;/p&gt;

&lt;p&gt;The next thing I love, is that instead of writing Routes, and then writing &lt;code&gt;HttpGet&lt;/code&gt; &lt;code&gt;HttpPost&lt;/code&gt; on all the actions, I just have to write &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; on the actions, and even define the URL along with it, and bam, it's clear and explicit how you get to that action.&lt;/p&gt;

&lt;p&gt;Such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[POST("Auth/Login")]
public ActionResult Login(LoginViewModel loginViewModel, string returnUrl)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's obvious to me, that I can access this Action by navigating to www.mysite.com/auth/login&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[GET("Content/{slug}")]
public ActionResult Index(string slug)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Page content can be accessed via www.mysite.com/content/my-slug&lt;/p&gt;

&lt;p&gt;And when controllers are divided into Area's, I can just define the area with the controller class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[RouteArea("Admin")]
public class HomeController : BaseController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I could define the namespace to use for Area's in the Area Registration, but it just seems... hacky... AR is definitely worth checking out.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators/</guid><link>http://www.philliphaydon.com/2011/08/fluent-nhibernate-table-inheritance-discriminators/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Fluent NHibernate - Table Inheritance - Discriminators</title><description>&lt;p&gt;So a long time ago &lt;a href="http://jameskovacs.com/"&gt;James Kovacs&lt;/a&gt; posted a article about &lt;a href="http://nhforge.org/blogs/nhibernate/archive/2011/02/16/get-load-polymorphism-in-nhibernate-3.aspx"&gt;get/load polymorphism&lt;/a&gt; with NHibernate, which was cool and all but I always wanted to know how to map it all in Fluent NHibernate. I worked it out at the time but I guess it's taken me 7 months to write it down.&lt;/p&gt;

&lt;p&gt;First up is using a single table, mapping them to multiple classes, this is done using a discriminator. Fluent NHibernate calls this 'table-per-class-hierarchy strategy', which doesn't make sense to me. But meh.&lt;/p&gt;

&lt;p&gt;So I'm going to begin with the following classes to demonstrate this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So if I was to select all WallPost's it would give me instances of LinkShare, and Text wall posts.&lt;/p&gt;

&lt;p&gt;These classes are really basic at the moment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WallPost
{
    public virtual Guid Id { get; set; }
    public virtual DateTime DatePosted { get; set; }
    public virtual string Title { get; set; }
    public virtual string Content { get; set; }
}

public class TextWallPost : WallPost
{
}

public class LinkShareWallPost : WallPost
{
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sun, 07 Aug 2011 16:00:00 Z</pubDate><a10:updated>2011-08-07T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So a long time ago &lt;a href="http://jameskovacs.com/"&gt;James Kovacs&lt;/a&gt; posted a article about &lt;a href="http://nhforge.org/blogs/nhibernate/archive/2011/02/16/get-load-polymorphism-in-nhibernate-3.aspx"&gt;get/load polymorphism&lt;/a&gt; with NHibernate, which was cool and all but I always wanted to know how to map it all in Fluent NHibernate. I worked it out at the time but I guess it's taken me 7 months to write it down.&lt;/p&gt;

&lt;p&gt;First up is using a single table, mapping them to multiple classes, this is done using a discriminator. Fluent NHibernate calls this 'table-per-class-hierarchy strategy', which doesn't make sense to me. But meh.&lt;/p&gt;

&lt;p&gt;So I'm going to begin with the following classes to demonstrate this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So if I was to select all WallPost's it would give me instances of LinkShare, and Text wall posts.&lt;/p&gt;

&lt;p&gt;These classes are really basic at the moment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WallPost
{
    public virtual Guid Id { get; set; }
    public virtual DateTime DatePosted { get; set; }
    public virtual string Title { get; set; }
    public virtual string Content { get; set; }
}

public class TextWallPost : WallPost
{
}

public class LinkShareWallPost : WallPost
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;First we map the Wall Post:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WallPostMap : ClassMap&amp;lt;WallPost&amp;gt;
{
    public WallPostMap()
    {
        Table("WallPost");
        Id(x =&amp;gt; x.Id).GeneratedBy.GuidComb();

        DiscriminateSubClassesOnColumn("PostType");

        Map(x =&amp;gt; x.DatePosted);
        Map(x =&amp;gt; x.Title);
        Map(x =&amp;gt; x.Content);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see, there is a 'DescriminateSubClassesOnColumn' method which specifies a column. This is what NHibernate uses to figure out which type of Sub Class to create.&lt;/p&gt;

&lt;p&gt;Next we need to map the Sub Classes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class TextWallPostMap : SubclassMap&amp;lt;TextWallPost&amp;gt;
{
    public TextWallPostMap()
    {
        DiscriminatorValue(1);
    }
}

public class LinkShareWallPostMap : SubclassMap&amp;lt;LinkShareWallPost&amp;gt;
{
    public LinkShareWallPostMap()
    {
        DiscriminatorValue(2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I have specified the Discriminator Value for each sub class. If I save a TextWallPost, it will save the value '1' to the column 'PostType'. Then when it pulls it from the database, it uses this value to decide the SubClass to create.&lt;/p&gt;

&lt;p&gt;The generated table looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now if I insert a couple of posts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var tx = session.BeginTransaction())
{
    var wallPost = new TextWallPost
    {
        DatePosted = DateTime.Now,
        Title = "My First Wall Post",
        Content = "Is Awesome!"
    };
    var linkPost = new LinkShareWallPost()
    {
        DatePosted = DateTime.Now,
        Title = "My First Link Share",
        Content = "Is Awesome!"
    };
    session.Save(wallPost);
    session.Save(linkPost);

    tx.Commit();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've done nothing more than create instances of the classes I want, and commit them to the database, the SQL that is generated looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So when it generates the SQL it puts the discriminator value in for us.&lt;/p&gt;

&lt;p&gt;If I select all 'WallPost' from the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.QueryOver&amp;lt;WallPost&amp;gt;().List();

foreach (var wallPost in result)
{
    Console.WriteLine(wallPost.Title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just does a normal select:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nice right? What's cool is if we look at the list of results we get, we get instances of WallPost, and instances of LinkShareWallPost back:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now suppose we wanted to select JUST Link Shares.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.QueryOver&amp;lt;LinkShareWallPost&amp;gt;().List();

foreach (var wallPost in result)
{
    Console.WriteLine(wallPost.Title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NHibernate will actually write the query to select only WallPosts that specify the Discriminator type defined in our Sub Class mapping.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So if we look at the results in VS:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/fnh-descrim-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Very nice stuff indeed.&lt;/p&gt;

&lt;p&gt;There's future posts on this stuff to come :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/07/mvc-areas-routes-order-of-routes-matter/</guid><link>http://www.philliphaydon.com/2011/07/mvc-areas-routes-order-of-routes-matter/</link><a10:author><a10:name /></a10:author><category>ASP.NET MVC</category><title>MVC +Areas + Routes... Order of Routes Matter!</title><description>&lt;p&gt;The order in which routes are registered, really is pretty damn important, otherwise it can have really strange side-effects.&lt;/p&gt;

&lt;p&gt;I have a site, which has 3 areas, and no default... 'non-area'.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Admin&lt;/li&gt;
&lt;li&gt;Members&lt;/li&gt;
&lt;li&gt;Site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So rather than having the structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Where the root/default site is in the main directory, with two areas. I wanted this structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So no root/default, and just a 'Site' area which would be the default.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;The default route is removed from Global.asax... for now&lt;/span&gt;&lt;/p&gt;

</description><pubDate>Tue, 26 Jul 2011 16:00:00 Z</pubDate><a10:updated>2011-07-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;The order in which routes are registered, really is pretty damn important, otherwise it can have really strange side-effects.&lt;/p&gt;

&lt;p&gt;I have a site, which has 3 areas, and no default... 'non-area'.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Admin&lt;/li&gt;
&lt;li&gt;Members&lt;/li&gt;
&lt;li&gt;Site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So rather than having the structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Where the root/default site is in the main directory, with two areas. I wanted this structure:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So no root/default, and just a 'Site' area which would be the default.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt;The default route is removed from Global.asax... for now&lt;/span&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;This works perfectly fine if all the URL's are accessed like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:147/Site/Home/Index

http://localhost:147/Admin/Home/Index

http://localhost:147/Member/Home/Index
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this in a browser we get the following:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;These routes are registered automatically when you add an Area, in a &lt;em&gt;AreaName&lt;/em&gt;AreaRegistration file.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The routes generated look like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;namespace RoutingIssue.Areas.Members
{
    public class MembersAreaRegistration : AreaRegistration
    {
        public override string AreaName
        {
            get
            {
                return "Members";
            }
        }
        public override void RegisterArea(AreaRegistrationContext context)
        {
            context.MapRoute(
                "Members_default",
                "Members/{controller}/{action}/{id}",
                new { action = "Index", id = UrlParameter.Optional }
            );
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But with different AreaName's of course. You get the idea.&lt;/p&gt;

&lt;p&gt;Now what we want to do is change the Site route, to work from the root directly like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:147/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where my assumptions began to go wrong... I updated the route like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void RegisterArea(AreaRegistrationContext context)
{
    context.MapRoute(
        "Site_default",
        "{controller}/{action}/{id}",
        new { controller = "Home", action = "Index", id = UrlParameter.Optional }
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I've removed 'Site' from the path, and added the default controller.&lt;/p&gt;

&lt;p&gt;This is where things started to get messy. At first, it worked, in my sample project. Then I added AutoFac, MiniProfiler, some Content, and a few other things. That's when it all went pear shaped.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mvc-routes-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It seems to have lost the information about the routes for Admin/Member.&lt;/p&gt;

&lt;p&gt;Creating a new project with it working, and with my current project. I wrote some 
Trace.Write("AreaName") code into each AreaRegistration. The working project outputted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Members &lt;/li&gt;
&lt;li&gt;Admin &lt;/li&gt;
&lt;li&gt;Site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However the second project, where it was failing, outputted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Site &lt;/li&gt;
&lt;li&gt;Members &lt;/li&gt;
&lt;li&gt;Admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what's happening is in my project, it registers the default route first without the Area:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;context.MapRoute(
    "Site_default",
    "{controller}/{action}/{id}",
    new { controller = "Home", action = "Index", id = UrlParameter.Optional }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Took me hours to figure this out. That MVC cannot guarantee the order of which Area's are registered. The second two Area's didn't stand a chance.&lt;/p&gt;

&lt;p&gt;The solution was to move the Site route to the global.asax file, and specify an Area on it. My Site registration looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override void RegisterArea(AreaRegistrationContext context)
{
    //context.MapRoute(
    //    "Site_default",
    //    "{controller}/{action}/{id}",
    //    new { controller = "Home", action = "Index", id = UrlParameter.Optional }
    //);
    Trace.WriteLine("Site");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While my global.asax file has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void RegisterRoutes(RouteCollection routes)
{
    routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
    routes.MapRoute(
        "default",
        "{controller}/{action}/{id}",
        new { controller = "Home", action = "Index", id = UrlParameter.Optional },
        new string[] { "RoutingIssue.Areas.Site.Controllers" }
    ).DataTokens.Add("Area", "Site");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This means the default route is registered after my Areas, and everything works perfectly again :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/07/nservicebus-video-on-dnrtv/</guid><link>http://www.philliphaydon.com/2011/07/nservicebus-video-on-dnrtv/</link><a10:author><a10:name /></a10:author><category>NServiceBus</category><title>NServiceBus Video on dnrTV</title><description>&lt;p&gt;Good introduction video on dnrTV with Udi Dahan for getting started with NServiceBus.&lt;/p&gt;

&lt;p&gt;It's pretty recent too, June 23rd, 2011.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Udi Dahan on NServiceBus&lt;/strong&gt;  &lt;/p&gt;
  
  &lt;p&gt;Udi Dahan shows you how to use the fabulous NServiceBus to provide reliable messaging using both a request/response and publish/subscribe architecture. He shows how much easier it is to use NServiceBus than to use WCF for reliable messaging.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://dnrtv.com/default.aspx?ShowID=202"&gt;http://dnrtv.com/default.aspx?ShowID=202&lt;/a&gt;&lt;/p&gt;
</description><pubDate>Mon, 18 Jul 2011 16:00:00 Z</pubDate><a10:updated>2011-07-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Good introduction video on dnrTV with Udi Dahan for getting started with NServiceBus.&lt;/p&gt;

&lt;p&gt;It's pretty recent too, June 23rd, 2011.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Udi Dahan on NServiceBus&lt;/strong&gt;  &lt;/p&gt;
  
  &lt;p&gt;Udi Dahan shows you how to use the fabulous NServiceBus to provide reliable messaging using both a request/response and publish/subscribe architecture. He shows how much easier it is to use NServiceBus than to use WCF for reliable messaging.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://dnrtv.com/default.aspx?ShowID=202"&gt;http://dnrtv.com/default.aspx?ShowID=202&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/07/getting-started-nservicebus-with-multiple-startup-projects/</guid><link>http://www.philliphaydon.com/2011/07/getting-started-nservicebus-with-multiple-startup-projects/</link><a10:author><a10:name /></a10:author><category>NServiceBus</category><title>Getting Started - NServiceBus with Multiple Startup Projects</title><description>&lt;p&gt;I never actually realized this, but one of the things that baffled me was how Udi Dahan, when giving his training, or when playing with the NServiceBus demo's... How multiple projected were started.&lt;/p&gt;

&lt;p&gt;It actually made implementing NServiceBus somewhat difficult for me to begin with, because I never knew Visual Studio had a feature to specify multiple projects as startup projects.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/getting-started-nservicebus-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If you right click a Solution and go to 'Properties' you are presented with the above window.&lt;/p&gt;

&lt;p&gt;In "Startup Project" there's an option to select multiple projects, this solution which is a NServiceBus demo, shows 3 projects set to start.&lt;/p&gt;

</description><pubDate>Sun, 10 Jul 2011 16:00:00 Z</pubDate><a10:updated>2011-07-10T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I never actually realized this, but one of the things that baffled me was how Udi Dahan, when giving his training, or when playing with the NServiceBus demo's... How multiple projected were started.&lt;/p&gt;

&lt;p&gt;It actually made implementing NServiceBus somewhat difficult for me to begin with, because I never knew Visual Studio had a feature to specify multiple projects as startup projects.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/getting-started-nservicebus-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;If you right click a Solution and go to 'Properties' you are presented with the above window.&lt;/p&gt;

&lt;p&gt;In "Startup Project" there's an option to select multiple projects, this solution which is a NServiceBus demo, shows 3 projects set to start.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Ahhh it all makes sense now. 7 years of using Visual Studio and I didn't know this feature existed. All this time I had being starting projects manually from the bin directories thinking "there must be an easier way".&lt;/p&gt;

&lt;p&gt;Yet if I Googled "visual studio multiple startup projects" the first link is:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms165413(v=vs.80).aspx"&gt;How to: Set Multiple Startup Projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ah we live and we learn :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/06/hide-show-buttons-with-sencha-touch/</guid><link>http://www.philliphaydon.com/2011/06/hide-show-buttons-with-sencha-touch/</link><a10:author><a10:name /></a10:author><title>Hide &amp; Show Buttons with Sencha Touch</title><description>&lt;p&gt;I'm currently building a demo for work using &lt;a href="http://www.sencha.com/products/touch/"&gt;Sencha Touch mobile JavaScript framework&lt;/a&gt;, and needed to change the state of some buttons dependent on which 'card' is shown.&lt;/p&gt;

&lt;p&gt;The Doc Api is a little hard to follow in my opinion, but I eventually worked it out.&lt;/p&gt;

&lt;p&gt;In hindsight I guess I could have used a single button to do this, but I will demonstrate it with two.&lt;/p&gt;

&lt;p&gt;To demonstrate this I'm going to use a Panel, with the buttons to flick between the cards. Instead of using a TabPanel.&lt;/p&gt;

&lt;p&gt;So to start with I have a Panel, with a ToolBar docked to the bottom, a couple of buttons, and two cards.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/sencha-1.png" alt="" /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rootPanel;
Ext.setup({
    onReady: function () {
        rootPanel = new Ext.Panel({
            fullscreen: true,
            layout: 'card',
            style: 'background-color:lightblue;',
            dockedItems: [
                {
                    dock: 'bottom',
                    xtype: 'toolbar',
                    items: [
                        {
                            html: 'Card 1 Button'
                        },
                        {
                            docked: 'right',
                            html: 'Card 2 Button'
                        }
                    ]
                }
            ],
            items: [{ html: 'card 1' }, { html: 'card 2' }]
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sat, 11 Jun 2011 16:00:00 Z</pubDate><a10:updated>2011-06-11T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm currently building a demo for work using &lt;a href="http://www.sencha.com/products/touch/"&gt;Sencha Touch mobile JavaScript framework&lt;/a&gt;, and needed to change the state of some buttons dependent on which 'card' is shown.&lt;/p&gt;

&lt;p&gt;The Doc Api is a little hard to follow in my opinion, but I eventually worked it out.&lt;/p&gt;

&lt;p&gt;In hindsight I guess I could have used a single button to do this, but I will demonstrate it with two.&lt;/p&gt;

&lt;p&gt;To demonstrate this I'm going to use a Panel, with the buttons to flick between the cards. Instead of using a TabPanel.&lt;/p&gt;

&lt;p&gt;So to start with I have a Panel, with a ToolBar docked to the bottom, a couple of buttons, and two cards.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/sencha-1.png" alt="" /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var rootPanel;
Ext.setup({
    onReady: function () {
        rootPanel = new Ext.Panel({
            fullscreen: true,
            layout: 'card',
            style: 'background-color:lightblue;',
            dockedItems: [
                {
                    dock: 'bottom',
                    xtype: 'toolbar',
                    items: [
                        {
                            html: 'Card 1 Button'
                        },
                        {
                            docked: 'right',
                            html: 'Card 2 Button'
                        }
                    ]
                }
            ],
            items: [{ html: 'card 1' }, { html: 'card 2' }]
        });
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;At the moment it's all nested, so the first thing I'll do is pull the toolbar items out, I'll also assign them to local variables and create them using the Ext.Button type. This gives us access to the methods and events for the buttons.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var btnCardOne = new Ext.Button({
    html: 'Card 1 Button'
});

var btnCardTwo = new Ext.Button({
    docked: 'right',
    hidden: true,
    html: 'Card 2 Button'
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;items: [btnCardOne, btnCardTwo]&lt;/p&gt;

&lt;p&gt;You will notice I also set the second button's state to be hidden.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/sencha-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So we still have the same screen, less one button.&lt;/p&gt;

&lt;p&gt;Next we want to add an event to the button, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var btnCardOne = new Ext.Button({
    html: 'Card 1 Button',
    handler: function () {
        rootPanel.setActiveItem(1, { type: 'slide' });
        btnCardOne.setVisible(false);
        btnCardTwo.setVisible(true);
    }
});

var btnCardTwo = new Ext.Button({
    docked: 'right',
    hidden: true,
    html: 'Card 2 Button',
    handler: function () {
        rootPanel.setActiveItem(0, { type: 'slide' });
        btnCardOne.setVisible(true);
        btnCardTwo.setVisible(false);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because the buttons are just local variables we can access them in each event, so in the first button, we want to set the active item (card) to 1, turn off button one, and turn on button two.&lt;/p&gt;

&lt;p&gt;Then in the second button, we do the opposite. Now clicking each button flicks between the two.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/sencha-3.png" alt="" /&gt; &lt;img src="http://www.philliphaydon.com/images/sencha-4.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/06/joining-the-windows-phone-7-club/</guid><link>http://www.philliphaydon.com/2011/06/joining-the-windows-phone-7-club/</link><a10:author><a10:name /></a10:author><title>Joining the Windows Phone 7 Club</title><description>&lt;p&gt;Yesterday, my new Windows Phone 7 arrived. I ordered a HTC HD7 from eBay, since it's like $350 cheaper than buying it from an Australian retailer. Not only that it seems carriers aren't supporting WP7 too much yet, as two shopped that I enquired about the phone, both tried to talk me out of getting a WP7.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-phone-club-1.png" alt="" /&gt; &lt;img src="http://www.philliphaydon.com/images/windows-phone-club-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(Photos from &lt;a href="http://www.gsmarena.com/htc_hd7-pictures-3338.php"&gt;http://www.gsmarena.com/htc_hd7-pictures-3338.php&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It's definitely far superior to my iPhone4, after spending a night playing around with it, pretty much everything is better, in my opinion. (I will NEVER hand over money for an Apple product ever again.)&lt;/p&gt;

&lt;p&gt;The one flaw that Windows Phone 7 does have, is it's contact. Microsoft really dropped the ball on the contact, or 'People' as they call them. The idea is great, but it lacks the ability to sync contact with outlook with ease. Contact's are synced to... everything else.&lt;/p&gt;

</description><pubDate>Thu, 09 Jun 2011 16:00:00 Z</pubDate><a10:updated>2011-06-09T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Yesterday, my new Windows Phone 7 arrived. I ordered a HTC HD7 from eBay, since it's like $350 cheaper than buying it from an Australian retailer. Not only that it seems carriers aren't supporting WP7 too much yet, as two shopped that I enquired about the phone, both tried to talk me out of getting a WP7.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/windows-phone-club-1.png" alt="" /&gt; &lt;img src="http://www.philliphaydon.com/images/windows-phone-club-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(Photos from &lt;a href="http://www.gsmarena.com/htc_hd7-pictures-3338.php"&gt;http://www.gsmarena.com/htc_hd7-pictures-3338.php&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It's definitely far superior to my iPhone4, after spending a night playing around with it, pretty much everything is better, in my opinion. (I will NEVER hand over money for an Apple product ever again.)&lt;/p&gt;

&lt;p&gt;The one flaw that Windows Phone 7 does have, is it's contact. Microsoft really dropped the ball on the contact, or 'People' as they call them. The idea is great, but it lacks the ability to sync contact with outlook with ease. Contact's are synced to... everything else.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;At first I thought outlook contact's could only be synced with exchange, but it turns out you can do it... but you need to sync your contacts to your windows live account,and then to your phone. &lt;a href="http://support.microsoft.com/kb/2454811#21method"&gt;http://support.microsoft.com/kb/2454811#21method&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Mail contact's is a pain to sync to since it has a habit of adding people to 'My Contact' without asking, and Facebook contacts are included when they don't even include contact details like a mobile number, or email. Which means if you have a lot of friends 'random people' on your friends list, your 'People' section becomes bloated.&lt;/p&gt;

&lt;p&gt;The other thing that's rather annoying about contact's is they aren't filtered for certain applications. If I create an email, and add a contact. It shows all contacts and not contacts that have an email.&lt;/p&gt;

&lt;p&gt;Or if I create a call, or text, it doesn't filter contacts to only those who have a mobile/telephone number.&lt;/p&gt;

&lt;p&gt;I'll get over the usability issues around 'People' but for now I find it annoying.&lt;/p&gt;

&lt;p&gt;Time to break out the WP7 Developer Tools!&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/05/refactoring-those-static-method-calls-for-testability/</guid><link>http://www.philliphaydon.com/2011/05/refactoring-those-static-method-calls-for-testability/</link><a10:author><a10:name /></a10:author><category>Unit Testing</category><title>Refactoring those static method calls for testability!</title><description>&lt;p&gt;One thing I love about working on a legacy application is the weird things I get to problem solve.&lt;/p&gt;

&lt;p&gt;A lot of the old system has an awful lot of static method calls, which doesn't leave much to be desired for when it comes to unit testing. I was working on a piece of the system today which is written in .NET 2.0, and is tightly coupled to everything in existence.&lt;/p&gt;

&lt;p&gt;I didn't want to go introduce interfaces and wrapper classes in order to abstract out all the dependencies, but I wanted to unit test the work without having to touch the database, which is what these static method calls were doing.&lt;/p&gt;

&lt;p&gt;The code I dealt with was something along the lines of...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductService
{
    public static void Save(Product product)
    {
        throw new Exception("This would normally touch a db...");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Example is completely made up for this blog post and isn't actual code from work)&lt;/em&gt;&lt;/p&gt;

</description><pubDate>Thu, 26 May 2011 16:00:00 Z</pubDate><a10:updated>2011-05-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;One thing I love about working on a legacy application is the weird things I get to problem solve.&lt;/p&gt;

&lt;p&gt;A lot of the old system has an awful lot of static method calls, which doesn't leave much to be desired for when it comes to unit testing. I was working on a piece of the system today which is written in .NET 2.0, and is tightly coupled to everything in existence.&lt;/p&gt;

&lt;p&gt;I didn't want to go introduce interfaces and wrapper classes in order to abstract out all the dependencies, but I wanted to unit test the work without having to touch the database, which is what these static method calls were doing.&lt;/p&gt;

&lt;p&gt;The code I dealt with was something along the lines of...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductService
{
    public static void Save(Product product)
    {
        throw new Exception("This would normally touch a db...");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;(Example is completely made up for this blog post and isn't actual code from work)&lt;/em&gt;&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The class that calls this is along the lines of...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SomeService
{
    public void DoSomething(User user, Product product)
    {
        //Do a bunch of stuff...
        if (user.IsVip)
            product.Price *= 0.90;
        ProductService.Save(product);

        //Do some more stuff...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there's a direct call to the static method 'Save', now unit testing this class, like...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void Test()
{
    //Arrange
    SomeService serviceUnderTest = new SomeService();
    User user = new User();
    user.IsVip = true;

    Product product = new Product();
    product.Price = 5.00d;

    //Act
    serviceUnderTest.DoSomething(user, product);

    //Assert
    Assert.AreEqual(4.5d, product.Price);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the test I would like to expect a result of '4.5' for the price, but what I get is the exception thrown from the ProductService.&lt;/p&gt;

&lt;p&gt;The solution, that didn't involve interfaces, a wrapper around the service, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class SomeService
{
    internal delegate void ProductServiceDelegate (Product product);
    private ProductServiceDelegate _productServiceDelegate;
    internal ProductServiceDelegate ProductServiceSave
    {
        get
        {
            if (_productServiceDelegate == null)
                _productServiceDelegate = ProductService.Save;

            return _productServiceDelegate;
        }   
        set { _productServiceDelegate = value; }
    }

    public void DoSomething(User user, Product product)
    {
        //Do a bunch of stuff...
        if (user.IsVip)
            product.Price *= 0.90;

        ProductServiceSave(product);

        //Do some more stuff...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what I've done is introduce a delegate for the ProductService's 'Save' method, and made it internal with 'InternalsVisibleTo' on the AssemblyInfo file so that unit testing project can see it.&lt;/p&gt;

&lt;p&gt;Now I can update the unit test with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod]
public void TestMethod1()
{
    SomeService serviceUnderTest = new SomeService();

    User user = new User();
    user.IsVip = true;

    Product product = new Product();
    product.Price = 5.00d;

    serviceUnderTest.ProductServiceSave =
        new SomeService.ProductServiceDelegate(
            delegate(Product productParam)
                {
                    productParam.Id = 1;
                });

    serviceUnderTest.DoSomething(user, product);

    Assert.AreEqual(4.5d, product.Price);
    Assert.AreEqual(1, product.Id);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So on the class under test I add a test method to the property which just sets the Id of the product to '1', to simulate that the product was saved, and now I don't have to worry about the dependency on the ProductService class anymore.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/05/nhibernate-querying-for-max-value/</guid><link>http://www.philliphaydon.com/2011/05/nhibernate-querying-for-max-value/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>NHibernate Querying for Max value</title><description>&lt;p&gt;Browsing the net today for something to do with Fluent NHibernate I came across a blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://frankmao.com/2011/01/14/nhibernate-subquery/"&gt;http://frankmao.com/2011/01/14/nhibernate-subquery/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The blog post is to do with Subquery, but I got a little bit confused since the post itself doesn't have anything to do with Subqueries.&lt;/p&gt;

&lt;p&gt;About the actual post tho, NHibernate.Linq does actually support Min/Max operators.&lt;/p&gt;

&lt;p&gt;Infact I just wrote a quick test to see the SQL it generated, the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Linq&amp;lt;TestProduct&amp;gt;().Max(x =&amp;gt; x.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generates the following SQL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT max(this_.Value) as y0_
FROM   [TestProduct] this_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NHibernate.Linq has basically been deprecated however since NH3.0 has it's own built in Linq provider, rewriting that query in NH3.0 would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;BaseClass&amp;gt;().Max(x =&amp;gt; x.Id);
&lt;/code&gt;&lt;/pre&gt;
</description><pubDate>Mon, 16 May 2011 16:00:00 Z</pubDate><a10:updated>2011-05-16T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Browsing the net today for something to do with Fluent NHibernate I came across a blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://frankmao.com/2011/01/14/nhibernate-subquery/"&gt;http://frankmao.com/2011/01/14/nhibernate-subquery/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The blog post is to do with Subquery, but I got a little bit confused since the post itself doesn't have anything to do with Subqueries.&lt;/p&gt;

&lt;p&gt;About the actual post tho, NHibernate.Linq does actually support Min/Max operators.&lt;/p&gt;

&lt;p&gt;Infact I just wrote a quick test to see the SQL it generated, the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Linq&amp;lt;TestProduct&amp;gt;().Max(x =&amp;gt; x.Value);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generates the following SQL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT max(this_.Value) as y0_
FROM   [TestProduct] this_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NHibernate.Linq has basically been deprecated however since NH3.0 has it's own built in Linq provider, rewriting that query in NH3.0 would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var result = session.Query&amp;lt;BaseClass&amp;gt;().Max(x =&amp;gt; x.Id);
&lt;/code&gt;&lt;/pre&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/05/nservicebus-templates/</guid><link>http://www.philliphaydon.com/2011/05/nservicebus-templates/</link><a10:author><a10:name /></a10:author><category>NServiceBus</category><title>NServiceBus Templates</title><description>&lt;p&gt;For anyone whose interested, the Visual Studio Gallery has some templates for NServiceBus.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://visualstudiogallery.msdn.microsoft.com/9546d382-7ffa-4fb8-8c0f-b7825d5fd085"&gt;http://visualstudiogallery.msdn.microsoft.com/9546d382-7ffa-4fb8-8c0f-b7825d5fd085&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;NServiceBus Templates includes project and item templates for those building solutions upon NServiceBus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Templates&lt;/strong&gt;    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client Endpoint - defines a project that performs as a client&lt;/li&gt;
&lt;li&gt;Server Endpoint - defines a project that performs as a server&lt;/li&gt;
&lt;li&gt;Publisher Endpoint - defines a project that performs as a publisher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Item Templates&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message Handler - default implementation of the IHandleMessages&lt;T&gt; interface&lt;/li&gt;
&lt;li&gt;EndpointConfig - default implementation of developer endpoint configuration&lt;/li&gt;
&lt;/ul&gt;

</description><pubDate>Wed, 11 May 2011 16:00:00 Z</pubDate><a10:updated>2011-05-11T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;For anyone whose interested, the Visual Studio Gallery has some templates for NServiceBus.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://visualstudiogallery.msdn.microsoft.com/9546d382-7ffa-4fb8-8c0f-b7825d5fd085"&gt;http://visualstudiogallery.msdn.microsoft.com/9546d382-7ffa-4fb8-8c0f-b7825d5fd085&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;NServiceBus Templates includes project and item templates for those building solutions upon NServiceBus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Project Templates&lt;/strong&gt;    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client Endpoint - defines a project that performs as a client&lt;/li&gt;
&lt;li&gt;Server Endpoint - defines a project that performs as a server&lt;/li&gt;
&lt;li&gt;Publisher Endpoint - defines a project that performs as a publisher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Item Templates&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message Handler - default implementation of the IHandleMessages&lt;T&gt; interface&lt;/li&gt;
&lt;li&gt;EndpointConfig - default implementation of developer endpoint configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;&lt;strong&gt;Instructions&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Project templates include a custom wizard that will prompt for a directory. This directory should be the path to your NServiceBus assemblies and the generic host.  Select the directory and hit "Finish" to complete the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Futures&lt;/strong&gt;  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Distributor Endpoint&lt;/li&gt;
&lt;li&gt;Worker Endpoint&lt;/li&gt;
&lt;li&gt;Complete Solutions
&lt;ul&gt;
&lt;li&gt;Pub/Sub&lt;/li&gt;
&lt;li&gt;Request/Response&lt;/li&gt;
&lt;li&gt;Client/Server&lt;/li&gt;
&lt;li&gt;Distributor/Worker&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/04/finding-the-correct-process-id-for-a-website-for-dottrace/</guid><link>http://www.philliphaydon.com/2011/04/finding-the-correct-process-id-for-a-website-for-dottrace/</link><a10:author><a10:name /></a10:author><title>Finding the correct Process Id for a website for DotTrace</title><description>&lt;p&gt;Finding which process belonged to which application pool was simple in IIS6, it was a simple case of running up a Command Prompt and typing in &lt;code&gt;iisapp.vbs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately the script wasn't bought across to IIS7. So when it came to profiling a site I was baffled as to why the DotTrace results were showing information for threads completely unrelated to the website I was looking at.&lt;/p&gt;

&lt;p&gt;Turns out I was looking at the wrong Process Id...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/process-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So I needed to figure out which Process Id belonged to which site.&lt;/p&gt;

</description><pubDate>Wed, 27 Apr 2011 16:00:00 Z</pubDate><a10:updated>2011-04-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Finding which process belonged to which application pool was simple in IIS6, it was a simple case of running up a Command Prompt and typing in &lt;code&gt;iisapp.vbs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately the script wasn't bought across to IIS7. So when it came to profiling a site I was baffled as to why the DotTrace results were showing information for threads completely unrelated to the website I was looking at.&lt;/p&gt;

&lt;p&gt;Turns out I was looking at the wrong Process Id...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/process-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So I needed to figure out which Process Id belonged to which site.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;IIS7 ships with a little command line tool called &lt;code&gt;AppCmd&lt;/code&gt;. Which is handy, simply open up a Command Prompt and navigate to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Windows\System32\inetsrv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then type in the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;appcmd list wp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will list out all the sites and their Process Id:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/process-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Problem solved!&lt;/p&gt;

&lt;p&gt;More information about the tool can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://learn.iis.net/page.aspx/114/getting-started-with-appcmdexe/"&gt;http://learn.iis.net/page.aspx/114/getting-started-with-appcmdexe/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/04/jquery-templating-nested-arrays/</guid><link>http://www.philliphaydon.com/2011/04/jquery-templating-nested-arrays/</link><a10:author><a10:name /></a10:author><category>jQuery</category><title>jQuery Templating - Nested Collections</title><description>&lt;p&gt;Was asked me a couple of weeks ago if it was possible to have nested collections in a jQuery template. Well you can! The sample code kind of buries the ability since it tries to demonstrate too many things at once. But it's rather simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{"{{each *array*"}}}}
    *stuff*
{{"{{/each"}}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So assuming we have a simple json object like...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var people = [
    {
        firstName: "James",
        favouriteColours: [ 
            { colorName: "green" },
            { colorName: "red" }
        ]
    },
    {
        firstName: "Jack",
        favouriteColours: [
            { colorName: "blue" },
            { colorName: "red" }
        ]
    },
    {
        firstName: "Jim",
        favouriteColours: [
            { colorName: "blue" },
            { colorName: "black" },
            { colorName: "white" }
        ]
    }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can iterate over the people and then their favourite colours by using &lt;code&gt;each&lt;/code&gt; in the template like so:&lt;/p&gt;

</description><pubDate>Fri, 22 Apr 2011 16:00:00 Z</pubDate><a10:updated>2011-04-22T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Was asked me a couple of weeks ago if it was possible to have nested collections in a jQuery template. Well you can! The sample code kind of buries the ability since it tries to demonstrate too many things at once. But it's rather simple.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{"{{each *array*"}}}}
    *stuff*
{{"{{/each"}}}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So assuming we have a simple json object like...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var people = [
    {
        firstName: "James",
        favouriteColours: [ 
            { colorName: "green" },
            { colorName: "red" }
        ]
    },
    {
        firstName: "Jack",
        favouriteColours: [
            { colorName: "blue" },
            { colorName: "red" }
        ]
    },
    {
        firstName: "Jim",
        favouriteColours: [
            { colorName: "blue" },
            { colorName: "black" },
            { colorName: "white" }
        ]
    }
];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can iterate over the people and then their favourite colours by using &lt;code&gt;each&lt;/code&gt; in the template like so:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script id="sample" type="text/x-jquery-tmpl"&amp;gt;
    Name: ${firstName} &amp;lt;br /&amp;gt;
    Colours: 
        {{"{{each favouriteColours"}}}}
            ${this.colorName}
        {{"{{/each"}}}}
    &amp;lt;hr /&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You're not limited to 1 level of collections, if you had many levels you can have an &lt;code&gt;each&lt;/code&gt; inside an &lt;code&gt;each&lt;/code&gt;... inside an &lt;code&gt;each&lt;/code&gt;. But that would be getting silly.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/04/nhibernate-querying-relationships-are-depth/</guid><link>http://www.philliphaydon.com/2011/04/nhibernate-querying-relationships-are-depth/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>NHibernate - Querying relationships at depth!</title><description>&lt;p&gt;The title may be a bit leading, this isn't about querying one-to-many-to-many, that is simply not possible. Well it may be possible, but it's not practical by any means.&lt;/p&gt;

&lt;p&gt;It's not practical because when querying for one-to-many you end up with a cartesian product. With a one-to-many it's easy to transform the data knowing the root is a single result while the relationship is a collection of all the results.&lt;/p&gt;

&lt;p&gt;If you have a many-to-many it works too since it's the distinct root and the relating collection of all results for a single root item.&lt;/p&gt;

&lt;p&gt;But to select a one-to-many-to-many it's far too complicated to work out what the hell is going on.  Well in my opinion it's far too complicated.&lt;/p&gt;

</description><pubDate>Tue, 12 Apr 2011 16:00:00 Z</pubDate><a10:updated>2011-04-12T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;The title may be a bit leading, this isn't about querying one-to-many-to-many, that is simply not possible. Well it may be possible, but it's not practical by any means.&lt;/p&gt;

&lt;p&gt;It's not practical because when querying for one-to-many you end up with a cartesian product. With a one-to-many it's easy to transform the data knowing the root is a single result while the relationship is a collection of all the results.&lt;/p&gt;

&lt;p&gt;If you have a many-to-many it works too since it's the distinct root and the relating collection of all results for a single root item.&lt;/p&gt;

&lt;p&gt;But to select a one-to-many-to-many it's far too complicated to work out what the hell is going on.  Well in my opinion it's far too complicated.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;However if you have a one-to-many-to-one, so three levels deep... Lets say... A blog, with many posts, each with an author.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We can query the 3rd level with the posts relatively easily.&lt;/p&gt;

&lt;p&gt;If we take a relatively simple query, to fetch a blog with posts and display the title/author like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sessionFactory = new SessionFactoryManager().CreateSessionFactory();

Blog blog = null;

using (var session = sessionFactory.OpenSession())
{
    blog = session.QueryOver&amp;lt;Blog&amp;gt;()
                  .Where(x =&amp;gt; x.Id == 1)
                  .Fetch(x =&amp;gt; x.Posts).Eager
                  .SingleOrDefault();

    Console.WriteLine(blog.Name);
    Console.WriteLine("--");

    foreach (var post in blog.Posts)
    {
        Console.WriteLine("Title: " + post.Title);
        Console.WriteLine("Author: " + post.Author.FirstName);
        Console.WriteLine("--");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can eager load the posts...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;No problems. Except when we grab the Author, we end up with a select+n scenario...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;This is bad bad bad! So the idea would be to eager load the Author with the post, the problem is .Fetch() doesn't allow you to specify a property of a collection...&lt;/p&gt;

&lt;p&gt;That's where 'JoinAlias' comes in handy, I assume this stuff comes from HQL/Criteria, but I prefer not to use that stuff.&lt;/p&gt;

&lt;p&gt;Instead of using 'Fetch' we are going to replace it with a 'JoinAlias' like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post posts = null;
Author author = null;
blog = session.QueryOver&amp;lt;Blog&amp;gt;()
              .Where(x =&amp;gt; x.Id == 1)
              .JoinAlias(x =&amp;gt; x.Posts, () =&amp;gt; posts)
              .JoinAlias(() =&amp;gt; posts.Author, () =&amp;gt; author)
              .SingleOrDefault();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opps...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It's executed two queries, the first query looks fine...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The data returned is correct too, except NH doesn't seem to think so, it actually queries for the Posts a second time.&lt;/p&gt;

&lt;p&gt;However, updating the query to specify a join type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post posts = null;
Author author = null;
blog = session.QueryOver&amp;lt;Blog&amp;gt;()
              .Where(x =&amp;gt; x.Id == 1)
              .JoinAlias(x =&amp;gt; x.Posts, () =&amp;gt; posts, JoinType.LeftOuterJoin)
              .JoinAlias(() =&amp;gt; posts.Author, () =&amp;gt; author)
              .SingleOrDefault();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We end up with a single query, with all the correct results.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-depth-7.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/04/installing-mongodb-service-with-logs/</guid><link>http://www.philliphaydon.com/2011/04/installing-mongodb-service-with-logs/</link><a10:author><a10:name /></a10:author><category>MongoDB</category><title>Installing MongoDB Service with logs</title><description>&lt;p&gt;Just tried to install MongoDB as a service on Windows 7, but came up with issues trying to specify where to store the logs...&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mongodb.org/display/DOCS/Windows+Service"&gt;http://www.mongodb.org/display/DOCS/Windows+Service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example on the website shows a directory path, but when you look at the help in the command windows it says:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mongodb-install-1.png" alt="" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;all output going to: c:mongodblogs 
  logpath [c:mongodblogs] should be a file name not a directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm not sure why, maybe the documentation isn't up to date, but specifying a physical file, like 'log.txt' the service installs fine.&lt;/p&gt;
</description><pubDate>Mon, 11 Apr 2011 16:00:00 Z</pubDate><a10:updated>2011-04-11T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Just tried to install MongoDB as a service on Windows 7, but came up with issues trying to specify where to store the logs...&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mongodb.org/display/DOCS/Windows+Service"&gt;http://www.mongodb.org/display/DOCS/Windows+Service&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example on the website shows a directory path, but when you look at the help in the command windows it says:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/mongodb-install-1.png" alt="" /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;all output going to: c:mongodblogs 
  logpath [c:mongodblogs] should be a file name not a directory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm not sure why, maybe the documentation isn't up to date, but specifying a physical file, like 'log.txt' the service installs fine.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/03/career-starting-salary/</guid><link>http://www.philliphaydon.com/2011/03/career-starting-salary/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Career Starting Salary</title><description>&lt;p&gt;Every now-n-then I read threads on forums to do with pay &amp;amp; salary in the IT industry, and it always frustrates me when I come across posts where people are whinging about junior / no experience jobs being offered for 'low pay'.&lt;/p&gt;

&lt;p&gt;The latest thread can be seen here: &lt;a href="http://forums.whirlpool.net.au/forum-replies.cfm?t=1657193"&gt;http://forums.whirlpool.net.au/forum-replies.cfm?t=1657193&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the thread the original poster was complaining about a job ad being advertised at 35-40k, for a grad position. It seems that a lot of people agree with him. Some of the comments are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;35k is shockingly low. You could walk out and get an office job with no training and no stress for that amount. As a grad you will have to be learning things in your spare time etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&gt; In IT you need to be good to get good money. If that's not you then change your career, plenty of industries where you get good money even if you are just average or worse...

&lt;!-- --&gt;
&gt; I still think it's dangerous practice to offer an absolutely disgraceful salary like $35k to gradutes

&lt;!-- --&gt;
&gt; 35k is a a stupid sallary for a new Grad in this day and age. Heck, as a grad I would even consider 50k too low. Good luck trying to fill that role !!

</description><pubDate>Sun, 27 Mar 2011 16:00:00 Z</pubDate><a10:updated>2011-03-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Every now-n-then I read threads on forums to do with pay &amp;amp; salary in the IT industry, and it always frustrates me when I come across posts where people are whinging about junior / no experience jobs being offered for 'low pay'.&lt;/p&gt;

&lt;p&gt;The latest thread can be seen here: &lt;a href="http://forums.whirlpool.net.au/forum-replies.cfm?t=1657193"&gt;http://forums.whirlpool.net.au/forum-replies.cfm?t=1657193&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the thread the original poster was complaining about a job ad being advertised at 35-40k, for a grad position. It seems that a lot of people agree with him. Some of the comments are:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;35k is shockingly low. You could walk out and get an office job with no training and no stress for that amount. As a grad you will have to be learning things in your spare time etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- --&gt;
&gt; In IT you need to be good to get good money. If that's not you then change your career, plenty of industries where you get good money even if you are just average or worse...

&lt;!-- --&gt;
&gt; I still think it's dangerous practice to offer an absolutely disgraceful salary like $35k to gradutes

&lt;!-- --&gt;
&gt; 35k is a a stupid sallary for a new Grad in this day and age. Heck, as a grad I would even consider 50k too low. Good luck trying to fill that role !!

&lt;!--excerpt--&gt;

&lt;p&gt;And one of my favourites:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$35k is terrible... what's the point of going to uni and graduating with a degree if 35k is all you get... u might as well get a basic admin job that pays $40-50k...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's just a few of the comments from the first 4 pages of 19+ pages.&lt;/p&gt;

&lt;p&gt;I don't understand how people find this low, I don't know how things work in America, but in Australia and New Zealand a grad student in IT simply cannot expect to work out of Uni and into a 100k job.&lt;/p&gt;

&lt;p&gt;When I started working about 7 years ago at 18, I started on 35k. (for the record I never went to university, I did a couple of diplomas then started working).&lt;/p&gt;

&lt;p&gt;I was discussing this with a good friend of mine, last night and he told me he started on $10.30/hr (about 21k), without asking him I bet he would say it was worth it, he's very experienced and works for a great company.&lt;/p&gt;

&lt;p&gt;I just don't think grad students or 'tafe' (as it's called in Australia) have the knowledge to sit down at a desk and cut code, you need to mentor them and hold their hand.&lt;/p&gt;

&lt;p&gt;That's not to say ALL grad/tafe students need to have their hand held, you may end up with someone like Mark Zuckerberg, but those types of people are different, Mark was doing programming in the 90's when his father taught him BASIC.&lt;/p&gt;

&lt;p&gt;I think the problem stems from the fact a lot of people get into programming because they think it's easy money, sure with ~10 years experience and good references you can get 100k+, but you just don't walk out of Uni or Tafe into that sort of money. Programming is more of a hobby than a career, it's something you do because your passionate about it, not because you want to get paid lots. After you've been in the industry for... 15+ years? Then you can worry about being paid lots, but prior to that, should be happy you're doing something you love.&lt;/p&gt;

&lt;p&gt;I think 35k is justified because it actually costs the company you're working for, to mentor you, and hold your hand for at-least the first year of your career.&lt;/p&gt;

&lt;p&gt;After a year it's easy to move up the food chain, that first year is the hardest to find a job, and I think it's selfish to whinge for low pay, when an employer can't rely on you to get a task done without asking a billion questions.&lt;/p&gt;

&lt;p&gt;The excuse that you can get an admin job for 40-50k is silly, after a few years in such a role, you're still going to be doing the same old boring shit, at least as a programmer you're going to move up onto bigger and better projects, harder problems to solve, and what you seem to crave so much... more money.&lt;/p&gt;

&lt;p&gt;\&lt;/rant\&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/02/wp7-nights-at-the-round-table-feb-28/</guid><link>http://www.philliphaydon.com/2011/02/wp7-nights-at-the-round-table-feb-28/</link><a10:author><a10:name /></a10:author><title>WP7 Nights at the Round Table - Feb 28</title><description>&lt;p&gt;&lt;a href="http://www.nickharris.net/2011/02/wp7-nights-at-the-round-table-feb-28/"&gt;http://www.nickharris.net/2011/02/wp7-nights-at-the-round-table-feb-28/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Event: *&lt;/em&gt;&lt;br /&gt;
WP7 Nights at the Round Table - Feb 28th Sydney&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Purpose: *&lt;/em&gt;&lt;br /&gt;
Let's get together for some drinks to trade WP7 Dev stories, demos or seek free advice from other devs to help get your app off the ground and into Marketplace. This event will be informal, around bar tables, so bring along your device or laptop if you wish to show people what you have been up to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Let us know your coming: *&lt;/em&gt;&lt;br /&gt;
If your on LinkedIn please indicate your attendance here - &lt;a href="http://events.linkedin.com/WP7-Nights-Round-Table-Feb-28th/pub/571016"&gt;http://events.linkedin.com/WP7-Nights-Round-Table-Feb-28th/pub/571016&lt;/a&gt; or in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Date, Time, Location: *&lt;/em&gt;&lt;br /&gt;
6-8pm&lt;br /&gt;
Tues 28th Feb 2010&lt;br /&gt;
City Hotel,&lt;br /&gt;
Corner of King and Kent St, Sydney CBD.&lt;/p&gt;
</description><pubDate>Fri, 18 Feb 2011 16:00:00 Z</pubDate><a10:updated>2011-02-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;a href="http://www.nickharris.net/2011/02/wp7-nights-at-the-round-table-feb-28/"&gt;http://www.nickharris.net/2011/02/wp7-nights-at-the-round-table-feb-28/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Event: *&lt;/em&gt;&lt;br /&gt;
WP7 Nights at the Round Table - Feb 28th Sydney&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Purpose: *&lt;/em&gt;&lt;br /&gt;
Let's get together for some drinks to trade WP7 Dev stories, demos or seek free advice from other devs to help get your app off the ground and into Marketplace. This event will be informal, around bar tables, so bring along your device or laptop if you wish to show people what you have been up to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Let us know your coming: *&lt;/em&gt;&lt;br /&gt;
If your on LinkedIn please indicate your attendance here - &lt;a href="http://events.linkedin.com/WP7-Nights-Round-Table-Feb-28th/pub/571016"&gt;http://events.linkedin.com/WP7-Nights-Round-Table-Feb-28th/pub/571016&lt;/a&gt; or in the comments section below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*Date, Time, Location: *&lt;/em&gt;&lt;br /&gt;
6-8pm&lt;br /&gt;
Tues 28th Feb 2010&lt;br /&gt;
City Hotel,&lt;br /&gt;
Corner of King and Kent St, Sydney CBD.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/not-lazyload-eager-loading-with-nhibernate-3-0/</guid><link>http://www.philliphaydon.com/2011/01/not-lazyload-eager-loading-with-nhibernate-3-0/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Not.LazyLoad - Eager Loading with NHibernate 3.0</title><description>&lt;p&gt;A friend asked me about fetching relationships with NHibernate when something couldn't be lazy-loaded.&lt;/p&gt;

&lt;p&gt;The reason it couldn't be lazy-loaded was because he uses Session-Per-Call, my preference is Session-Per-Request. (this is web based, I've never actually used NHibernate in a non-web scenario, yet)&lt;/p&gt;

&lt;p&gt;The solution he's currently using is to turn off lazy-loading at the mapping. This is all kinds of bad.&lt;/p&gt;

&lt;p&gt;I think it's best to demonstrate why turning off lazy-loading at the mapping is bad. I've come up with a, well what I consider pretty standard Blog.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nothing special but needed something that has a few relationship"s. (I think you can click that image to make it bigger)&lt;/p&gt;

</description><pubDate>Sat, 29 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-29T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A friend asked me about fetching relationships with NHibernate when something couldn't be lazy-loaded.&lt;/p&gt;

&lt;p&gt;The reason it couldn't be lazy-loaded was because he uses Session-Per-Call, my preference is Session-Per-Request. (this is web based, I've never actually used NHibernate in a non-web scenario, yet)&lt;/p&gt;

&lt;p&gt;The solution he's currently using is to turn off lazy-loading at the mapping. This is all kinds of bad.&lt;/p&gt;

&lt;p&gt;I think it's best to demonstrate why turning off lazy-loading at the mapping is bad. I've come up with a, well what I consider pretty standard Blog.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Nothing special but needed something that has a few relationship"s. (I think you can click that image to make it bigger)&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So as we can see, a Post has 4 relationships, and a Comment has a relationship back to the Post and User.&lt;/p&gt;

&lt;p&gt;I've mapped it and created some test data:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/stuffz/NH-Blog-Mappings.cs.txt"&gt;View Full Maps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/stuffz/NH-Blog-Scripts.sql.txt"&gt;View SQL Script&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right, so the maps are set to Not LazyLoad the relationships.&lt;/p&gt;

&lt;h3&gt;Post&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class PostMap : ClassMap&amp;lt;Post&amp;gt;
{
    public PostMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Title);
        Map(x =&amp;gt; x.Content);
        Map(x =&amp;gt; x.PublishedAt);
        References(x =&amp;gt; x.Author)
            .Column("UserId")
            .Not.LazyLoad();

        HasManyToMany(x =&amp;gt; x.Tags)
            .Table("PostTags")
            .ParentKeyColumn("PostId")
            .ChildKeyColumn("TagId")
            .Not.LazyLoad();

        HasManyToMany(x =&amp;gt; x.Categories)
            .Table("PostCategories")
            .ParentKeyColumn("PostId")
            .ChildKeyColumn("CategoryId")
            .Not.LazyLoad();

        HasMany(x =&amp;gt; x.Comments)
            .KeyColumn("PostId")
            .Inverse()
            .Not.LazyLoad();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Comment&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class CommentMap : ClassMap&amp;lt;Comment&amp;gt;
{
    public CommentMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Content);
        References(x =&amp;gt; x.Commenter)
            .Column("UserId")
            .Not.LazyLoad();

        References(x =&amp;gt; x.Post)
            .Column("PostId")
            .Not.LazyLoad();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I haven't mapped any relationships the other way, keeping it simple, stupid. &lt;/p&gt;

&lt;p&gt;Right, so lets assume we wanted to load Post 1, and display the Title and the Categories the post was in. We didn't care about the User, or the Comments, or anything like that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sessionFactory = new SessionFactoryManager().CreateSessionFactory();
using (var session = sessionFactory.OpenSession())
{
    var post = session.Query&amp;lt;Post&amp;gt;()
                        .SingleOrDefault(x =&amp;gt; x.Id == 1);

    Console.WriteLine("Post: " + post.Title);
    Console.WriteLine("Category: ");

    post.Categories.ForEach(x =&amp;gt; Console.WriteLine(x.Name));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were writing the query ourselves, all we would want is the Post, and the Categories, well because we mapped all the references and collections as Not.LazyLoad, NHibernate is kind enough to go and grab that information for us. The SQL Generated results in:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;(Image is screen shot from &lt;a href="http://www.nhprof.com/"&gt;NHProf&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;AHHHHH Bad bad bad!!! It's loaded all that information we don't care about!&lt;/p&gt;

&lt;p&gt;Right, lets set everything back to normal, and leave Lazy Loading on! Run the same query, and see what happens.&lt;/p&gt;

&lt;h3&gt;Post&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class PostMap : ClassMap&amp;lt;Post&amp;gt;
{
    public PostMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Title);
        Map(x =&amp;gt; x.Content);
        Map(x =&amp;gt; x.PublishedAt);
        References(x =&amp;gt; x.Author)
            .Column("UserId");

        HasManyToMany(x =&amp;gt; x.Tags)
            .Table("PostTags")
            .ParentKeyColumn("PostId")
            .ChildKeyColumn("TagId");

        HasManyToMany(x =&amp;gt; x.Categories)
            .Table("PostCategories")
            .ParentKeyColumn("PostId")
            .ChildKeyColumn("CategoryId");

        HasMany(x =&amp;gt; x.Comments)
            .KeyColumn("PostId")
            .Inverse();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Comment&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;public class CommentMap : ClassMap&amp;lt;Comment&amp;gt;
{
    public CommentMap()
    {
        Id(x =&amp;gt; x.Id);
        Map(x =&amp;gt; x.Content);
        References(x =&amp;gt; x.Commenter)
            .Column("UserId");

        References(x =&amp;gt; x.Post)
            .Column("PostId");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets see what happens now.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Great! Much nicer, we haven't got all that information we didn't want. The only problem is, what about this scenario?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sessionFactory = new SessionFactoryManager().CreateSessionFactory();
Post post;

using (var session = sessionFactory.OpenSession())
{
    post = session.Query&amp;lt;Post&amp;gt;()
                  .SingleOrDefault(x =&amp;gt; x.Id == 1);

    Console.WriteLine("Post: " + post.Title);
}

Console.WriteLine("Category: ");
post.Categories.ForEach(x =&amp;gt; Console.WriteLine(x.Name));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lets assume that the 'using' block was a call to a repository, to get a particular post, and we needed to iterate over the categories a little bit later?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Oh no, not what we wanted  because the object is now disconnected from the session, it can't lazy load the categories. This I suspect is the issue my friend got.&lt;/p&gt;

&lt;p&gt;So the solution? To Eager Load!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post post;
using (var session = sessionFactory.OpenSession())
{
    post = session.Query&amp;lt;Post&amp;gt;()
                    .Where(x =&amp;gt; x.Id == 1)
                    .Fetch(x =&amp;gt; x.Categories)
                    .SingleOrDefault();

    Console.WriteLine("Post: " + post.Title);
}

Console.WriteLine("Category: ");
post.Categories.ForEach(x =&amp;gt; Console.WriteLine(x.Name));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This results in a single query being issued:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-5.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;What's this query look like?&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-6.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Not bad! Definitely saves a second trip to the database to grab the categories. But there's a problem, there types of queries result in cartesian product result-set. (Think that's what it's called)&lt;/p&gt;

&lt;p&gt;If we issue that query our-self we end up with this:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-lazy-load-7.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We actually get Post back twice, because it's got two categories. It's only because we told NHibernate we wanted a single result that it knew the Root aggregate is distinct.&lt;/p&gt;

&lt;p&gt;So what happens if we wanted more than 1 post, and eager load the relationships?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var sessionFactory = new SessionFactoryManager().CreateSessionFactory();
IList&amp;lt;Post&amp;gt; posts;

using (var session = sessionFactory.OpenSession())
{
    posts = session.QueryOver&amp;lt;Post&amp;gt;()
                    .Fetch(x =&amp;gt; x.Categories).Eager
                    .List();
}

foreach (var post in posts)
{
    Console.WriteLine("Post: " + post.Title);

    Console.WriteLine("Categories:");

    foreach (var category in post.Categories)
    {
        Console.WriteLine(" - " + category.Name);
    }

    Console.WriteLine("--");
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special, right? Except... because we get duplicate posts in the last query, imagine what we get when we actually iterate over this result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post: Post 1
Categories:
- Category 1
- Category 3
--
Post: Post 1
Categories:
- Category 1
- Category 3
--
Post: Post 2
Categories:
- Category 2
--
Post: Post 3
Categories:
- Category 1
- Category 2
- Category 3
--
Post: Post 3
Categories:
- Category 1
- Category 2
- Category 3
--
Post: Post 3
Categories:
- Category 1
- Category 2
- Category 3
--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Scary right? We can fix this using NH Transformations.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using (var session = sessionFactory.OpenSession())
{
    posts = session.QueryOver&amp;lt;Post&amp;gt;()
                    .Fetch(x =&amp;gt; x.Categories).Eager
                    .TransformUsing(new DistinctRootEntityResultTransformer())
                    .List();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This formats the result to be distinct posts with the related Categories like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Post: Post 1
Categories:
- Category 1
- Category 3
--
Post: Post 2
Categories:
- Category 2
--
Post: Post 3
Categories:
- Category 1
- Category 2
- Category 3
--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Perfect!&lt;/p&gt;

&lt;p&gt;As you can imagine, eager loading is a pretty powerful feature, but we still have to be careful to not load too many relationships. Because eager loading doesn't break the relationships into different result-set queries, we can end up with inefficient queries because there are too many, or possibly too complex joins.&lt;/p&gt;

&lt;p&gt;We could over-come some of these BY we, Not.LazyLoadby creating the object graph ourselves by using NHibernates &lt;code&gt;Future&amp;lt;T&amp;gt;&lt;/code&gt; feature, to batch queries together to reduce the number of database trips. That's a post for another day.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/let-keyword-in-orms/</guid><link>http://www.philliphaydon.com/2011/01/let-keyword-in-orms/</link><a10:author><a10:name /></a10:author><title>Let Keyword in ORMs</title><description>&lt;p&gt;A while ago &lt;a href="http://www.mindscapehq.com/"&gt;MindScape&lt;/a&gt; posted a new feature called &lt;a href="http://www.mindscapehq.com/blog/index.php/2010/09/14/ninja-domain-properties-in-lightspeed/"&gt;Ninja Properties&lt;/a&gt; for their ORM, LightSpeed. Their post happened to be a scenario I used to solve with LINQ 2 SQL using the 'let' keyword to create a composite type to query against.&lt;/p&gt;

&lt;p&gt;This would allow you to do something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var poo = from s in ctx.Members
          let fullname = s.FirstName + " " + s.LastName
          where fullname == "Robert Williams"
          select s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This nifty query would generate SQL like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT [t1].[Id], [t1].[FirstName], [t1].[LastName]
FROM (
    SELECT [t0].[Id], [t0].[FirstName], 
           [t0].[LastName], 
           ([t0].[FirstName] + ' ') + [t0].[LastName] AS [value]
    FROM [Member] AS [t0]
    ) AS [t1]
WHERE [t1].[value] = 'Robert Williams'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After commenting in their blog post about it they implemented it and put it into the nightly build. So after some months I finally got around to testing it, for a couple of reasons. Back when NHibernate 3.0 was in Alpha, this technique didn't work! So I thought I would test it out and see if it does, as well as checkout the SQL that's generated.&lt;/p&gt;

</description><pubDate>Fri, 28 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-28T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A while ago &lt;a href="http://www.mindscapehq.com/"&gt;MindScape&lt;/a&gt; posted a new feature called &lt;a href="http://www.mindscapehq.com/blog/index.php/2010/09/14/ninja-domain-properties-in-lightspeed/"&gt;Ninja Properties&lt;/a&gt; for their ORM, LightSpeed. Their post happened to be a scenario I used to solve with LINQ 2 SQL using the 'let' keyword to create a composite type to query against.&lt;/p&gt;

&lt;p&gt;This would allow you to do something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var poo = from s in ctx.Members
          let fullname = s.FirstName + " " + s.LastName
          where fullname == "Robert Williams"
          select s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This nifty query would generate SQL like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT [t1].[Id], [t1].[FirstName], [t1].[LastName]
FROM (
    SELECT [t0].[Id], [t0].[FirstName], 
           [t0].[LastName], 
           ([t0].[FirstName] + ' ') + [t0].[LastName] AS [value]
    FROM [Member] AS [t0]
    ) AS [t1]
WHERE [t1].[value] = 'Robert Williams'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After commenting in their blog post about it they implemented it and put it into the nightly build. So after some months I finally got around to testing it, for a couple of reasons. Back when NHibernate 3.0 was in Alpha, this technique didn't work! So I thought I would test it out and see if it does, as well as checkout the SQL that's generated.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I'm using the following ORM's&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LightSpeed 3.11 Nightly Build (3.1 it doesn't work)&lt;/li&gt;
&lt;li&gt;NHibernate 3.0&lt;/li&gt;
&lt;li&gt;Linq 2 Sql&lt;/li&gt;
&lt;li&gt;Entity Framework 4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data model is simple, but I have two scenarios I want to test. I created a Member and Task. The Member has a One-to-Many with Tasks.The test data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;insert into member (firstname, lastname) values ('Robert', 'Williams')
insert into member (firstname, lastname) values ('Michael', 'Jones')
insert into member (firstname, lastname) values ('William', 'Brown')
insert into member (firstname, lastname) values ('David', 'Davis')
insert into member (firstname, lastname) values ('Richard', 'Miller')
insert into member (firstname, lastname) values ('Charles', 'Wilson')
insert into task (MemberId, Name) values(1, 'Task 1')
insert into task (MemberId, Name) values(1, 'Task 2')
insert into task (MemberId, Name) values(1, 'Task 3')
insert into task (MemberId, Name) values(1, 'Task 4')
insert into task (MemberId, Name) values(2, 'Task 1')
insert into task (MemberId, Name) values(2, 'Task 2')
insert into task (MemberId, Name) values(2, 'Task 3')
insert into task (MemberId, Name) values(3, 'Task 4')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; Find all Members where fullname contains 'w', case insensitive (lowercase the fullname)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; Find all Members who have more than 2 tasks.&lt;/p&gt;

&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These tests are not to say one ORM is better than another, I did this purely out of curiosity and am sharing my results.&lt;/span&gt; &lt;/p&gt;

&lt;h2&gt;Scenario 1&lt;/h2&gt;

&lt;p&gt;I ran the same query against each ORM (to see the full script click here), the query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var poo = from s in ctx.Members
            let fullname = s.FirstName + " " + s.LastName
            where fullname.ToLower().Contains("w")
            select s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All queries are identical with the exception of the 'in' part, varying between ORMs.&lt;/p&gt;

&lt;p&gt;LightSpeed : &lt;code&gt;from s in uow.Members&lt;/code&gt;&lt;br /&gt;
NHibernate 3.0 : &lt;code&gt;from s in session.Query&amp;lt;NHibernate.Member&amp;gt;()&lt;/code&gt;&lt;br /&gt;
Linq 2 Sql : &lt;code&gt;from s in ctx.Members&lt;/code&gt;&lt;br /&gt;
Entity Framework 4: &lt;code&gt;from s in mmc.Members&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The output was as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----
LINQ 2 SQL
Robert
William
Charles
----
LightSpeed
Robert
William
Charles
----
NHibernate 3.0
Robert
William
Charles
----
EntityFramework 4
Robert
William
Charles
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All ORM's worked perfectly. How about the SQL Generated from these?&lt;/p&gt;

&lt;h3&gt;Linq 2 SQL:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT [t1].[Id], [t1].[FirstName], [t1].[LastName]
FROM (
    SELECT [t0].[Id], [t0].[FirstName], 
           [t0].[LastName], 
           ([t0].[FirstName] + ' ') + [t0].[LastName] AS [value]
    FROM [Member] AS [t0]
    ) AS [t1]
WHERE LOWER([t1].[value]) LIKE '%w%'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;LightSpeed:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT
  Member.Id AS [Member.Id],
  Member.FirstName AS [Member.FirstName],
  Member.LastName AS [Member.LastName]
FROM
  Member
WHERE
  LOWER(((Member.FirstName + ' ') + Member.LastName)) LIKE '%w%'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;NHibernate:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;select member0_.Id as Id0_, 
       member0_.FirstName as FirstName0_, 
       member0_.LastName as LastName0_ 
from [Member] member0_ 
where lower(member0_.FirstName+' '+member0_.LastName) like ('%'+'w'+'%')
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Entity Framework 4.0:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT 
    [Extent1].[Id] AS [Id], 
    [Extent1].[FirstName] AS [FirstName], 
    [Extent1].[LastName] AS [LastName]
FROM [dbo].[Member] AS [Extent1]
WHERE LOWER([Extent1].[FirstName] + N' ' + [Extent1].[LastName]) 
      LIKE N'%w%'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: The first 3 queries are RPC's and show in SQL Profiler with parameters, I've stripped the parameters out to show the readable query.&lt;/p&gt;

&lt;p&gt;Great, so all 3 work fine. Tho I don't like the SQL generated by Linq 2 Sql. Hard to believe Stack Overflow runs off it.&lt;/p&gt;

&lt;h2&gt;Scenario 2&lt;/h2&gt;

&lt;p&gt;The second scenario is again, the exact same query, you could write this multiple ways, however I found it cleaner to use 'let' back when I was using Linq 2 Sql. (to see the full script click here), the query is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var poo = from s in ctx.Members
            let tasks = s.Tasks.COUNT() as Computed
            where tasks &amp;gt; 2
            select s;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the only difference is the 'in' part of the query.&lt;/p&gt;

&lt;p&gt;The output was as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----
LINQ 2 SQL
Robert
Michael
----
LightSpeed
Exception: Specified method is not supported.
----
NHibernate 3.0
Robert
Michael
----
EntityFramework 4
Robert
Michael
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All achieved the same results, except for LightSpeed. However I didn't think NHibernate would support this?!? Seems they have done quite a bit of work implementing LINQ since Alpha.&lt;/p&gt;

&lt;p&gt;How about the SQL generated?&lt;/p&gt;

&lt;h3&gt;Linq 2 Sql:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT [t2].[Id], [t2].[FirstName], [t2].[LastName]
FROM (
    SELECT [t0].[Id], [t0].[FirstName], [t0].[LastName], (
        SELECT COUNT(*)
        FROM [Task] AS [t1]
        WHERE [t1].[MemberId] = [t0].[Id]
        ) AS [value]
    FROM [Member] AS [t0]
    ) AS [t2]
WHERE [t2].[value] &amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;NHibernate:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;select member0_.Id as Id0_, 
       member0_.FirstName as FirstName0_, 
       member0_.LastName as LastName0_ 
from [Member] member0_ 
where (select cast(count(*) as INT) 
        from [Task] tasks1_ 
        where member0_.Id=tasks1_.MemberId) &amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Entity Framework:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;SELECT 
[Project1].[Id] AS [Id], 
[Project1].[FirstName] AS [FirstName], 
[Project1].[LastName] AS [LastName]
FROM ( SELECT 
    [Extent1].[Id] AS [Id], 
    [Extent1].[FirstName] AS [FirstName], 
    [Extent1].[LastName] AS [LastName], 
    (SELECT 
        COUNT(1) AS [A1]
        FROM [dbo].[Task] AS [Extent2]
        WHERE [Extent1].[Id] = [Extent2].[MemberId]) AS [C1]
    FROM [dbo].[Member] AS [Extent1]
)  AS [Project1]
WHERE [Project1].[C1] &amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I get the feeling that NHibernate generates more efficient queries than L2S/EF. Might be worth doing some performance testing against them oneday. :)&lt;/p&gt;

&lt;p&gt;Anyway as you can see, 'let' keyword allows you to create some nice queries that are easy to ready instead of trying to complicate things in your 'where' clause, when writing LINQ.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/mindscape-nhibernate-designer-discount/</guid><link>http://www.philliphaydon.com/2011/01/mindscape-nhibernate-designer-discount/</link><a10:author><a10:name /></a10:author><title>Mindscape NHibernate Designer Discount</title><description>&lt;p&gt;Mindscape have a 60% discount on their NHibernate Designer.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2011/01/20/60-off-nhibernate-designer-act-fast/"&gt;http://www.mindscapehq.com/blog/index.php/2011/01/20/60-off-nhibernate-designer-act-fast/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to obtain this special
  When making your purchase please enter the following discount code:
  NHSPECIAL
  You should immediately see the price drop to $99, saving you $150 USD!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great tool for anyone who hates writing XML or loves GUI's.&lt;/p&gt;
</description><pubDate>Thu, 20 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-20T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Mindscape have a 60% discount on their NHibernate Designer.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/blog/index.php/2011/01/20/60-off-nhibernate-designer-act-fast/"&gt;http://www.mindscapehq.com/blog/index.php/2011/01/20/60-off-nhibernate-designer-act-fast/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;How to obtain this special
  When making your purchase please enter the following discount code:
  NHSPECIAL
  You should immediately see the price drop to $99, saving you $150 USD!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Great tool for anyone who hates writing XML or loves GUI's.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/lightspeed-and-eager-loaded-properties/</guid><link>http://www.philliphaydon.com/2011/01/lightspeed-and-eager-loaded-properties/</link><a10:author><a10:name /></a10:author><category>LightSpeed</category><title>LightSpeed and Eager Loaded properties</title><description>&lt;p&gt;Today &lt;a href="http://www.mindscapehq.com/"&gt;Mindscape&lt;/a&gt;, the makers of the ORM &lt;a href="http://www.mindscapehq.com/products/lightspeed"&gt;LightSpeed&lt;/a&gt; and other awesome &lt;a href="http://www.mindscapehq.com/products/"&gt;products&lt;/a&gt; posted a blog on &lt;a href="http://www.mindscapehq.com/blog/index.php/2011/01/19/controlling-lightspeed-entity-loading-with-named-aggregates/"&gt;Lazy-Loading/Eager-Loading properties&lt;/a&gt; with LightSpeed.&lt;/p&gt;

&lt;p&gt;Why can't NHibernate do this! And when I say why can't NHibernate do this, I mean, why can't NHibernate do this with Query/QueryOver.&lt;/p&gt;

&lt;p&gt;Ayende detailed this time last year, the ability to &lt;a href="http://ayende.com/Blog/archive/2010/01/27/nhibernate-new-feature-lazy-properties.aspx"&gt;lazy-load properties&lt;/a&gt;, but currently Query/QueryOver only support One-To-Many and One-To-One relationships.&lt;/p&gt;

&lt;p&gt;NHibernate will support the ability to Lazy-Load a property but you can't specify it to be eager loaded.&lt;/p&gt;

&lt;p&gt;So you do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map(x =&amp;gt; x.FullDescription).CustomSqlType("NTEXT") 
                           .LazyLoad();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running a query would result in:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/lightspeed-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Great... But you currently cannot do:&lt;/p&gt;

</description><pubDate>Wed, 19 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-19T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Today &lt;a href="http://www.mindscapehq.com/"&gt;Mindscape&lt;/a&gt;, the makers of the ORM &lt;a href="http://www.mindscapehq.com/products/lightspeed"&gt;LightSpeed&lt;/a&gt; and other awesome &lt;a href="http://www.mindscapehq.com/products/"&gt;products&lt;/a&gt; posted a blog on &lt;a href="http://www.mindscapehq.com/blog/index.php/2011/01/19/controlling-lightspeed-entity-loading-with-named-aggregates/"&gt;Lazy-Loading/Eager-Loading properties&lt;/a&gt; with LightSpeed.&lt;/p&gt;

&lt;p&gt;Why can't NHibernate do this! And when I say why can't NHibernate do this, I mean, why can't NHibernate do this with Query/QueryOver.&lt;/p&gt;

&lt;p&gt;Ayende detailed this time last year, the ability to &lt;a href="http://ayende.com/Blog/archive/2010/01/27/nhibernate-new-feature-lazy-properties.aspx"&gt;lazy-load properties&lt;/a&gt;, but currently Query/QueryOver only support One-To-Many and One-To-One relationships.&lt;/p&gt;

&lt;p&gt;NHibernate will support the ability to Lazy-Load a property but you can't specify it to be eager loaded.&lt;/p&gt;

&lt;p&gt;So you do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Map(x =&amp;gt; x.FullDescription).CustomSqlType("NTEXT") 
                           .LazyLoad();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running a query would result in:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/lightspeed-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Great... But you currently cannot do:&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;pre&gt;&lt;code&gt;var video = session.QueryOver&amp;lt;Video&amp;gt;()
                   .Fetch(x =&amp;gt; x.FullDescription).Eager
                   .List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will execute, the exact same query.&lt;/p&gt;

&lt;p&gt;I do have one gripe with the way LightSpeed works tho, and that is that you have to give your aggregate as a string name, I really think they should give the ability to specify the property(ies) via a lambda.&lt;/p&gt;

&lt;p&gt;Without giving it a test drive, I feel if I changed the name of the aggregate and forgot to update everywhere it was referenced, I'm going to end up with a maintenance nightmare.&lt;/p&gt;

&lt;p&gt;Anyway checkout LightSpeed, it's awesome, it's everything Entity Framework should have been.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mindscapehq.com/products/lightspeed"&gt;http://www.mindscapehq.com/products/lightspeed&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/revisiting-exists-in-nhibernate-3-0-and-queryover/</guid><link>http://www.philliphaydon.com/2011/01/revisiting-exists-in-nhibernate-3-0-and-queryover/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Revisiting 'Exists' in NHibernate 3.0 and QueryOver</title><description>&lt;p&gt;A while ago I wrote about &lt;a href="http://www.philliphaydon.com/2010/09/queryover-with-nhibernate-3-lovin-it/"&gt;my experience with NHibernate 3.0 and Query over&lt;/a&gt; by having a go at converting an application to NH3.0, and faced the challenge of writing a query which contained an 'exists' where clause. At the time my solution resulted in an 'in' clause since I couldn't work out how to do an exists.&lt;/p&gt;

&lt;p&gt;Today at work I faced the same challenge, except this time I solved it  WOO Yay for solving things.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We have a many-to-many relationship between Jobs and Roles. Which looks something along the lines of:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-queryover-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I cut a bunch of stuff out but you get the idea.&lt;/p&gt;

</description><pubDate>Tue, 18 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-18T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;A while ago I wrote about &lt;a href="http://www.philliphaydon.com/2010/09/queryover-with-nhibernate-3-lovin-it/"&gt;my experience with NHibernate 3.0 and Query over&lt;/a&gt; by having a go at converting an application to NH3.0, and faced the challenge of writing a query which contained an 'exists' where clause. At the time my solution resulted in an 'in' clause since I couldn't work out how to do an exists.&lt;/p&gt;

&lt;p&gt;Today at work I faced the same challenge, except this time I solved it  WOO Yay for solving things.&lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;We have a many-to-many relationship between Jobs and Roles. Which looks something along the lines of:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-queryover-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;I cut a bunch of stuff out but you get the idea.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;So what was required was on the screen was all the Jobs, you expand the Jobs and it lists all the Roles for that Job, sweet. When you add a new Role, it brings up a Drop Down List with all the Roles that are not assigned to the Job.&lt;/p&gt;

&lt;p&gt;The existing query was along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT   r.RoleId,
         r.Name,
         r.IsEnabled,
         r.RoleType
FROM     Role r WITH (NOLOCK)
WHERE    [IsEnabled] = 1
         AND r.RoleId NOT IN (SELECT RoleId
                              FROM   JobRole j
                              WHERE  j.JobId = 2
                                     AND j.RoleId != 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked great, except it was hard coded in XML and someone added a new column,and it brokeded stuff. Good thing is we are migrating to Fluent NHibernate.&lt;/p&gt;

&lt;p&gt;Now I could have written this query to be identical to the original,except I decided I wanted to get that damn exists working.&lt;/p&gt;

&lt;h2&gt;The Solution&lt;/h2&gt;

&lt;p&gt;The first thing I noticed, which I did NOT see when i originally tried this back on Alpha was 'WhereExists'&lt;/p&gt;

&lt;p&gt;My first attempt (&lt;strong&gt;&lt;em&gt;which did NOT work&lt;/em&gt;&lt;/strong&gt;) was as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var existing = QueryOver.Of&amp;lt;JobRole&amp;gt;()
                        .Where(x =&amp;gt; x.Job.JobId == jobId)
                        .And(x =&amp;gt; x.Role.RoleId != roleId)
                        .Select(x =&amp;gt; x.Role);

result = Session.QueryOver&amp;lt;Role&amp;gt;()
                .Where(x =&amp;gt; x.IsEnabled)
                .WithSubquery.WhereNotExists(existing)
                .OrderBy(x =&amp;gt; x.Name).Asc
                .List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This produced SQL that was relatively close! But the outer query wasn't filtering the sub query.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT   this_.RoleId          as RoleId4_0_,
         this_.Name            as Name4_0_,
         this_.IsEnabled       as IsEnabled4_0_,
         this_.RoleType        as RoleType4_0_
FROM     Role this_
WHERE    this_.IsEnabled = 1 /* @p0 */
         and not exists (SELECT this_0_.RoleId as y0_
                         FROM   JobRole this_0_
                         WHERE  this_0_.JobId = 4 /* @p1 */
                                and not (this_0_.RoleId = 0 /* @p2 */))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So I created an alias (&lt;strong&gt;&lt;em&gt;which did work&lt;/em&gt;&lt;/strong&gt;) like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Role roleAlias = null;
var existing = QueryOver.Of&amp;lt;JobRole&amp;gt;()
                        .Where(x =&amp;gt; x.Job.JobId == jobId)
                        .And(x =&amp;gt; x.Role.RoleId != roleId)
                        .And(x =&amp;gt; x.Role.RoleId == roleAlias.RoleId)
                        .Select(x =&amp;gt; x.Role);

result = Session.QueryOver&amp;lt;Role&amp;gt;(() =&amp;gt; roleAlias)
                .Where(x =&amp;gt; x.IsEnabled)
                .WithSubquery.WhereNotExists(existing)
                .OrderBy(x =&amp;gt; x.Name).Asc
                .List();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The alias is null to begin with, and I use it in the detached query (the 2nd And), then when I create the outer query which will be my results, I create the alias by specifying it in the QueryOver. This wires up the SQL to use the outer query to filter the sub query like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT   this_.RoleId          as RoleId4_0_,
         this_.Name            as Name4_0_,
         this_.IsEnabled       as IsEnabled4_0_,
         this_.RoleType        as RoleType4_0_
FROM     Role this_
WHERE    this_.IsEnabled = 1 /* @p0 */
         and not exists (SELECT this_0_.RoleId as y0_
                         FROM   JobRole this_0_
                         WHERE  this_0_.JobId = 4 /* @p1 */
                                and not (this_0_.RoleId = 0 /* @p2 */)
                                and this_0_.RoleId = this_.RoleId)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So it turns out it's actually really easy, I just wish there was more documentation on this stuff since books like &lt;a href="https://www.packtpub.com/nhibernate-3-0-cookbook/book"&gt;NHibernate 3.0 Cookbook&lt;/a&gt; fail at giving any real detail on NH3.0... No offense to &lt;a href="http://jasondentler.com/blog"&gt;Jason&lt;/a&gt; because I think the book is great, but it could have been much better if it focused on NH3.0 and using it rather than having so much non-3.0 related stuff in it.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2011/01/system-data-sqlite-isolationlevel-exception/</guid><link>http://www.philliphaydon.com/2011/01/system-data-sqlite-isolationlevel-exception/</link><a10:author><a10:name /></a10:author><title>System.Data.SQLite isolationLevel Exception</title><description>&lt;p&gt;I introduced SQLite to our Unit Testing at work to aid with testing the stuff written with NHibernate, most of our repositories are rather simple but some of them require some specific criteria that it would be nice to test our queries work.&lt;/p&gt;

&lt;p&gt;The problem is some of the queries have a transaction with the &lt;code&gt;IsolationLevel&lt;/code&gt; as &lt;code&gt;ReadUncommitted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Everything works perfectly fine until it comes to testing, the problem is SQLite does not support anything other than &lt;code&gt;Serializable&lt;/code&gt; and &lt;code&gt;ReadCommitted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I spent a while trying to see if there was a way to have an interceptor for NHibernate to capture the &lt;code&gt;BeginRequest&lt;/code&gt; and replace the isolation level with something that would work, when that failed I took a look at extending the SQLite dialect but that just became confusing.&lt;/p&gt;

&lt;p&gt;In the end I reflected the &lt;code&gt;System.Data.SQLite&lt;/code&gt; assembly (before i downloaded the sourcecode) to see what was happening when &lt;code&gt;BeginTransaction&lt;/code&gt; was being called.&lt;/p&gt;

&lt;p&gt;There's two places it checks, the first is in &lt;code&gt;SQLiteConnection&lt;/code&gt; under &lt;code&gt;BeginTransaction&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (isolationLevel != IsolationLevel.Serializable &amp;amp;&amp;amp; isolationLevel != IsolationLevel.ReadCommitted)
    throw new ArgumentException("isolationLevel");
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Sat, 01 Jan 2011 16:00:00 Z</pubDate><a10:updated>2011-01-01T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I introduced SQLite to our Unit Testing at work to aid with testing the stuff written with NHibernate, most of our repositories are rather simple but some of them require some specific criteria that it would be nice to test our queries work.&lt;/p&gt;

&lt;p&gt;The problem is some of the queries have a transaction with the &lt;code&gt;IsolationLevel&lt;/code&gt; as &lt;code&gt;ReadUncommitted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Everything works perfectly fine until it comes to testing, the problem is SQLite does not support anything other than &lt;code&gt;Serializable&lt;/code&gt; and &lt;code&gt;ReadCommitted&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I spent a while trying to see if there was a way to have an interceptor for NHibernate to capture the &lt;code&gt;BeginRequest&lt;/code&gt; and replace the isolation level with something that would work, when that failed I took a look at extending the SQLite dialect but that just became confusing.&lt;/p&gt;

&lt;p&gt;In the end I reflected the &lt;code&gt;System.Data.SQLite&lt;/code&gt; assembly (before i downloaded the sourcecode) to see what was happening when &lt;code&gt;BeginTransaction&lt;/code&gt; was being called.&lt;/p&gt;

&lt;p&gt;There's two places it checks, the first is in &lt;code&gt;SQLiteConnection&lt;/code&gt; under &lt;code&gt;BeginTransaction&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (isolationLevel != IsolationLevel.Serializable &amp;amp;&amp;amp; isolationLevel != IsolationLevel.ReadCommitted)
    throw new ArgumentException("isolationLevel");
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The second is in the same file under Open:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (_defaultIsolation != IsolationLevel.Serializable &amp;amp;&amp;amp; _defaultIsolation != IsolationLevel.ReadCommitted)
    throw new NotSupportedException("Invalid Default IsolationLevel specified");
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The second one is only if you've configured SQLite to have a default isolationLevel, so I've changed both.&lt;/p&gt;

&lt;p&gt;So before the change, if i ran the following code (to demonstrate the scenario):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[TestMethod] 
public void SQLite_WithTransction_ShouldNotThowException() 
{ 
    object id;

    using (var tx = _session.BeginTransaction(IsolationLevel.ReadUncommitted))
    { 
        id = _session.Save(new Test 
        { 
            Name = "Test" 
        });

        tx.Commit(); 
    }

    Assert.AreEqual(1, Convert.ToInt32(id)); 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the test runs, the following error is thrown:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NHibernate.TransactionException: Begin failed with SQL exception -&gt; System.ArgumentException: isolationLevel&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now if I update the two exceptions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (_defaultIsolation != IsolationLevel.Serializable &amp;amp;&amp;amp; _defaultIsolation != IsolationLevel.ReadCommitted)
    _defaultIsolation = IsolationLevel.ReadCommitted;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (isolationLevel != IsolationLevel.Serializable &amp;amp;&amp;amp; isolationLevel != IsolationLevel.ReadCommitted)
    isolationLevel = _defaultIsolation;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Compile and all that stuff...&lt;/p&gt;

&lt;p&gt;Now when I run the test:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/sqlite-exception-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Problem solved, now I can run unit tests against repositories that happen to use Isolation Levels not supported by SQLite.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.philliphaydon.com/stuffz/System.Data_.SQLite.ForTesting.zip"&gt;System.Data.SQLite.ForTesting.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attached is the assembly if anyone else wants to use it for their tests.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/12/blog-update-to-wordpress-w-sqlsrv/</guid><link>http://www.philliphaydon.com/2010/12/blog-update-to-wordpress-w-sqlsrv/</link><a10:author><a10:name /></a10:author><title>Blog Update to WordPress w/ SqlSrv</title><description>&lt;p&gt;Over the past few days I've moved my blog from BlogEngine.Net to WordPress, since BlogEngine is fail.&lt;/p&gt;

&lt;p&gt;I didn't go with a hosted solution since it costs money just to use my own domain name, infact it costs more to use my own domain name than it cost me to register the damn thing. So I investigated blogs and came across:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wordpress.visitmix.com/development/installing-wordpress-on-sql-server"&gt;http://wordpress.visitmix.com/development/installing-wordpress-on-sql-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems someone or somepeople have ported wordpress to work on SQL Server, so people who are on Windows with SQL Server and don't want to use FailSQL MySQL can take advantage of wordpress.&lt;/p&gt;

&lt;p&gt;As much as I hate PHP after moving to .Net, the one thing the PHP community did right was all the different CMS and Blog solutions out there, something the .Net community lacks. As far as I'm concerned there is not one good .Net blogging solution available.&lt;/p&gt;

&lt;p&gt;Anyway so far I'm happy with the move. &lt;/p&gt;
</description><pubDate>Mon, 27 Dec 2010 16:00:00 Z</pubDate><a10:updated>2010-12-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Over the past few days I've moved my blog from BlogEngine.Net to WordPress, since BlogEngine is fail.&lt;/p&gt;

&lt;p&gt;I didn't go with a hosted solution since it costs money just to use my own domain name, infact it costs more to use my own domain name than it cost me to register the damn thing. So I investigated blogs and came across:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wordpress.visitmix.com/development/installing-wordpress-on-sql-server"&gt;http://wordpress.visitmix.com/development/installing-wordpress-on-sql-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seems someone or somepeople have ported wordpress to work on SQL Server, so people who are on Windows with SQL Server and don't want to use FailSQL MySQL can take advantage of wordpress.&lt;/p&gt;

&lt;p&gt;As much as I hate PHP after moving to .Net, the one thing the PHP community did right was all the different CMS and Blog solutions out there, something the .Net community lacks. As far as I'm concerned there is not one good .Net blogging solution available.&lt;/p&gt;

&lt;p&gt;Anyway so far I'm happy with the move. &lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/12/i-love-clean-client-ids-especially-with-net-2-0/</guid><link>http://www.philliphaydon.com/2010/12/i-love-clean-client-ids-especially-with-net-2-0/</link><a10:author><a10:name /></a10:author><category>ASP.NET</category><title>I love clean client IDs - especially with .Net 2.0!</title><description>&lt;p&gt;ASP.Net 4.0 got a brand spanking new feature. Clean ClientID's! ABOUT BLOODY TIME... Only, I'm working on a legacy application which can't be migrated to 4.0 :(&lt;/p&gt;

&lt;p&gt;So why do we need Nice Readable, predictable ClientID's? I can think of two main reasons, outside of that, I would assume you're doing it wrong.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript, to find elements...&lt;/li&gt;
&lt;li&gt;JavaScript in external files where you can't write spaghetti code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What do I mean by spaghetti code? I mean this stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= txtUserName.ClientID %&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
  var element = $('#&amp;lt;%= txtUserName.ClientID %&amp;gt;');
  var textbox = document.getElementById('&amp;lt;%= txtUserName.ClientID %&amp;gt;');
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I absolutely detest seeing this sort of thing. It makes me sick, and worst of all you can't pull this sort of code back to an external js file. In Web Forms, spaghetti coding is NOT your presentation, your server control is your presentation, the spaghetti code is your binding, and this should be in the codebehind.&lt;/p&gt;

</description><pubDate>Sat, 25 Dec 2010 16:00:00 Z</pubDate><a10:updated>2010-12-25T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;ASP.Net 4.0 got a brand spanking new feature. Clean ClientID's! ABOUT BLOODY TIME... Only, I'm working on a legacy application which can't be migrated to 4.0 :(&lt;/p&gt;

&lt;p&gt;So why do we need Nice Readable, predictable ClientID's? I can think of two main reasons, outside of that, I would assume you're doing it wrong.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JavaScript, to find elements...&lt;/li&gt;
&lt;li&gt;JavaScript in external files where you can't write spaghetti code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What do I mean by spaghetti code? I mean this stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= txtUserName.ClientID %&amp;gt;
&amp;lt;script type="text/javascript"&amp;gt;
  var element = $('#&amp;lt;%= txtUserName.ClientID %&amp;gt;');
  var textbox = document.getElementById('&amp;lt;%= txtUserName.ClientID %&amp;gt;');
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I absolutely detest seeing this sort of thing. It makes me sick, and worst of all you can't pull this sort of code back to an external js file. In Web Forms, spaghetti coding is NOT your presentation, your server control is your presentation, the spaghetti code is your binding, and this should be in the codebehind.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;Right, so what is my solution? Well I basically find all the server controls that are of a particular type, and write the information as a Json array to the HTML doc.&lt;/p&gt;

&lt;p&gt;I've put the project on codeplex and named it, &lt;a href="http://awesomeclientid.codeplex.com/"&gt;Awesome.ClientID&lt;/a&gt;, because everything I do is awesome, atleast I like to think so :)&lt;/p&gt;

&lt;p&gt;There's a few issues and the code is a little messy since I rushed it, but it works.&lt;/p&gt;

&lt;p&gt;It serializes all the controls and you end up with a piece of JavaScript in the HTML Doc. Assume we had a form like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;label&amp;gt;Username: &amp;lt;/label&amp;gt; &amp;lt;asp:textbox id="txtUserName" runat="server" /&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;label&amp;gt;Email: &amp;lt;/label&amp;gt; &amp;lt;asp:textbox id="txtEmail" runat="server" /&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;asp:button id="btnSubmit" runat="server" text="Submit" /&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would get put into the HTML Doc like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt;
//&amp;lt;![CDATA[
  var controls = {
    "txtUserName": "ctl00_ContentPlaceHolder1_txtUserName",
    "txtEmail": "ctl00_ContentPlaceHolder1_txtEmail",
    "btnSubmit": "ctl00_ContentPlaceHolder1_btnSubmit"
  };
//]]&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when you write your JavaScript, instead of writing spaghetti code, you can write it like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script type="text/javascript"&amp;gt;
//&amp;lt;![CDATA[
  var element = document.getElementById(controls.btnSubmit);
//]]&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Neat huh? That's not all tho, sometimes you need may need access to a property. For an example, at work we use a JavaScript charting library, and I need to pass in some widths so I can render the chart with the correct number of bars.&lt;/p&gt;

&lt;p&gt;I have a property I set in my page with an attribute against it 'CanSerializeProperty', this will now get serialized just like the controls:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[CanSerializeProperty]
protected int ScheduleWidth
{
  get; set;
}

&amp;lt;script type="text/javascript"&amp;gt;
//&amp;lt;![CDATA[
  var properties = { "ScheduleWidth": "50" };
//]]&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Originally intended for just .NET 2.0/3.5, the properties feature is pretty handy for .NET 4.0 also.&lt;/p&gt;

&lt;p&gt;I've got some additional features I'm going to add, at the moment it serializes for every page, but I'm going to add an attribute for pages to turn the feature off. And possibly make a web.config section so you can specify the controls you want to serialize. That way you can easily add controls from libraries such as Telerik without needing to recompile the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://awesomeclientid.codeplex.com/"&gt;http://awesomeclientid.codeplex.com/&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/12/moq-using-params-in-the-returns/</guid><link>http://www.philliphaydon.com/2010/12/moq-using-params-in-the-returns/</link><a10:author><a10:name /></a10:author><category>Unit Testing</category><title>Moq-Using Params in the Returns</title><description>&lt;p&gt;Had an interesting scenario to solve today, while I was away a bunch of unit tests got turned off since they broke during some refactoring, I spent the day fixing theses unit tests.&lt;/p&gt;

&lt;p&gt;The method under test had a dependency on another class, it performed two actions on this class.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;to get a list of data&lt;/li&gt;
&lt;li&gt;to return a DateRange (this is done in a foreach loop)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DateRange is just a class with a start/end property of DateTime. The method is sort of like this (obviously with proper names I just wrote some random code to illustrate the scenario)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IEnumerable&amp;lt;Stuff&amp;gt; GetStuff(DateTime dateList)
{
    var result = new List&amp;lt;Stuff&amp;gt;();
    var someService = IoC.Resolve&amp;lt;ISomeService&amp;gt;();
    var data = someService.GetData();

    foreach (var date in dateList)
    {
        var tempDate = date;
        DateRange range = someService.GetDates(OpenRules, tempDate);
        //do stuff...
    }

    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the same service is called twice, the issue is when iterating over the dateList, it needs to be filtered based on a DateRange during the day. So say, 8am till 10pm. Removing the stuff outside of that time period during that day.&lt;/p&gt;

</description><pubDate>Sun, 05 Dec 2010 16:00:00 Z</pubDate><a10:updated>2010-12-05T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Had an interesting scenario to solve today, while I was away a bunch of unit tests got turned off since they broke during some refactoring, I spent the day fixing theses unit tests.&lt;/p&gt;

&lt;p&gt;The method under test had a dependency on another class, it performed two actions on this class.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;to get a list of data&lt;/li&gt;
&lt;li&gt;to return a DateRange (this is done in a foreach loop)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;DateRange is just a class with a start/end property of DateTime. The method is sort of like this (obviously with proper names I just wrote some random code to illustrate the scenario)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public IEnumerable&amp;lt;Stuff&amp;gt; GetStuff(DateTime dateList)
{
    var result = new List&amp;lt;Stuff&amp;gt;();
    var someService = IoC.Resolve&amp;lt;ISomeService&amp;gt;();
    var data = someService.GetData();

    foreach (var date in dateList)
    {
        var tempDate = date;
        DateRange range = someService.GetDates(OpenRules, tempDate);
        //do stuff...
    }

    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the same service is called twice, the issue is when iterating over the dateList, it needs to be filtered based on a DateRange during the day. So say, 8am till 10pm. Removing the stuff outside of that time period during that day.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The method GetDates would take some rules and based on the date, create the the DateRange for the filter.&lt;/p&gt;

&lt;p&gt;To test this method we needed to get some data, and filter it,and check the list had the correct data after being filtered.&lt;/p&gt;

&lt;p&gt;We mocked ISomeService,using Moq:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var mockService = new Mock&amp;lt;ISomeService&amp;gt;();
mockService.Setup(x =&amp;gt; x.GetData()).Returns(FakeData());
IoC.Register&amp;lt;ISomeService&amp;gt;(mockService.Object);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The issue is now in the foreach, I couldn't just mock a return because it would be the same value and I wouldn't be testing the actual foreach. I ended up writing something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mockService.Setup(x =&amp;gt; x.GetDates(It.IsAny&amp;lt;OpenCloseRule&amp;gt;(), It.IsAny&amp;lt;DateTime&amp;gt;()))
           .Returns(
               (OpenCloseRule openRules, DateTime, startDate) =&amp;gt;
               //Some logic
               return new DateRange(start, end);
           );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This worked great, except, if the implementation of GetDates changes, would result in false positives or false negatives, or something.&lt;/p&gt;

&lt;p&gt;So I ended up changing it to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mockService.Setup(x =&amp;gt; x.GetDates(It.IsAny&amp;lt;OpenCloseRule&amp;gt;(), It.IsAny&amp;lt;DateTime&amp;gt;()))
           .Returns(
               (OpenCloseRule openRules, DateTime, startDate) =&amp;gt;
               return (new SomeService()).GetDates(openRules, startDate);
           );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way if the implantation changes, the test will break or, work. Personally I don't like this cos I'm testing two things instead of one. But at least I can test the original method works correctly.&lt;/p&gt;

&lt;p&gt;So what I actually learnt was that the returns method on the mock can actually use the parameters that were passed in. That's pretty awesome. Bed time, it's late.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/12/yay-for-nhibernate-3-0/</guid><link>http://www.philliphaydon.com/2010/12/yay-for-nhibernate-3-0/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Yay for NHibernate 3.0</title><description>&lt;p&gt;So happy. NHibernate 3.0 just got released.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nhforge.org/blogs/nhibernate/archive/2010/12/05/nhibernate-3-0-released.aspx"&gt;http://nhforge.org/blogs/nhibernate/archive/2010/12/05/nhibernate-3-0-released.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to wait for Fluent to be updated and a repository to be shoved on NuGet.&lt;/p&gt;
</description><pubDate>Sat, 04 Dec 2010 16:00:00 Z</pubDate><a10:updated>2010-12-04T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;So happy. NHibernate 3.0 just got released.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nhforge.org/blogs/nhibernate/archive/2010/12/05/nhibernate-3-0-released.aspx"&gt;http://nhforge.org/blogs/nhibernate/archive/2010/12/05/nhibernate-3-0-released.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to wait for Fluent to be updated and a repository to be shoved on NuGet.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/12/sydney-alt-net-with-udi-dahan-and-nservicebus-commercial-support/</guid><link>http://www.philliphaydon.com/2010/12/sydney-alt-net-with-udi-dahan-and-nservicebus-commercial-support/</link><a10:author><a10:name /></a10:author><category>NServiceBus</category><title>Sydney Alt.Net with Udi Dahan and NServiceBus Commercial Support</title><description>&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Update 31-12-2012 - This is a really old post and the licensing described in here no longer applies. Please visit &lt;a href="http://nservicebus.com/"&gt;http://nservicebus.com/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Last night I attended the &lt;a href="http://sydney.ozalt.net/"&gt;Sydney Alt.Net&lt;/a&gt; user group since &lt;a href="http://www.udidahan.com/"&gt;Udi Dahan&lt;/a&gt; was attending. There was no specific topic, it was an open questions/answers session with Udi. If you're interested you can watch it &lt;a href="http://sydney.ozalt.net/2010/11/november-meeting-recorded-for-your.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing that interested me most was to do with &lt;a href="http://www.nservicebus.com/"&gt;NServiceBus&lt;/a&gt; commercial support (&lt;em&gt;1 hour 23 minutes in the video if you want to skip ahead&lt;/em&gt;). Initially I thought that it was going from Open Source to requiring a license, a license I wouldn't be able to afford for my hobby projects, however someone asked about the licensing.&lt;/p&gt;

</description><pubDate>Tue, 30 Nov 2010 16:00:00 Z</pubDate><a10:updated>2010-11-30T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;&lt;span class="note"&gt;&lt;strong&gt;Note:&lt;/strong&gt; Update 31-12-2012 - This is a really old post and the licensing described in here no longer applies. Please visit &lt;a href="http://nservicebus.com/"&gt;http://nservicebus.com/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Last night I attended the &lt;a href="http://sydney.ozalt.net/"&gt;Sydney Alt.Net&lt;/a&gt; user group since &lt;a href="http://www.udidahan.com/"&gt;Udi Dahan&lt;/a&gt; was attending. There was no specific topic, it was an open questions/answers session with Udi. If you're interested you can watch it &lt;a href="http://sydney.ozalt.net/2010/11/november-meeting-recorded-for-your.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing that interested me most was to do with &lt;a href="http://www.nservicebus.com/"&gt;NServiceBus&lt;/a&gt; commercial support (&lt;em&gt;1 hour 23 minutes in the video if you want to skip ahead&lt;/em&gt;). Initially I thought that it was going from Open Source to requiring a license, a license I wouldn't be able to afford for my hobby projects, however someone asked about the licensing.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;As it turns out NServiceBus is still completely Open Source and Free, you can download the source code, compile it, and use it with no restrictions. However you must support it yourself, and use the community for support/help. While the paid licensing model is to allow companies to download stable tested binaries with commercial support.&lt;/p&gt;

&lt;p&gt;Great news, now I can download it and play around with the latest trunk and look at integrating it into one of my projects. Learning is funs :)&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/11/mentally-drained-by-udi-dahan/</guid><link>http://www.philliphaydon.com/2010/11/mentally-drained-by-udi-dahan/</link><a10:author><a10:name /></a10:author><title>Mentally Drained by Udi Dahan.</title><description>&lt;p&gt;I'm on my first day of recovery after attending &lt;a href="http://www.udidahan.com/"&gt;Udi Dahan's&lt;/a&gt; &lt;a href="http://www.udidahan.com/training/#Advanced_Distributed_System_Design"&gt;Advanced Distributed Systems Design using SOA &amp;amp; DDD&lt;/a&gt;. Needless to say I think I'm still in shock.&lt;/p&gt;

&lt;p&gt;Udi must be one of the best presenters I've come across, I always thought he talked a little slow when watching videos of him presenting, but it's an entirely different experience when you're sitting in a room listening to him.&lt;/p&gt;

&lt;p&gt;He really makes sure you follow and understand, at no point did I feel like I was left behind. Something that intrigued me however, was there was not one question he could not answer... He must have heard every possible question because people started trying to catch him out with some weird example or scenario, and he was able to answer it.&lt;/p&gt;

</description><pubDate>Fri, 26 Nov 2010 16:00:00 Z</pubDate><a10:updated>2010-11-26T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm on my first day of recovery after attending &lt;a href="http://www.udidahan.com/"&gt;Udi Dahan's&lt;/a&gt; &lt;a href="http://www.udidahan.com/training/#Advanced_Distributed_System_Design"&gt;Advanced Distributed Systems Design using SOA &amp;amp; DDD&lt;/a&gt;. Needless to say I think I'm still in shock.&lt;/p&gt;

&lt;p&gt;Udi must be one of the best presenters I've come across, I always thought he talked a little slow when watching videos of him presenting, but it's an entirely different experience when you're sitting in a room listening to him.&lt;/p&gt;

&lt;p&gt;He really makes sure you follow and understand, at no point did I feel like I was left behind. Something that intrigued me however, was there was not one question he could not answer... He must have heard every possible question because people started trying to catch him out with some weird example or scenario, and he was able to answer it.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I thought a there was a few people who struggled a little bit because they spent a lot of time trying to apply what they were learning to their current projects or applications like it was something they could slap on the side and benefit from, or they would think about the entities involved and how it would map to a database schema. Thinking like this makes the concepts really to understand.&lt;/p&gt;

&lt;p&gt;The course is amazing, Udi is a wealth of knowledge and 5 days just isn't enough time to download all the information in his head, but that 5 days is like 5 years worth of experience. All that"s left is to take what I've learnt and put it into practice.&lt;/p&gt;

&lt;p&gt;I highly recommend going to this course even if you have to take unpaid leave and pay for the course out of your own pocket, it's well worth every cent.&lt;/p&gt;

&lt;p&gt;100/10!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.udidahan.com/training/#Advanced_Distributed_System_Design"&gt;http://www.udidahan.com/training/#Advanced_Distributed_System_Design&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/10/failware-aka-msn/</guid><link>http://www.philliphaydon.com/2010/10/failware-aka-msn/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Failware... aka,MSN</title><description>&lt;p&gt;Microsoft recently pushed out a Windows Update for their Windows Live Essentials, in this update came Windows Live Messenger.&lt;/p&gt;

&lt;p&gt;Wow... what was the Windows Live team thinking when they wrote this? It's the biggest pile of crap ever.&lt;/p&gt;

&lt;p&gt;The progression of MSN was fine, sure it was becoming slight bloatware, has some annoying advertising, and some silly features. But it worked well and looked nice.&lt;/p&gt;

&lt;p&gt;My biggest pet hate?&lt;/p&gt;

&lt;p&gt;If I sent a link to an image, I'm sending a god damn LINK. If I wanted to send an image, I would send an image. But I'm not, I'm sending a LINK.&lt;/p&gt;

</description><pubDate>Wed, 27 Oct 2010 16:00:00 Z</pubDate><a10:updated>2010-10-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Microsoft recently pushed out a Windows Update for their Windows Live Essentials, in this update came Windows Live Messenger.&lt;/p&gt;

&lt;p&gt;Wow... what was the Windows Live team thinking when they wrote this? It's the biggest pile of crap ever.&lt;/p&gt;

&lt;p&gt;The progression of MSN was fine, sure it was becoming slight bloatware, has some annoying advertising, and some silly features. But it worked well and looked nice.&lt;/p&gt;

&lt;p&gt;My biggest pet hate?&lt;/p&gt;

&lt;p&gt;If I sent a link to an image, I'm sending a god damn LINK. If I wanted to send an image, I would send an image. But I'm not, I'm sending a LINK.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The windows live team thought "you know what, we will help users by getting the actual image and sending it to the user for them so they don't need to click on the link!".&lt;/p&gt;

&lt;p&gt;Great.&lt;/p&gt;

&lt;p&gt;BUT ATLEAST LET ME TURN THE DAMN FEATURE OFF!&lt;/p&gt;

&lt;p&gt;/rant&lt;/p&gt;

&lt;p&gt;It does have one really nice feature I like.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/msn-sucks-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;It automatically creates link's for searchable things on Bing. People and Places seem to be what's most commonly converted, I've seen some food's converted to links too.&lt;/p&gt;

&lt;p&gt;It's handy for when you don't have any idea what the hell your friend's are talking about.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/10/using-hilo-with-fluentnhibernate/</guid><link>http://www.philliphaydon.com/2010/10/using-hilo-with-fluentnhibernate/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>Using HiLo with FluentNHibernate</title><description>&lt;p&gt;I spend ages trying to find some documentation or tutorial on how to use HiLo with FluentNHibernate after reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ayende.com/Blog/archive/2009/03/20/nhibernate-avoid-identity-generator-when-possible.aspx"&gt;NHibernate: Avoid identity generator when possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://connect.microsoft.com/SQLServer/feedback/details/328811/scope-identity-sometimes-returns-incorrect-value"&gt;SCOPE_IDENTITY() sometimes returns incorrect value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nhforge.org/blogs/nhibernate/archive/2009/03/20/nhibernate-poid-generators-revealed.aspx"&gt;NHibernate POID Generators revealed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html"&gt;Identity: The never ending story&lt;/a&gt; - BTW they are &lt;a href="http://www.imdb.com/title/tt1386664/"&gt;remaking&lt;/a&gt; &lt;a href="http://www.imdb.com/title/tt0088323/"&gt;The NeverEnding Story&lt;/a&gt;. Bastards!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it turns out, it's really easy to setup. I figured out two ways of doing it, the HiLo table having a single row, with each column for each table 'Hi'. Or a row for each table.&lt;/p&gt;

&lt;p&gt;I setup a really simple example with the following table.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;'ProductId' is set to be int/primary key, but identity is false, since we don't want the database generating the id.&lt;/p&gt;

</description><pubDate>Sat, 23 Oct 2010 16:00:00 Z</pubDate><a10:updated>2010-10-23T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I spend ages trying to find some documentation or tutorial on how to use HiLo with FluentNHibernate after reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ayende.com/Blog/archive/2009/03/20/nhibernate-avoid-identity-generator-when-possible.aspx"&gt;NHibernate: Avoid identity generator when possible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://connect.microsoft.com/SQLServer/feedback/details/328811/scope-identity-sometimes-returns-incorrect-value"&gt;SCOPE_IDENTITY() sometimes returns incorrect value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nhforge.org/blogs/nhibernate/archive/2009/03/20/nhibernate-poid-generators-revealed.aspx"&gt;NHibernate POID Generators revealed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://fabiomaulo.blogspot.com/2008/12/identity-never-ending-story.html"&gt;Identity: The never ending story&lt;/a&gt; - BTW they are &lt;a href="http://www.imdb.com/title/tt1386664/"&gt;remaking&lt;/a&gt; &lt;a href="http://www.imdb.com/title/tt0088323/"&gt;The NeverEnding Story&lt;/a&gt;. Bastards!!!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As it turns out, it's really easy to setup. I figured out two ways of doing it, the HiLo table having a single row, with each column for each table 'Hi'. Or a row for each table.&lt;/p&gt;

&lt;p&gt;I setup a really simple example with the following table.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;'ProductId' is set to be int/primary key, but identity is false, since we don't want the database generating the id.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;The two HiLo tables are like so:&lt;/p&gt;

&lt;h3&gt;Row Per Table&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-2.png" alt="" /&gt;&lt;/p&gt;

&lt;h3&gt;Column Per Table&lt;/h3&gt;

&lt;p&gt;(shows only a single column, but for each table you would add a new column)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Then all you need to do is setup the Fluent Mappings.&lt;/p&gt;

&lt;h2&gt;Row Per Table&lt;/h2&gt;

&lt;p&gt;So for Row Per Table, the mapping for Product would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductMap : ClassMap&amp;lt;Product&amp;gt;
{
    public ProductMap()
    {
        Id(x =&amp;gt; x.Id).Column("ProductId")
                     .GeneratedBy
                     .HiLo("NH_HiLo", "NextHi", "1000", "TableKey = ''Product''");
        Map(x =&amp;gt; x.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HiLo takes the parameters (TableName, ColumnName, MaxLo, Where). Where is an override that we will use since we need to specify the row to return. So if we insert a single row into our table:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;We pass in our where clause as &lt;code&gt;TableKey = "Product"&lt;/code&gt;, so that it knows which row to get the NextHi from.&lt;/p&gt;

&lt;p&gt;For each new table we would just add a new row and a default NextHi value. Every time the SessionFactory is created it would grab the NextHi value and increment it by 1.&lt;/p&gt;

&lt;h2&gt;Column Per Table&lt;/h2&gt;

&lt;p&gt;Column Per Table is very similar, except we don't need the where parameter, we only need to specify the column to look at. Assuming we were using the Column Per Table with the HiLo2 table, our mapping would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ProductMap : ClassMap&amp;lt;Product&amp;gt;
{
    public ProductMap()
    {
        Id(x =&amp;gt; x.Id).Column("ProductId")
                     .GeneratedBy
                     .HiLo("NH_HiLo2", "Product_NextHi", "1000");
        Map(x =&amp;gt; x.Name);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We would need to add a single row to our table like so:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/nhibernate-hilo-5.png" alt="" /&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/10/google-is-fail/</guid><link>http://www.philliphaydon.com/2010/10/google-is-fail/</link><a10:author><a10:name /></a10:author><category>Rant</category><title>Google is fail</title><description>&lt;p&gt;No longer is Microsoft the evil empire, for Google is the new emerging evil empire. Seriously, Google is the new M$ of the 90's.&lt;/p&gt;

&lt;p&gt;It's always bugged me that I use Opera browser for my primary browser, a browser which follows W3 Standards more strictly than any other browser out there.&lt;/p&gt;

&lt;p&gt;Yet so many sites fail to support Opera... I had to use IE for years just to do internet banking with ANZ bank, until Opera 9.5 came out, simply because they blocked it. Many other sites seem to suggest using a 'supported' browser, even tho the site works 100% in Opera anyway...&lt;/p&gt;

&lt;p&gt;In comes Google, they always hold back on Opera. Google Wave? Gmail? Analytics, all had their issues over the years, and now we have this new super duper feature Google Instant, and their new fancy Image Search.&lt;/p&gt;

&lt;p&gt;Except, neither work in Opera...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/google-fail-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Except... It actually does work,infact both Google Instant and their fancy Image Search work in Opera.&lt;/p&gt;

</description><pubDate>Thu, 14 Oct 2010 16:00:00 Z</pubDate><a10:updated>2010-10-14T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;No longer is Microsoft the evil empire, for Google is the new emerging evil empire. Seriously, Google is the new M$ of the 90's.&lt;/p&gt;

&lt;p&gt;It's always bugged me that I use Opera browser for my primary browser, a browser which follows W3 Standards more strictly than any other browser out there.&lt;/p&gt;

&lt;p&gt;Yet so many sites fail to support Opera... I had to use IE for years just to do internet banking with ANZ bank, until Opera 9.5 came out, simply because they blocked it. Many other sites seem to suggest using a 'supported' browser, even tho the site works 100% in Opera anyway...&lt;/p&gt;

&lt;p&gt;In comes Google, they always hold back on Opera. Google Wave? Gmail? Analytics, all had their issues over the years, and now we have this new super duper feature Google Instant, and their new fancy Image Search.&lt;/p&gt;

&lt;p&gt;Except, neither work in Opera...&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/google-fail-1.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Except... It actually does work,infact both Google Instant and their fancy Image Search work in Opera.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;If you right click and go to 'Edit Site Preferences' and set it to 'Identify as Firefox',then refresh the page.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/google-fail-2.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;You end up with:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/google-fail-3.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://www.philliphaydon.com/images/google-fail-4.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;So clearly, Google fails.&lt;/p&gt;

&lt;p&gt;I hope in the future they get their act together and start supporting all browsers instead of picking and choosing.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/09/getting-back-into-it/</guid><link>http://www.philliphaydon.com/2010/09/getting-back-into-it/</link><a10:author><a10:name /></a10:author><title>Getting back into it :(</title><description>&lt;p&gt;Earlier this year I changed hosting provider, had a new VSlice with Windows Server 2008 R2, SQL and all the wizz bang stuff. But within 3 weeks of setting everything up, everything went down, and I lost everything. Apparently the VM corrupted and couldn't be recovered. Not only that I made the mistake of thinking "hey, you know what, nothing bad will happen for a while, I'll setup backups next month". Only something bad did happen.&lt;/p&gt;

&lt;p&gt;I've since moved host again, and am now hosted with MammothVPS with proper backups. So hopefully it doesn't die again.&lt;/p&gt;

&lt;p&gt;It's pretty depressing to lose everything, I lost a couple of projects I had spent a couple of years building that had only been live a month or so. So depressing it put me off wanting to blog anything. So hopefully I can get back into it again.&lt;/p&gt;
</description><pubDate>Mon, 27 Sep 2010 16:00:00 Z</pubDate><a10:updated>2010-09-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Earlier this year I changed hosting provider, had a new VSlice with Windows Server 2008 R2, SQL and all the wizz bang stuff. But within 3 weeks of setting everything up, everything went down, and I lost everything. Apparently the VM corrupted and couldn't be recovered. Not only that I made the mistake of thinking "hey, you know what, nothing bad will happen for a while, I'll setup backups next month". Only something bad did happen.&lt;/p&gt;

&lt;p&gt;I've since moved host again, and am now hosted with MammothVPS with proper backups. So hopefully it doesn't die again.&lt;/p&gt;

&lt;p&gt;It's pretty depressing to lose everything, I lost a couple of projects I had spent a couple of years building that had only been live a month or so. So depressing it put me off wanting to blog anything. So hopefully I can get back into it again.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2010/09/queryover-with-nhibernate-3-lovin-it/</guid><link>http://www.philliphaydon.com/2010/09/queryover-with-nhibernate-3-lovin-it/</link><a10:author><a10:name /></a10:author><category>NHibernate</category><title>QueryOver with NHibernate 3... Lovin it!</title><description>&lt;p&gt;Working on an old website I built back in 2004, back then I coded all the data access by hand, wrote stored products and populated the data into objects, lazy loaded relationships etc. 2005 roles around and I migrated it to .Net 2.0, but with all the old data access stuff intact.&lt;/p&gt;

&lt;p&gt;Move forward 6 years and I have to make some changes, so I figured I would update the data access to use NH3.0 so I could play around with it.&lt;/p&gt;

&lt;p&gt;One of the thing's I just wrote was a sub query using exists. If I wrote the SQL it would probably look something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM ProductType
WHERE EXISTS (SELECT 1 FROM Product WHERE Active = 1 AND ProductTypeID = ProductType.ProductTypeID)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With some more criteria, since the data comes from MYOB it's sometimes out of date, I check for status, active, quantity,price,etc.&lt;/p&gt;

&lt;p&gt;Originally this stuff was in a stored procedure, and I needed to write this using QueryOver.&lt;/p&gt;

</description><pubDate>Mon, 27 Sep 2010 16:00:00 Z</pubDate><a10:updated>2010-09-27T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;Working on an old website I built back in 2004, back then I coded all the data access by hand, wrote stored products and populated the data into objects, lazy loaded relationships etc. 2005 roles around and I migrated it to .Net 2.0, but with all the old data access stuff intact.&lt;/p&gt;

&lt;p&gt;Move forward 6 years and I have to make some changes, so I figured I would update the data access to use NH3.0 so I could play around with it.&lt;/p&gt;

&lt;p&gt;One of the thing's I just wrote was a sub query using exists. If I wrote the SQL it would probably look something along the lines of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * FROM ProductType
WHERE EXISTS (SELECT 1 FROM Product WHERE Active = 1 AND ProductTypeID = ProductType.ProductTypeID)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With some more criteria, since the data comes from MYOB it's sometimes out of date, I check for status, active, quantity,price,etc.&lt;/p&gt;

&lt;p&gt;Originally this stuff was in a stored procedure, and I needed to write this using QueryOver.&lt;/p&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;I broken the query into two pieces, the query against the Product with criteria, and the query against the ProductType, using the Product query as  a Subquery for the ProductType criteria.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var products = QueryOver.Of&amp;lt;Product&amp;gt;()
    .Where(x =&amp;gt; x.RetailPrice &amp;gt; 0)
    .And(x =&amp;gt; x.Quantity &amp;gt; 0)
    .And(x =&amp;gt; x.Active)
    .And(x =&amp;gt; x.LastUpdate &amp;gt; DateTime.Now.AddDays(-3))
    .WhereRestrictionOn(x =&amp;gt; x.StatusId).IsIn(new int[] {1, 2, 9})
    .Select(x =&amp;gt; x.ProductType.Id);

var result = Session.QueryOver&amp;lt;ProductType&amp;gt;()
    .Where(x =&amp;gt; x.Active)
    .WithSubquery.WhereProperty(x =&amp;gt; x.Id).In(products)
    .List();

return result;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running profiler aga... SQL Profiler (not NHProf, tho that would be handy if i could afford it) produces the following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;image missing - old post&lt;/em&gt; &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT this_.ProductTypeID as ProductT1_3_0_,
       this_.Name as Name3_0_,
       this_.Active as Active3_0_
FROM [ProductType] this_
WHERE this_.Active = @p0
    and this_.ProductTypeID in (
        SELECT this_0_.ProductTypeId as y0_
        FROM [Product] this_0_
        WHERE this_0_.RetailPrice &amp;gt; @p1
            and this_0_.Quantity &amp;gt; @p2
            and this_0_.Active = @p3
            and this_0_.LastUpdate &amp;gt; @p4
            and this_0_.StatusId in (@p5, @p6, @p7))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I removed the parameters since you don't need those :) but it achieves the same thing my old stored proc query did. And it's much easier to maintain too! No more hunting around in stored procs to update queries when columns are dropped or added.&lt;/p&gt;

&lt;p&gt;So far I'm loving the QueryOver syntax.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.philliphaydon.com/2009/07/jquery-serialize-a-fieldset/</guid><link>http://www.philliphaydon.com/2009/07/jquery-serialize-a-fieldset/</link><a10:author><a10:name /></a10:author><category>jQuery</category><title>jQuery Serialize a Fieldset</title><description>&lt;p&gt;I'm really not a fan of &lt;a href="http://ajax.asp.net/"&gt;ASP.Net Ajax&lt;/a&gt; and would prefer to use jQuery where ever I can. So for anything public facing I tend to use jQuery and HTTPHandlers.&lt;/p&gt;

&lt;p&gt;jQuery has this nifty little function called &lt;a href="http://docs.jquery.com/Ajax/serialize"&gt;serialize&lt;/a&gt; for serializing form data for Ajax. So if we have the following HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;form id="aspNetForm" runat="server"&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;fieldset class="fsLoginForm"&amp;gt;
        &amp;lt;legend&amp;gt;Login Fieldset&amp;lt;/legend&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;Email: &amp;lt;input type="text" name="txtEmail" /&amp;gt;&amp;lt;/li&amp;gt;            
          &amp;lt;li&amp;gt;Password:   &amp;lt;input type="text" name="txtPassword" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;                
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;fieldset class="fsName"&amp;gt;        
        &amp;lt;legend&amp;gt;Name Fieldset&amp;lt;/legend&amp;gt;        
        &amp;lt;ul&amp;gt;            
          &amp;lt;li&amp;gt;My Name: &amp;lt;input type="text" name="email" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;    
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;fieldset class="fsColour"&amp;gt;        
        &amp;lt;legend&amp;gt;Colour Fieldset&amp;lt;/legend&amp;gt;        
        &amp;lt;ul&amp;gt;            
          &amp;lt;li&amp;gt;Colour: &amp;lt;input type="text" name="colour" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;    
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;input type="button" value="Submit Form" onclick="SubmitForm();" /&amp;gt;
    &amp;lt;/div&amp;gt;    
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a basic alert method that shows us the result of the form serialized:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function SubmitForm() {    
  alert($('form').serialize());
}
&lt;/code&gt;&lt;/pre&gt;

</description><pubDate>Fri, 10 Jul 2009 16:00:00 Z</pubDate><a10:updated>2009-07-10T16:00:00Z</a10:updated><a10:content type="html">&lt;p&gt;I'm really not a fan of &lt;a href="http://ajax.asp.net/"&gt;ASP.Net Ajax&lt;/a&gt; and would prefer to use jQuery where ever I can. So for anything public facing I tend to use jQuery and HTTPHandlers.&lt;/p&gt;

&lt;p&gt;jQuery has this nifty little function called &lt;a href="http://docs.jquery.com/Ajax/serialize"&gt;serialize&lt;/a&gt; for serializing form data for Ajax. So if we have the following HTML.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
  &amp;lt;form id="aspNetForm" runat="server"&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;fieldset class="fsLoginForm"&amp;gt;
        &amp;lt;legend&amp;gt;Login Fieldset&amp;lt;/legend&amp;gt;
        &amp;lt;ul&amp;gt;
          &amp;lt;li&amp;gt;Email: &amp;lt;input type="text" name="txtEmail" /&amp;gt;&amp;lt;/li&amp;gt;            
          &amp;lt;li&amp;gt;Password:   &amp;lt;input type="text" name="txtPassword" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;                
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;fieldset class="fsName"&amp;gt;        
        &amp;lt;legend&amp;gt;Name Fieldset&amp;lt;/legend&amp;gt;        
        &amp;lt;ul&amp;gt;            
          &amp;lt;li&amp;gt;My Name: &amp;lt;input type="text" name="email" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;    
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;fieldset class="fsColour"&amp;gt;        
        &amp;lt;legend&amp;gt;Colour Fieldset&amp;lt;/legend&amp;gt;        
        &amp;lt;ul&amp;gt;            
          &amp;lt;li&amp;gt;Colour: &amp;lt;input type="text" name="colour" /&amp;gt;&amp;lt;/li&amp;gt;        
        &amp;lt;/ul&amp;gt;    
      &amp;lt;/fieldset&amp;gt;

      &amp;lt;input type="button" value="Submit Form" onclick="SubmitForm();" /&amp;gt;
    &amp;lt;/div&amp;gt;    
  &amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a basic alert method that shows us the result of the form serialized:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function SubmitForm() {    
  alert($('form').serialize());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!--excerpt--&gt;

&lt;p&gt;We end up with a result like:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;image missing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is great, however we may not want to submit the entire form... and unfortunately when using ASP.Net Web Forms, your limited to one form element.&lt;/p&gt;

&lt;p&gt;jQuery only allows you to serialize a form element, so I came up with a little work around for submitting only the elements you want. The example is done using fieldsets, however you could group them using div's, tables, or what ever you want.&lt;/p&gt;

&lt;p&gt;Basically I add a new form, and clone the fieldset into the form,then serialize the new form.&lt;/p&gt;

&lt;p&gt;So I've added some new buttons for this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input type="button" value="Submit Login"
       onclick="SubmitFieldset('.fsLoginForm');" /&amp;gt;
&amp;lt;input type="button" value="Submit Name"
       onclick="SubmitFieldset('.fsName');" /&amp;gt;
&amp;lt;input type="button" value="Submit Name &amp;amp;amp; Colour"   
       onclick="SubmitFieldset('.fsName, .fsColour');" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function SubmitFieldset(fieldsetName) {    
  //Add a new form and hide it.    
  $('body').append('&amp;lt;form id="form-to-submit" style="visibility:hidden;"&amp;gt;&amp;lt;/form&amp;gt;');

  //Clone the fieldset into the new form.    
  $('#form-to-submit').html($(fieldsetName).clone());

  //Serialize the data    
  var data = $('#form-to-submit').serialize();

  //Remove the form    
  $('#form-to-submit').remove();

  //Alert to see the data, this is where you would do your ajaxy stuff :)
  alert(data);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when I press 'Submit Login' the result I get is:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;image missing&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;I only get the elements in the login fieldset. If I want to submit more than one fieldset I can specify them all in the selector by using the specifying multiple arguments in the selector. &lt;a href="http://docs.jquery.com/Selectors/multiple#selector1selector2selectorN"&gt;http://docs.jquery.com/Selectors/multiple#selector1selector2selectorN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So by passing in &lt;code&gt;.fsName, .fsColour&lt;/code&gt; I end up with:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;image missing&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Now I can submit only the data I need to submit, and not all of it :)&lt;/p&gt;
</a10:content></item></channel></rss>